<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7595 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
<!ENTITY I-D.ietf-oauth-browser-based-apps SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-v2-1" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="March" day="04"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in <xref target="csrf_countermeasures"/>.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<section anchor="authorization-flow-for-native-apps-using-the-browser" title="Authorization Flow for Native Apps Using the Browser">

<figure title="Native App Authorization via an External User-Agent" anchor="fig-native-app-authorization-flow"><artwork><![CDATA[
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
  |          User Device          |
  |                               |
  | +--------------------------+  | (5) Authorization  +---------------+
  | |                          |  |     Code           |               |
  | |        Client App        |---------------------->|     Token     |
  | |                          |<----------------------|    Endpoint   |
  | +--------------------------+  | (6) Access Token,  |               |
  |   |             ^             |     Refresh Token  +---------------+
  |   |             |             |
  |   |             |             |
  |   | (1)         | (4)         |
  |   | Authorizat- | Authoriza-  |
  |   | ion Request | tion Code   |
  |   |             |             |
  |   |             |             |
  |   v             |             |
  | +---------------------------+ | (2) Authorization  +---------------+
  | |                           | |     Request        |               |
  | |          Browser          |--------------------->| Authorization |
  | |                           |<---------------------|    Endpoint   |
  | +---------------------------+ | (3) Authorization  |               |
  |                               |     Code           +---------------+
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
]]></artwork></figure>

<t><xref target="fig-native-app-authorization-flow"/> illustrates the interaction between a native app and the
browser to authorize the user.</t>

<t><list style="numbers">
  <t>Client app opens a browser tab with the authorization request.</t>
  <t>Authorization endpoint receives the authorization request,
authenticates the user, and obtains authorization.
Authenticating the user may involve chaining to other
authentication systems.</t>
  <t>Authorization server issues an authorization code to the
redirect URI.</t>
  <t>Client receives the authorization code from the redirect URI.</t>
  <t>Client app presents the authorization code at the token
endpoint.</t>
  <t>Token endpoint validates the authorization code and issues the
tokens requested.</t>
</list></t>

</section>
<section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" title="Using Inter-App URI Communication for OAuth in Native Apps">

<t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>

<t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>

<t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app"/>).</t>

</section>
<section anchor="authorization-request-native-app" title="Initiating the Authorization Request from a Native App">

<t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant"/>
using a redirect URI capable of being received by the native app.</t>

<t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>

<t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>

<t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>

<t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>

</section>
<section anchor="authorization-response-native-app" title="Receiving the Authorization Response in a Native App">

<t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>

<t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>

<section anchor="private-use-uri-scheme" title="Private-Use URI Scheme Redirection">

<t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <spanx style="verb">com.example.app</spanx>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>

<t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>

<t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595"/> for
private-use URI schemes.</t>

<t>For example, an app that controls the domain name <spanx style="verb">app.example.com</spanx>
can use <spanx style="verb">com.example.app</spanx> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<spanx style="verb">client1234.usercontent.example.net</spanx>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <spanx style="verb">myapp</spanx>, however, would not meet this requirement, as
it is not based on a domain name.</t>

<t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>

<t>Following the requirements of Section 3.2 of <xref target="RFC3986"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<spanx style="verb">/</spanx>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>

<figure><artwork><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork></figure>

<t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>

</section>
<section anchor="claimed-https-scheme-uri-redirection" title="Claimed &quot;https&quot; Scheme URI Redirection">

<t>Some operating systems allow apps to claim <spanx style="verb">https</spanx> scheme <xref target="RFC7230"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>

<t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>

<figure><artwork><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork></figure>

<t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
Section ??? that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>

<t>App-claimed <spanx style="verb">https</spanx> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>

</section>
<section anchor="loopback-interface-redirection" title="Loopback Interface Redirection">

<t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>

<t>Loopback redirect URIs use the <spanx style="verb">http</spanx> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>

<t>That is, <spanx style="verb">http://127.0.0.1:{port}/{path}</spanx> for IPv4, and
<spanx style="verb">http://[::1]:{port}/{path}</spanx> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>

<figure><artwork><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork></figure>

<t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>

<figure><artwork><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork></figure>

<t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>

<t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

<section anchor="client-authentication-of-native-apps" title="Client Authentication of Native Apps">

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <spanx style="verb">client_id</spanx> request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation"/>).</t>

</section>
</section>
<section anchor="native-app-registration" title="Registration of Native App Clients">

<t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>

<t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>

<t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<spanx style="verb">.</spanx>)
SHOULD be rejected.</t>

<t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <spanx style="verb">com.example.app</spanx>,
the owner of <spanx style="verb">example.com</spanx> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>

<t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

<section anchor="native-app-client-impersonation" title="Impersonation of Native Apps">

<t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id &#8211;
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>

<t>Measures such as claimed <spanx style="verb">https</spanx> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>

</section>
</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

<section anchor="loopback-redirect-considerations-in-native-apps" title="Loopback Redirect Considerations in Native Apps">

<t>Loopback interface redirect URIs use the <spanx style="verb">http</spanx> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>

<t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>

<t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>

<t>While redirect URIs using localhost (i.e.,
<spanx style="verb">http://localhost:{port}/{path}</spanx>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection"/>, the use of <spanx style="verb">localhost</spanx> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <spanx style="verb">localhost</spanx> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>

</section>
</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="fake-external-user-agents-in-native-apps" title="Fake External User-Agents in Native Apps">

<t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>

<t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>

<t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>

<t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>

</section>
<section anchor="malicious-external-user-agents-in-native-apps" title="Malicious External User-Agents in Native Apps">

<t>If a malicious app is able to configure itself as the default handler
for <spanx style="verb">https</spanx> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>

<t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <spanx style="verb">http</spanx> and <spanx style="verb">https</spanx> scheme URIs.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="authorization-server-mix-up-mitigation-in-native-apps" title="Authorization Server Mix-Up Mitigation in Native Apps">

<t>(TODO: merge this with the regular mix-up section when it is brought in)</t>

<t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>

<t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>

<t>The requirement of <xref target="native-app-registration"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>

</section>
<section anchor="embedded-user-agents-in-native-apps" title="Embedded User Agents in Native Apps">

<t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>

<t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>

<t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>

<t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>

<t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>

</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC6749;
&RFC6750;
&RFC8446;
&RFC5280;
&RFC7595;
&RFC8252;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&RFC7230;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
&I-D.ietf-oauth-browser-based-apps;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, <xref target="authorization-code-error-response"/>,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>TBD</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAJpmYF4AA+x9+Xvb1pXo7/evwKd8TcSUpLV4izOeGXlLlMZLLbl5bb+O
C5GQhJoEOAAoWXE8f/s7691wQclJpp15r5qpI5HAXc499+zLZDIxXdktigfZ
8XmRvTxYd+fZ3nQ3w1/qpvwx78q6yp41+bK4rJt3Zl7PKvj9QTZv8tNussqb
YvaunNQ5PD+52Jvsmnnewdd7O3s7k539yc5tY8pV8yDrmnXb7e3sfLWzZ+Cl
/AFPZt5dPsgOq65oqqKbPMFBzSzvHmRtNzdmVs/L6uxBtm4neTsrS7MqH5gs
6+rZg+yqaOHXtm66pjht7d9XS/enyWkX+MoE/pdlZQXfPJlm3+bNvKNPeDNP
ytk778NimZcL2CJ8Oj3HT//9DD+ZzuplONTBNHvFEPAGO8gbAJn/uYyX4xf/
LiCTwbJs3ZQPsvOuW7UPbt2iR8InvOmOp9n39XxeNG1XBOs/rvGjqvetTNzx
1/++cF9PAdzGVHWzhBO+KBBEr5893tvd/Up/vbt71/16T3+9v3tfft2/u6fP
7n91X5+9fXdPn7391W194M7e3l376/5t+fXu7t4d/fWeffbuvTs78uv927fd
a/f103t3vtLX7u/d2cNf3xwdHD0+PHxAmxZ83npcz4t59hgOMJ8BfmVHRZdN
Jtm9yUnZZQfLoilneZUddXk1hzPO8PHstG4AG08ZLHCKhJmz87w6K8bZwYuj
w+z/7E9vb9E8DrncQWzZcV/QAPnCTtDCYC2sbd0V/D5flF2AHfz5w/7j6eun
jyfn3XJxe2d3svvVV1/t7u0RqPS798vFBG7Q/d1dhKYpdZ32+O4BnBWK9+1J
3rnvYLt3946D4q5C8d7OPQvx3dvu1/vJZ+0Ie/t0JIeTJ9Oy6E6FCDR5k/q0
aOt1MysmZQXXKkeMTDzVFjO4Dt3VpKtX5cw+cdLk80VxJQ/97bKbFNUMT3fS
dgjE/kBd/a6o4KAroh/970+a+rItmslJ3sIo+WpFc10WJ/htFeLRD8UJkcOi
6nDlcKpwx6vs4NUhoUs+mxVtC9Nkr9Yni3KW/a64yh43xRyfzxdt9n1xUSyy
3RTSTCxFepQvTvPqx/BzIC+Pfyzad2Ubfv4dULB6flb0P/6uruJPnyc/haF/
t17mTe/T78u8Dj98jR9Wc6AlVRV+8xS+WVfzk6I58zD6eQ43BhjA7ldC3xaO
vl1eXk4v96d1c3br+PUtfOYWYrYCfrI7wc929ndu3+LzmDVXq67uH8hj+vys
yVfnV3gU/pX6Lq/WeXOFS7g3DHSAyw9519bVDVZ5j1YJ8/K0MB+u894OXERc
58tVUR0+CRfJnwFVqapi1uHyXj4/eBU9Uy3KqsierxdduSzmZR6x3VdNDayu
XhC+HVZz4KCwLUuxEPv0BaB0B4SIQOwtP/VHfi0XsN2Ah4hX69PTHnIezc4X
+ey86yHLi3yewxZ6oxyVy2VdRSj3apq9rtuisujif/M8n8NX4cfA7g5mRfjZ
YxgE2HKx6OpqcnAyL8OvH8FNqq+KxsOGg1VTLhAX9tIHXefdbLpub1k6fetJ
fVkt6nw+sR/Bmy8Oj47v7+xM7u6HZ4ifZ0erYgZ3XSgAHx4/PNkdZ4cvnr18
/fzg+PDli+zo6eM3rw+P/+jj65NiViwBKrjI3eHT+QH2tm6a3uk8qeeKxf7N
fFFcdvHHcJVfFc2iKpoepF/Vi3fhh0fT7Jv1qsv7I+cnJ+s2hCYAc9Y2s2lV
tt30rL64tXKgaN0dmT4HFM2Bcm26LJk+lO1Odzag6wtAtPxduVw3eQ8DHzHL
uAkpBJwBzv8cCHbZ1G0P3Z6DhFku66boweG7/MqnOmu4yn00A8DUsLtyjhLX
rRYQpZUPJjPe7mQp253svt2ZogAAI3x7fPxqcvDm+NsQUN9erYqmK9532XGT
V+0pII0SiWwb37m1O90dPYj4lY9sL2ddLbi2NwxaQJRnZbFA7tkDLVCS2fk7
BEd9mbert8DqyiY6zx8Ojl6B6FXkXXZ0XgAlOgKxCA50kr2pLoBk4FrmMBK8
CRBoM7hn2bO6ucTLttW/pzMcqcWBWhpnSjMTgfa+uuWN/daO/RbGfqtjv6U1
vaU1KagfH72a7MWiI1DQClfN8gjejnJ2Jax8L7HCkGXAkHvGmAmIm/kJEG0Q
QI0JFaw8oPSnqmBlRZWfLABSedadl80cNazuyoCEYgkLEPj6pMvLKluUyxLh
mFvKD4InYkEGYLooZyCzFiUgQpMBITgpzkHGyOpTGFqlMThBoAXZyVVWA88u
cKUdSjIwDMzY1ABOOHZgJrCBksboLgvQM2DMeAw8Qfw4nL6mwfPFor7EceEB
420rS29LtgOflYAaMHzGa59moKSCLISXqDzV95piBcypYByqT9p6UXTwV+dB
eyfkq8aqs3Dx21lTngAMYV6QaTNURKZ8cstyDiTEGOCmTT1fEwSyD5+V3p8f
zUPvBx+leQGM81LE/9miBEyaIEQQSsG9zJYgxC7G9A4/Z5riP9dwDi0dAcEB
RecOdAo8aAvzbTicrgg+GyHAEMAyFcLdmw2gfwm4QHPJE+tWziQ6yy9aM3Py
K0AdtlU3oDniGSFWlEAvB46xdchoEgtvxyncaUFHgyPD0/YmpvUagifOldFc
ggP4XI7H3MKNbADMsCy4NkvGAroXvBzQk76kVwYW2+Bi/nMNpGKOu2tBMSmC
JeJVF6gEi0Ph63TdreHxdQuY3l2BxgKIDhPAStsW0AuRCl+fLYq8mSDVntJq
jgj8icnXqxUwG/d6iC1jxNYVXHgck49RqNNlkb8DttYiDCu47ki6AJ91nHa6
GQhneOlqWBIsHhSj3CcoQ6Do4x8cLezzAlEqPF4+yHrdwdkQw8xPygUuG4ZX
FMnm64avhNWoiJxZEteuT1pgIzUJp3ZK3tjraDpQv6u6g6cuQAsMiSMqhIC+
a8AYD6lwTF0jvUU00L238J8ucaeIZUsQx7M5HFsNd43OGe0EeqW84RFcchS8
4Mf1EuC3LNuCyHF1NXSbcKcgwuOxZjP/JUWBoppPAP0abwpaGy4ZhsZHgB3m
3nGd4GQ5ifLeophS5vN5w2gEL8I8ZdsCMcJXlOgpcwiY1yJHiRunbQvYAhMb
QhygxboMpm/A6OolLUA/t8hFh8fEhlbjk8XMkUV7KhYJADK4usWimBvaXZI3
ndet3b73AJNCPlBgLbRjAF82L09P+SIx2gV3H9aPpLZui4FdICeA6eAmwffD
ZDYctNbN2cMyEdkUYDCb9FhERuYONG7lGd4nmA6GrZmVW3aZtTMQPOGWlqcF
aoW86ZrkAxkn7+DtkzUQVjiIA2/sFm22mUCHyILDV14VoUkPNYTTKOcxVqqI
4Jbp6R+7ba4FEcNNAl/Rv+GrBBnafNJwNCALZsX7fLlaEAjsHcq2w9WMkJBk
ZyBnd0jTAawIUCOyTbbNyxx5KImQdCtanYNg3jJLAZSiQfCjiUF+h2djh4oW
ORpbcqSPnhO/Bq0eJBc8N2Ovu+XqukIdlu4SYeEYhil8bgIqEEvHQPHp/VxP
isz0Dnq84Gi9Zjt1yLjo83J2rlQjtSRAy0VxRm9NHF76t2DbP+zRFKVm4Pah
xAcfACcsz6qCbSAAF94FyZ7bHz6I+frjxxFjlFnzTWUqV5MgBkR3pZoT3wG6
1TQETICwhzfoysAqjspqxnKBp9cqEg+Imc5rImtC2RLWZICY+1rYGASf7DyH
C4Si9XrFuhEcgBsXd/mCLL3ZwWrVynho/YbxxkK9rbLyCChl9njdEPl6RbI7
ItmHD5utrTQUkoRw3kdiKn2EplI7/bX2VAR+oPIMQgc0cJCPABjHdMHfoC5s
IXZnByGG0AHsqEMQ0ZnfZFtT1hucJR6U59m7CKuAi4DuQNojI2/p+QFQK7Es
tS3QDbZeEtVDgDXFEpAKZEKQSdcNvZ7jkcJx0YJP63VFZPMER6X1FYgF1y8d
UM+8Bi7aokYymSijnhenZYUTAtUgLoty7lZIvrYemAfA5A+QwHWIFrN8haol
boKIWiTkJGjplPTcH87TGl+JSuoKBC4UTQGF4e+mAKYp0iweGZuflMBO/TUy
0ZBFHjulBKm38sukkOltA1e/6tRGwSfRrmoy+ouuEr3vBAnmyj61QWlyi4m6
g50vjC1zEgw3jVqrriqoQgtLSCOEuqjvBJRU+B/o28tMVwISphisUKYtgWtd
MfFCUXS2XuQNfVggNgoiq8erBEjO4LYW07PpmIa4PC+E1BXBzor3gHiI9/B7
7mQiJLPvABVJjyciyYakAml5i9R5K8UJ+oeKLKEHblUvhN3np+ika9f0yOka
NClrnvJ02AHpjkUimiIAKFtdPBNG5pswkrKKoJGPpSAWwntXtZg4iCnwAce8
SU4wNbBZ5ldIAGgE5OI6X5uSU0gPUnm6kCs8NQcZou1iYOk4A3HfCNB8T4ip
mCW6BABf4gkR+421JT5b1JdMcvTHmP+yP2wS/K1+9dts889vJ+HPb/n9n/T7
nyaT7d3RJOIPr/lOZZN/xQetjofPx+9fMz9//5KQJfn+v0y290aTeAHfkOQH
643H/9T5r93/rz0ewHN/eD8Az/ALO/9jvok3gydbMZLrB3jeHtHSVIk4FgWF
fv43wvPO8H4IP30E/Xn4uRmed3F+svUz67HTDcPzF9xP76p/eJB9dlqeTVRY
npwCaWBD+cOtAzFuZwHh2PrIZFdN357Vm14uF4s1mZrZ7PrhQ2/8jx+tZZao
oxmi4E4AYg2+mi3Wc5HfTms1O4NGgw5+sxsqmM6oENniyUSRVk49l4k+L8OQ
tgj0fZnPQc9R7SoyofFQNMg2EP72HP4eEXtdkewEks0VGank9Ysy73Mqet1x
DzJrocyAft4GmITZi/c5K8qLou2r5yQHOr0tYz+a08fQuA5LL6oB3vtFBDuW
Mor3KzIjzUXIqivmlpe1aNPd1apoRYglFEBGyrsKRPJabdSopb/vgJXZRdMY
g0fiHoFZViB/tmIcz5YgANW4MKvj8pYZUmRW4tMMB1TvBq9cDLXhECmODGex
P4RzkfFm2Fw/ODqtKjqfBBxgEbc3yCWhXSCQyGB4dajx8QzMIOazU356rBaA
aIuwjjsDwEgL+/2bGGB+NY+WfnLVg0Y4/V2ZPpa17CZ7L0U7c/Or0EYbEDFz
ZdUfwTJUnz14eh6u5EU0A5Qn2wYkZj8KvEvELAOBiZYGgssIby6MjUYOsrEl
D7lHJ7xrHxJkwwQ5GGaC4VZKmolmJ76mTbDOmpA8zKT/Aw8mIcG65U3okEnS
oWzbWVNRy0ookqOABiRPyEcecTuF9EnVcKBsxqdsaIgNloPgIdOKzONbvPDh
NrssFgs5JKF07CQxywLdCmW7JGyiGYkizq2HkeZEoH/22WeRZIcxjcKLe+sh
KxdtlsFgKW1SeenjT8CHPYrR45rOFK7ezZ6e5vjlwBUIfKQaNJC4KezlSd6A
beSlgAxoDGwm+RmtN+BCvuHQ3g7Y37rRBbIwEnvP0ZYU6rLWJtsHOxzUo+IU
vYw85IBSu2FQ0x90vEGdjal7vHynPvetEY+KWS5kJRZh6mpxFQ0+sGs1JySv
rX8T0MVQoT+XHcKeaZshMB1EZXFKI9E4LS7RIALsOSfnjdhET4oKDrprx6Zd
w7GK0u15Iv2teHOO/ctJ4QsYd7MEDucZgANGHot+3unV647s9njmJRCL86Ze
n52n5SofS5HN1x2DaXFlQL6q7Rg1G2basQi/aXxS8iAanheeyjBN0KVttfkg
4Vm25AOTWx64pclNYk4Kpqf5kJSJtqek1YWMKSD+qadXwJby7KyruRivxOUX
OhfHpm7SZj/kAMVFWa9bRNqmwXju+QC+SvwEYP/jPlDy5rp9GhcIYHcscEOm
xhe+F9oCDMt/zpCxu3+MIxSJyc7q6Ki14CbchhnZ48mqFy92E0CSIgSxdU/7
NREjDy1OACcfbgSzhIfTc+WjudUEN4mEAPFnBgJAbzO+Y1KZuch68n6Ja1jT
sdSrHKAXXk98mP2cdqIs9JuygqlhCq2an1u4eHTuTpaIORe+V6AvYTbolbTC
bA8L+XoyPNC8R37dgngxAfe0ZMfgnHUX2CwQ0ARS+86Mmi2FbbE4xRhEknf6
FzN2fxhYDkxHtncMBUeWWk6LKdqJeX0CanSklIyc6EGrlxKDQHs06LcjLwn6
5g6cFBNFRnnIo6wYcYqtsOYaK+w4E1urja4pNYJJRHJP4EP+llsV4Tgm5461
VNagYYMexhJ9Rh53jRjo8WeQf5o1Cg9siQ/8uDYIY2QdsWTgNTw7Uby2q+tB
f7YIpv7SJITQpK3uGMpq425KQpY8df5MzRS1RCyGx5YBSyTXV4/n8NqAi1UF
kCMEMu+DUAA2CiybSA7doigkjlQnlGdDioLWFfKoucgMxk/AD4Yvet4kMofH
QIlz3QGHV6WAwT9zqQNwueF8MaS2RI3AUstAVJErakUJQSpy/0VhEl4AhZoM
jC7mehKoWEsKAOYuCbZfojeRnd4uWDHhe0BfYXEKw50nKPTEfXkNjQ6jMMU1
hgZOett4bwdkV7mX4OmgwQJejLEqBzy5DK+d453ix/a/BWljBmQFw6JIL88o
omNVEgKwDKAjewQmCGdhB9ycEW+BL1XAButLPGgiLNvRrYGjIfTL0WjXgBpk
NI6GdgViJwZ/gHbEoqEECSkU+pSfJWAkgod6TdF96g6I9LOVLr7jWK4SMKDw
Yg/SnBrGPB0+BLXO6HRGLB3swhUT6pxPwJKQyFollB9tEdn27ZGzGsiYkoDF
BgN0FB70N5fm7QOEiPDF9NEsGUC0geebkOdb3sp8tb0BYzWDbBIGfFMtyneR
+20cbp2uDhm06Y5rAAvpU8wCEofW6tVRBQn5jBcE5zvxPOP9jV0Am90Bsadu
Ir6QtLvM94oEXokbO0SC1zYMI347+5P0NvHPJ6zm8yygojdeza+0qU3veUfz
22uGER9gCij+0fz0C1bzCcOwRzDtv/rJ/cHDxN7Jmzkmf3IuNLca36mW8Of9
T4HNXYDNofAyXstTYEZNNvmVVvMJeLNpmPi1DcMAiO8FVzO8U943fydCcf9n
E4okEf08e6m8OUktbuRT7TNLdazKmMJ6n5JsMw9WrU7WYY9qihX/bA/pr++t
SptPPO/lP9RZZSPKIqms79Fb5u9ImhoOC0vlUeh+rvVZ3f7v81mhN+6IvUn7
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
1z15fVKd/mG+PLzcJIvgiaqHu3MxeSiuRY5JkM78YNSPbIhqCy6RGhVDHeg7
4JU/LtvN2oN49FuvB8J40FXO+xCbBOkDNrSL75WUuBCJzZw06444Dka1WYkN
RZGXpLSFQvVzlv2uEelsyCjMblWfxH00coeXeTc7F6VkMCOYhGDP6RbzThFL
rxMEJb4rN0tAVxwsUXDH4wLbAYUHAkVJ5WjGS5IWFOPeVJ7FRWS1pCaadC5Y
b0fxnv3aHiquq54tBw4rkIDlycCHsqHOahzSRYF3BPbWD/i1Z5LDX1dtqQWa
L8riEtW9kqTRMNANfVtoUPMLoD4VVGwTMTkpnFKOKhyBveHJsy3syNsSAawV
qTh4IURjeyUmgfHWlS/gcBHTS7oZqiWGvhXPSu2FLUiXEM5/uG5aOHPqitlL
4zFKN1k2rKLUFK86CtL/tC0M5DHnh0HFRB7TVT2Qth8uKGNgvckD4HzedVNJ
K5FVXbXSRSJVQzhu0hD6qYwVrwIoOwhPKYgyKyjaJVUXh4w6Fm3IvWlRZGqe
Jsoecsi7kgeH+/Y1BBsqzMW8X4tNEXtjDGeexsHSFQlQK7QzioSJ7V4o01Cm
14ZSyUT/Tsumpbh/DeXReL6NzSMuyURuXDTbDTNYovJWm0p1YExNCbis+uys
rt9R/YiAfJlNZaIZzNcE4GlVLvxoUQc9B8zACW2KxYtqpJgT8fvboTHrwl5P
ayi3QaDSwUGMtv4+7PQgRxJuukin7AZas2HzPAqx2xjJ5bTlUQYCSnPl+b63
vahWTJqhhe9Pb4/GcuSEOlT6RUrbkcSDtySsmscDO4FUUq3CrajobPeDwdsU
++uWZMUjV82yTiCeHbihlj4IVnJtJ8I/SF+Jyoy5HlJhuI0I8spJiJaNrpMs
0rKj6Qe13UR2lKJL6d1uNKnF1oY4tWTrm6fHW5pF4hXns5avoUtQzQPhrnMd
QPCtLdQgtlRkFY8/LPSVU06o/pPtWiUmGsWsjlqP0Zusvl6RmcPUooh5nJcN
ZtdZXMqzCttLosw0q88qqhaiyleAoFoS3XU6aH3V0CRVPd/ERz48lJhf69uo
D92I5ic5KkUNYGbxNPA/VVwxblDw185URUsBjz4f3GQekR4XtHDSygZsEeFx
beEitwhnfAe8dEZN7Cfv2UWChyYyysePYw5Ac5IuD+kqFfNC+uNVxeVEN6Kx
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
rZPINQUFb+kkco1BwVs6iVxTUPCWTiJnnETZbZ1Eru4kyv5RnETJLvrdUfRP
5Sh6a9f2ts6i3z0u7R4Xmk9bIdZ36ac5WyQw+rOcLcQim/2CcaYb3Z11R4yr
O2Ia9l8w1n6hm57ooWYl5mMXCfDmUtfckhve5be4tmutNt/QnJLPyWKyB2xQ
nGFOSvaJ1E5+qRPQc/hEEaQ09b06jqOEzzQ8bcrfdm+FAbLXvbsRBuiGt9V6
DFDTde9uBwFqvu3dTUJCa257d9OQ0D/MbR935O9X/T/eVb/urmc5dKs7PqOc
9JWYDtTqJLzDXygho05nenSWEykqSkqvlgDFMh52md35PNzsD7eyu/S3e/0H
z7K7/g13Pj943n9E9PvcuZsGnWJXfnLQCen1LDQnIqDFyMyIUv8GiYhdNU/T
3+PXFurZ8DtDB08QIJbW1dcordGjwbALicEpLPXbIFlOJdltuBga7gXqCmlL
4elK+T4z0aAjKEPOjr+WPwgto38BKtP9rhGu0wjjNP5jBeFurhemis66AJwR
RZoNehhdUI2ygFRFKRrfdFx+CUxRc7/UafX30itTrVYjSX+rrjlSmDNU0yPY
/yk95PfRM//Bquy/ylcLOtPnWWf72au9bnZwNVvmn5sA9I1/VNtOy52W2fUN
ldyQiaiYG2wqxRm0skPBBWcrOttKk2mohmw4Tqz83rv/o9w11Byyhy6Zdjm+
cbI4RxbWe6/JkD0D8SmsX3/9y72dwdvdnf7n82l/uLn5eGvL69PfU2tlcomi
DhknfHkLUmj96PXv3+31H/s+7OpgQCLMvKsR+8osDEhS0b6RSJvHWyLmwYV6
xFCklX12w8uj/kLF3IaLz7NSQ/Nx78njhz/e7r0lmH7OaWvFB4mz0v/594Od
P22/pb9lP7DW8GgXX7z6t/SLRJdQTUKeDO/4oUnxSB5+/2p/5/XzXfrBq9c7
b1/s4TebT7K70jief7zZf/5obw9KS/OfO593Nzc3+3t7e8/xi61N+ufWpv9g
j1KhKbu01pSZT0p5Rirf6kIsIX88F+YJZ5gOhwMQdDVvJKZZmFPFGE0I26Fa
vV46eCWCwNdQml/4/XBCrONxww26nNizEfAQG3pouRCO+VzOUWXff/ki1Qc1
+PD1q6yrfF6MZQW/44VOG2R4Q3Oj+t1PbJh/Xms4ATJUGq5819zwgV6q9wbE
40Uz+3hwX9pOgga+7fBvqGrfdbKDN5XPuunv8NkP2dZ34RNarfQZ+sQ/s3G4
4Tfe8/0/7r/z/91+8eZP2zxEqViUDE0+a5vLRH/Fs2E6hbUhk2XEv/hBGY/9
pGt+Ih/RYPgoS++YHSntHX92zYQT2edWD/8Z9rIbqew9d38w5B8N6Ue0Wvjr
YCsMDzqpjG4rbBbeK5a8qbJV7Fc37/g9zua/b3ug7+r7d2lHEjnMvcHYKt2Q
z65p/2ZTpRPTyx74qXKPdL4eDx5oT1mjsH94dc2c1bANTT1Ov/9Feu+S3qPj
fgRJx/um1baO11fafP5rTHNjR8NGaNsLEfFQ6a394ga78h515x5NGHHpDmkW
H/DkPdQe4Y0qz/gfEFJ3K/0yDwchRn+JAiwL/6RRbfRJfG0M8P9tooymsHo7
4KO1Y+Oh6QCgiTUf8DT5KGkm/eraqaQLmqbtQTzWVqbWWo74i0q79oubtErb
aEsPamibBbksGv1nzZrFr3+ZNYuojepJMl/8lAmV3/cLnk40rYLa4A1qkjr5
7pqGH8iV/jAKZ/y8eRlDKCTiG2zbbJbAEplNLmO83SSNNO/fx1Eg4Nlf+EQd
av3POFUwbKij1QcKOEhZnSeSED1R/VBD9Ifs/r3vtoaPVzOyRxafmLg8i//0
T6ADpkP1rm787w38jJ8klfz+Vv/BNlTrh1v9R9v4ln9P397b7N97YoYUKl22
jsk80TqoWC/zbzoqqhYjFXQ0cnH3c//y8rJPDBj+epiqbfjS6w45AnA3NrMT
i3ubXX7Lgm05EyqJhMDWTob3321c27GN7Bw9gwi6zO0ud7rLtx4Ntu4N7ieG
zdnyfHp/c6u/9eTJk63h8P6PsG3YQ2VSPRHGgTf+5f7LXTMLMQzpOv9NKtH7
7g2KfJZTDOWutxaK0xmM6LvoIuN7/jt50/ZWC3ItUgCKa2G51F4rZlr/Biwy
xTKWPwgl1ogv+P1Bf/tgZ3/fGUsLnFbKocHzSgW9/QtR/5dIK6RUIv37Ir+a
zvNxGdwSROhIvXXsxI3kKxLs0uxY3RfBncGug2jzsVcB7GmcqgqT/uHwyY/s
OPhe3a7ESk1V6/2PyJP4n4GvYeYCLdoxlQ/CnDU07JWt/AIVYFbTSbIB2ldb
K2V4qYf3gO9JGEVlTmpTIn5t9R1jWjQtLI4DLyHeo0XoID19l1kmwqSAlobG
upxeOa3RhYqxE6abKSszUvbkifGkcebjHsgqM+/HumdZwOgn3BtsJmbpFP9K
WXxWz1JmPEuus9XN3v/L5uZwM+scvNne2e32ss5QPnuQdd7svt3ZffUuO9j/
46tuz3XuyVcPs872S//lwfar5/ST+/L5M/+TF+8PwvMP+PPte/7z1+9fPZcv
sPM6D+nL4eb2TtbZff/2NX8nNYHiVnRMO0ruqXQrsRtNCL/P/DRQ1O88n2bq
gOvKHegH58fi++y7tzPMfGd2h9lj/5cdJ9RogAzW3GG6YXJ1Nf3LneGDO8OH
d4bP7uwM72zfu7M7vPPY/2WHvJmjUBsNwqEmTv0BfvY8+EBPpquTE/f/Aans
a5vNegIA

-->

</rfc>

