<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7595 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
<!ENTITY I-D.ietf-oauth-browser-based-apps SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="March" day="04"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in <xref target="csrf_countermeasures"/>.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<section anchor="authorization-flow-for-native-apps-using-the-browser" title="Authorization Flow for Native Apps Using the Browser">

<figure title="Native App Authorization via an External User-Agent" anchor="fig-native-app-authorization-flow"><artwork><![CDATA[
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
  |          User Device          |
  |                               |
  | +--------------------------+  | (5) Authorization  +---------------+
  | |                          |  |     Code           |               |
  | |        Client App        |---------------------->|     Token     |
  | |                          |<----------------------|    Endpoint   |
  | +--------------------------+  | (6) Access Token,  |               |
  |   |             ^             |     Refresh Token  +---------------+
  |   |             |             |
  |   |             |             |
  |   | (1)         | (4)         |
  |   | Authorizat- | Authoriza-  |
  |   | ion Request | tion Code   |
  |   |             |             |
  |   |             |             |
  |   v             |             |
  | +---------------------------+ | (2) Authorization  +---------------+
  | |                           | |     Request        |               |
  | |          Browser          |--------------------->| Authorization |
  | |                           |<---------------------|    Endpoint   |
  | +---------------------------+ | (3) Authorization  |               |
  |                               |     Code           +---------------+
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
]]></artwork></figure>

<t><xref target="fig-native-app-authorization-flow"/> illustrates the interaction between a native app and the
browser to authorize the user.</t>

<t><list style="numbers">
  <t>Client app opens a browser tab with the authorization request.</t>
  <t>Authorization endpoint receives the authorization request,
authenticates the user, and obtains authorization.
Authenticating the user may involve chaining to other
authentication systems.</t>
  <t>Authorization server issues an authorization code to the
redirect URI.</t>
  <t>Client receives the authorization code from the redirect URI.</t>
  <t>Client app presents the authorization code at the token
endpoint.</t>
  <t>Token endpoint validates the authorization code and issues the
tokens requested.</t>
</list></t>

</section>
<section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" title="Using Inter-App URI Communication for OAuth in Native Apps">

<t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>

<t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>

<t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app"/>).</t>

</section>
<section anchor="authorization-request-native-app" title="Initiating the Authorization Request from a Native App">

<t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant"/>
using a redirect URI capable of being received by the native app.</t>

<t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>

<t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>

<t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>

<t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>

</section>
<section anchor="authorization-response-native-app" title="Receiving the Authorization Response in a Native App">

<t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>

<t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>

<section anchor="private-use-uri-scheme" title="Private-Use URI Scheme Redirection">

<t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <spanx style="verb">com.example.app</spanx>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>

<t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>

<t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595"/> for
private-use URI schemes.</t>

<t>For example, an app that controls the domain name <spanx style="verb">app.example.com</spanx>
can use <spanx style="verb">com.example.app</spanx> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<spanx style="verb">client1234.usercontent.example.net</spanx>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <spanx style="verb">myapp</spanx>, however, would not meet this requirement, as
it is not based on a domain name.</t>

<t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>

<t>Following the requirements of Section 3.2 of <xref target="RFC3986"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<spanx style="verb">/</spanx>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>

<figure><artwork><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork></figure>

<t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>

</section>
<section anchor="claimed-https-scheme-uri-redirection" title="Claimed &quot;https&quot; Scheme URI Redirection">

<t>Some operating systems allow apps to claim <spanx style="verb">https</spanx> scheme <xref target="RFC7230"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>

<t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>

<figure><artwork><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork></figure>

<t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
Section ??? that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>

<t>App-claimed <spanx style="verb">https</spanx> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>

</section>
<section anchor="loopback-interface-redirection" title="Loopback Interface Redirection">

<t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>

<t>Loopback redirect URIs use the <spanx style="verb">http</spanx> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>

<t>That is, <spanx style="verb">http://127.0.0.1:{port}/{path}</spanx> for IPv4, and
<spanx style="verb">http://[::1]:{port}/{path}</spanx> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>

<figure><artwork><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork></figure>

<t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>

<figure><artwork><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork></figure>

<t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>

<t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

<section anchor="client-authentication-of-native-apps" title="Client Authentication of Native Apps">

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <spanx style="verb">client_id</spanx> request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation"/>).</t>

</section>
</section>
<section anchor="native-app-registration" title="Registration of Native App Clients">

<t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>

<t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>

<t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<spanx style="verb">.</spanx>)
SHOULD be rejected.</t>

<t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <spanx style="verb">com.example.app</spanx>,
the owner of <spanx style="verb">example.com</spanx> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>

<t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

<section anchor="native-app-client-impersonation" title="Impersonation of Native Apps">

<t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id &#8211;
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>

<t>Measures such as claimed <spanx style="verb">https</spanx> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>

</section>
</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

<section anchor="loopback-redirect-considerations-in-native-apps" title="Loopback Redirect Considerations in Native Apps">

<t>Loopback interface redirect URIs use the <spanx style="verb">http</spanx> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>

<t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>

<t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>

<t>While redirect URIs using localhost (i.e.,
<spanx style="verb">http://localhost:{port}/{path}</spanx>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection"/>, the use of <spanx style="verb">localhost</spanx> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <spanx style="verb">localhost</spanx> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>

</section>
</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="fake-external-user-agents-in-native-apps" title="Fake External User-Agents in Native Apps">

<t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>

<t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>

<t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>

<t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>

</section>
<section anchor="malicious-external-user-agents-in-native-apps" title="Malicious External User-Agents in Native Apps">

<t>If a malicious app is able to configure itself as the default handler
for <spanx style="verb">https</spanx> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>

<t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <spanx style="verb">http</spanx> and <spanx style="verb">https</spanx> scheme URIs.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="authorization-server-mix-up-mitigation-in-native-apps" title="Authorization Server Mix-Up Mitigation in Native Apps">

<t>(TODO: merge this with the regular mix-up section when it is brought in)</t>

<t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>

<t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>

<t>The requirement of <xref target="native-app-registration"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>

</section>
<section anchor="embedded-user-agents-in-native-apps" title="Embedded User Agents in Native Apps">

<t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>

<t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>

<t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>

<t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>

<t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>

</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC6749;
&RFC6750;
&RFC8446;
&RFC5280;
&RFC7595;
&RFC8252;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&RFC7230;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
&I-D.ietf-oauth-browser-based-apps;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, <xref target="authorization-code-error-response"/>,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>TBD</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAFu6YV4AA+x9+Xvb1pXo7/evwKd8TcSUpLV4izOeGXlLlMZLLbl5bb+O
C5GQhJoEOAAoWXE8f/s7691wQclJpp15r5qpI5HAXc499+zLZDIxXdktigfZ
8XmRvTxYd+fZ3nQ3w1/qpvwx78q6yp41+bK4rJt3Zl7PKvj9QTZv8tNussqb
YvaunNQ5PD+52JvsTnZ2zDzv4Im9nb2dyc7+ZOe2MeWqeZB1zbrt9nZ2vtrZ
M/Be/oDnM+8uH2SHVVc0VdFNnuC4ZpZ3D7K2mxszq+dldfYgW7eTvJ2VpVmV
D0yWdfXsQXZVtPBrWzddU5y29u+rpfvT5LQRfGWSlRV8ejDNXvGq4bMs490c
5A1s0/+8WObl4kGW4xf/LtuczuolfbluygfZedet2ge3btEj4RMy1ZNp9m3e
zDtvoifl7J33ocwyh0+n5/jpv5/hJ+Ewx9Ps+3o+L5q2K4LBjmv8qOp9K6N2
/PW/L9zXUwCxMVXdLOFgLwoEy+tnj/d2d7/SX+/u3nW/3tNf7+/el1/37+7p
s/tf3ddnb9/d02dvf3VbH7izt3fX/rp/W369u7t3R3+9Z5+9e+/Ojvx6//Zt
99p9/fTena/0tft7d/bw1zdHB0ePDw8f0KYFjbce1/Ninj0GaOYzwKnsqOiy
ySS7Nzkpu+xgWTTlLK+yoy6v5gDwDB/PTusGMPCUwQKIQNg4O8+rs2KcHbw4
Osz+z/709hbN4xDKHcSWHfcFDZAv7AQtDNbC2tZdwe/z5dgF2MGfP+w/nr5+
+nhy3i0Xt3d2J7tfffXV7t4egUq/e79cTODW3N/dRWiaUtdpj+8ewFmheN+e
5J37DrZ7d+84KO4qFO/t3LMQ373tfr2ffNaOsLdPR3I4eTIti+5U7n6TN6lP
i7ZeN7NiUlaA4zliZOKptpjBjequJl29Kmf2iZMmny+KK3nob5fdpKhmeLqT
tkMg9gfq6ndFBQddEc3of3/S1Jdt0UxO8hZGyVcrmuuyOMFvqxCPfihOiAoW
VYcrh1MFMlFlB68OCV3y2axoW5gme7U+WZSz7HfFVfa4Keb4fL5os++Li2KR
7aaQxpGHR/niNK9+DD8HCvX4x6J9V7bh598BOannZ0X/4+/qKv70efJTGPp3
62Xe9D79vszr8MPX+GE1B1pSVeE3T+GbdTU/KZozD6Of53BjgOjvfiUkcuFI
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
b8PGxeQyyFVLZJSATRbtobwycslyllubXgXSo77sKbZsZ2VkFoCucQuFEQnQ
VE40IQQSl6TWDukQp/TeRPLRfI6xcOhbq6a8QDkd/SKrvGxG12EyChRpiABC
At0h9oteOiJFnlfEZrO0V8slRizPsm1exAQnJ+lwZJMj0ASZnkY55BJd9OyW
v7dz5+NHujKynbcw4tu/XXboZuDq7eQLIKOdN7832cCeNB1gPBD3PK+JAmMi
iSvQaw3pmZ3KwILasZIoZoM6O6e81CdkYrWevWpNRfeR5pBPQpX8JMlCzL3p
JWK1NxDQAn/woIXLMg20hhnkVoGQF02m1QVW62YlpUiFcF5pre0gb1ZGsZMg
qiy53DEQOOROaZIAwhgp8y7qyk8lfaV1KC1p0xvwUYkgxRQg4hY2a9YC0Jax
RABrqjEFFjwCMX9mYtScnRfLYiBv+x6gaJzJa2tIbyBVSaYrHWZc9Vaz5UlK
t95PLi8vJ0jAJutmIQ9v8VvEIxdnMFt3vkTrtzlYYRGS8n32aGxdDToBsx8N
+JHEZE0R+9qj7q7kZ2p5XFPMTYvTeCPalzfxZUINNXDc6CASVNKyX2Sdl4VL
E8pNdOZhLdZsm64NifcZ9UU5aYr8HdOOedmCkHuluN5SugSacTE8LKCmD3i9
2ezHPz3Ov3l9lO8/23n+Y73/erlazp48yn9fHb4/2n/99M3yu/WfFn96d/Jm
sQ8EeYEdU0jVUrfsIBlQAAX51ik+UmoiGd2byUk9v/LOy5pfjHUdkuXFiShc
Ri9Tj/kGbE2YJebrxjZviCVilIJJ+XE+DBAFrTfEk+Q/upqIb1kE3rwqfib8
DGFWL8tO3Q+Z5ystA/mG3yb1EWgOiJhXIsBSTIqf3f7J0MYSHQ7OOAWSQJ95
4oURDgwyu5eNrgi9prRKzLqxKf6cXRgTrR4/5btiE+rtXRSDDb2ZfKeVAraZ
t/QZEWvgDydFJsUIus7qzOH+Y00kVrA1QPnN68NeYWQ/ellV414aGPq9NFJ9
klcTaVlA3378OOIDIPpL6/G28Sm33fi3/dVL2M8tnl87ntAX34Im/UApu+zD
NuqTjh4TdGs9yK6l5DwVxYu/Ran7oWzzLc37efDXw+6bHy/2v3v57tnO//nm
zu/f7x0vfvfD4QGN8Lm9zQ/bu4/O56/f/We3/3lwoR7ee/a309XOnx41u7/r
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
D0HzVGVeqixeLwvTFbPzirAfjrMVhxJ25KMiDoDhk/p0ckL2IT9Y2V4CtWTL
+K0uQvwz9Ed0qLhpqtWHMapdKfUxpFRPyRZo1yKQTWj8PFrqOYioqC7Kpq74
AS2g+UVn3aZ01uG0fRJnEWADjfOR5B9I5PxLehjodEmOF9xWhtvaJeLZekzU
T3Ruhc1UtTCV6uO4r2RxTj9Yy3iexBunho2zMN7sJtm4fwhCkNDxDkvmNKjp
zyp1NtjBpVezLESi/viPA8LYf+Utx2Dpm9pibKwOCoK+3uryVMr+U1RjVIpL
JiPksZQ2unZaP6lVIkClNvW2hnH/0Yqw8PQNu9HgUOzE6o9xPODYtS6SMIuZ
ibX2Rg284zwNZaRYsFsOjavFDI0cKxqzjycdO6r9R1SiRq7sF0DyA/zQbo7C
c7L0rK8ke0pO2cr04mAL7S6R/iz2AV+JjguzebXjbP1YF+0jClID2swEU6Rd
jH7dnFFlmD5it83p21m9Rk/CEug/Ki3Smc4V+RtM4rWLVQIDw7L6ItnvcfdR
L66d2zn57apcC0/0dHbayNP4JriwfFyXXmRouSJBL6RuQfAmLxZDMH92tbhv
ngKtt6lx/xYQrId449MV2gjfHr6/+lGEkiz73L+DD8+7btX+Zv/gN3vP4P95
iN/sPZXtw29AjfGLE/d+SF4e3j2dv/t9/mp5Z3exu//kaP1udvDt/vP5+3tv
4cBn3/5xvntR7lc758//9MehMYREPUSKccNSeMPO/lBv9kKK/NjznNJipE+V
x4i4rj0TP9sD2jnsveR96Uk+qAxfa65zdYVa0wsonBezkhshI/ds3w0Y1gjB
w/5r1E0ZFseilUP9kcupsoOjP9elp2/Q7D3MN32brbVpWWtVbHQRNzserflV
r2rSUCDVH4w9tJQxss8ZNoRQaG/vZNwnO/sXJVV5LqO0HDyflPST3VT6ibO3
sp8l8pi+yEPCS1pcSbmkWccsvFY0PbvVcNl0HoMjOd6vykZeb+EJir+jqhCc
/etqwILeUZ5pSndTtu+4yRtQS+S9PIKaHBKzLcrTQtO9d3fQjEHdXkpxG4Ss
3GNFQVnpTebRKLKbiMRgZDCxUvsGD4CvXV87sboKSI+r7qr2vQsQWYCv+EbG
Ebf15OgArxiFAFfDmdRbkHeJVQ+fI1YH4+ZLtfM3JETcKpXkFgtUjHha4UQT
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
DE/rTEfCYEp10Sbeqk1R1ZGWW45K3XKKFfKEjFRqPK7DJuBRA8wZVYZK1FqH
p5/V4mgPlBbm61sowmxhGGjd+cWuAshRAygZAReGU2Lll/N63Xh2BFxMgAvo
tbCZjRI7BLdOKP6GayQCsd/s0k0vxUtwtigJlwrO+dlJQZFojogIbMVJ9TSQ
zbXCsrSPiAqcVcWlRBZ44PIVem6I3rdJhP50NpVwPQaam8pTVxMfdTZUZaBQ
COuRUTuEq5udqGf+tcRSdRLjPI6xfLh2f95qAFnQq36Dhh4lgMd+rOvowFAV
EtQU0DE3x8zlnhzHxbZu3927R9ftGLs5hOsAXMNmzz/SSih09Lv8Ij/ixnkv
T/6GiTAvtDfI9ndHL1+MDJM8dI05Okfl/J0sLBcIC5AhW3FvLDDibuoaMWUV
/JdL40iyn+9gUyDBpnBq283AvAD0buigNz3Otas0nY+bEdSnPgii1gRSIKOC
UUkO36yT+zlj3JAqUNC2XCfD8yKfkwe2APmZzmTv7i42GhPqbtWLLdXptrjz
6JUbQ5ovsKcWb9g4bJnj3CRKRE0QT5pjj8/FQm2EW6wwehX6hxZpUoskHXMr
VFX+R6q6n6TpblR0N/nbfo67bUAtjs15qSRaPgq+OjaQwTZ4xGtOeaxESVz5
dkYPuTC9KLp0VYKc7qyfdnttgq3pJ9h+Um6tSeXWZuncWtPPY9wgUCb7M24u
M8m4L0Hot1EIe5TP1RKOpNCFtm+vqwVyCBceYTnLyCtkGltHfXLkV79X69H/
hjX+KjlT/4h0KS+nJ06Zyra99DdnKBmN/febYlXkXZBU5c1l2+T4hDqYnrqk
45NenYciahkRRXN2YZaSHx21OV9LgZlK1Ur3pRNtUJrSSrqQnbGq++voOaZs
l1ZYnwfsON3Je4Xd4KNNdOL5wR/DQ6CsTncDdrPtN15yWqA0cfsZaswSwJEl
XBogWlALLGYpIobLuFTVOQWDDtNvpJ5hYLiX+jJZWFB9K9wMY7TPja8p4BG+
TkQhpgkbIWLdpPwTpML/8MMPE8+3XgzIC/77ti+2LroHy0QVsx6W0o3rX3hb
ByilTwiibkwmHMfBG97dHPX66NpSLgoasX2wXDAfS2kU+MWXJGdKIIO2jPpj
CyOnSj24bPC6CaMXgytT+V04Py0jMwi23JifycVpQgikwI5kMZklGXhSE8tI
DaRLcXTZLwaUWoQ1W4QI9EsSIi3xHGd1kDRYvJ8VxdxvPqVl9k+0hE7Q4egf
lKz2z1y1f+aq/W/MVfvHGUr+LHaSv9zYTCL2iKQlxNzYEgLa7KApxNzEFJJl
G20hZrMtJLveFmIuej7JWNFHncNTOf7OGr8qHz1twTqaX1uDYuzPAYVxg7Vx
yNtDDp+DBBNqbXkoBOkSkMvr65hzgTl0FLYt6rfYWV6apNTM57OoXy9h2qxo
yM5qS6mK4DlQymAmPV27oVF9l67BtpX6dWi/xfLmpJ5Q/BQt02tUN8ZYh3N1
j6eK+TnRgLrz8uNk6N9QBHGZ66xo8KrflXIhVtg/vkWEsrUVa/LMLPFJHA6z
Qw3WG2jKgpugH/abd9tu3GOJ6Y0e0LguW3rO8XlpyM7MXU87p8Q1zF8YlgCO
pTue1yV41ZQXoFkBbwBOli8YavI6fAx0fYnagqoTIJ4DS1xLBGC5XGGebdzc
maoW5meFKwUz7Oiax90wwsT7IEfOBfjx8/9/B/qFZr9BZ0rkR4hVCj/3yYrw
f5dowbQM3GPhaGzjJrE0GBITwKSzknqpbBZ5bQSshjSo/tBRmwViYDB97KIZ
HF4DeCOx+pFUoUjccNccclEDUV/kHPzvh8WLrGURo9942CeV8fFZ8uDfE9vC
q/QT85yHfXO+q/EeuT6tL8x3jd30/XzX68ND08zkF2QF/zM89BcEIgU05fPg
r4dpR8NNElB/jfzTX5B+ujn79MtflHsqJqw47zC8uNfnnfp5jF/aIt/9oaZp
6U/6o4j44rrCtJrbQ0IAioazzoRrawrCXCB5S5h1Rh3QgLPVDWM2p7nqkdBp
fnlUoCI98ZuJhMTwwZfD8a9Z2A6KqOVJWc3bBNwSQqjJqNs4VhEK5cQPHw4n
T6YYQjehuDlhPzg0fP3xI2ITuRbv39u5Q4QCdvI6BIV4mzcs34brSOxBdM5E
IS6oUUAYjaUSTOApy1zPuR6hF42Ca1Kvu7SmTQtgIQ7UiBXnnHX5dbGlUsy5
t3xiDstVA/yzZcwG2fmEeyhRLSixnVKPZp4e9LV89k5UtqQQOfbQccnNJF0J
epMFG02GftArXnHN2MYqByMSChLl2fkmE77UgbJ6klELPPYxvcIda0sgFHlt
vcFgZXQinQbmSJFqFpDQ/R3dWVwMZs519UqyZAhqmc0Yn9UtidWwx5mKqH1p
3MW95BnHgyWNomT5s02Q+IuKer3isKIcqcgQS+MnBUouKDehPnRSZNomi2wP
CZGESuTqDqnsLBcMo7NNwh97FZyeAqVhpLLnkFxeD0dlgRrc7GKyx1QUPNZi
OYEaM4twUKr9RVbzacRgrV7FVdyVmheEoF1xRhKArf7oL8hW6O3OJZpMeumJ
CGIy0TtQcKIim+Q91oaDqcDMmwUK/jdEXxq/I+TPCLpky58LHPn0oMtNjjcx
KRDpjS8kDK6BYm3hi7RcZr4EZbfhG10votss+jVwwVnhlzkwvWmucQz6dABm
ifisdAHQ4N7+JiK1TGh0/zHbRSClInha1UlhoqC0vEujsJVlwu4+UnPIFaMc
uDFu57FKFFQ3RhaOh4MRFU6qJrOENemQfIEdpC/rhlpAYtu8L0GbOkOOl6yN
IWKFeR3O7UrcUsBkoAmd5y2nS4Pax/Ta9XIrl1ixdFpMU9DFF7mGIGVABLGI
TJFDQ5YOS9GStlZZGEOJbdOYDyCWwl2iqzdsR+F+isvy7JxqGebZ2aI+UQus
oabGQlBdJwR/86sa5LkrLXSk0ZBBxXLT3/k2qdYgk2uIF5wdJn/DDxs1qW6y
TWt/bdPaNSwGjZw27X1i0943GTrJ1nnsVs4DFW0yfR5QV8QK6//1qaRlXoEZ
zRolgk/5+vgyuOmFZvvyftlZxBDnrEhD9F0r5oxZTbfFI7re+mUhKqv7Tmp9
xDj2GagHwdK2vVA7tKSEQfDtiKrfc2q/bwFJpfaTjMPRw3x7L+rFBfF1ZIjU
8JN5xKymKi7yUtD6KwSriIhJhV9Iv/ZXq7ym5JqEpQErvU13tUlaFnoLmBdo
xrMNMTWSPECUG0Spw1m5NgQYEsagaT3/D8dkhqEWyfgK8v7s3d299xeNm4ht
KhK3EKWMhUcVWOcU43F3iEjOXm5jDN1oIE1dTu0lFs8EGg/aOKCNQ+cTyQ3C
tIMTwbnFmxj2irYdBJw64zpVAWo7cWXhzPGJE+dUsNyRAmMPW8G8naOkKFPC
giYKMxS/QSTBfjmjIKTQBM1x4owM7sptXVXOmeys0UbiEXomKIW8Dx89AxUd
wyPFvHre/txgimEJg/U6m/vLkxjmsLiU311NAXRrN2WFus78ROvPls/efjV9
dOd0cnu6+91/PpejP6kvCpuISoWVJFIG+Z+tyYC7ClLuAFBPMXa7jzoEGq7U
rOGCcu89a6k9RLNdUpDmKGsL17bLKk1n7OhyrQmCKF3nvbWOAuaw+aKt5Yxa
d6eTEWPWqOvHL4UZHF6b+DzBvzInZAmk6SZGealwTTP/a5IdnCjl2SA6jlda
FajRcgck4Aak4GL1QGykhDzZkQ5lH9kWJxVujUiZ0yZRKifSMJf5lbFjsnuO
VefeyLaL/RuJj+TB5bLYq6TmQe97wqEiGi7sI/6uQJNVR+5xsw3P16fYaNe9
MnLQFHlMdVrUGaX3sx5Z4v2MG/viwRjbvS24pa1fScNFNr3WJi3sgWulU4BF
psvacnpsmiJ1V8OllpXj/IQcHZcPih2BU9vPOCBecVQnzkaJX2jdXpZdeKqU
QuFQ8LPh4iDfMu96RpF33F/IL4cbEkxpprORDRpmgx57s759TQS4hxXSfEmg
lRupVHWAZcbbjUqg9KMKQjoZUsnNxvpPIZcSxaIZ3RF0AuFAO+nIjsSrqTWJ
McJHRmHvQCQqAPyPBPX2MPnEgyfGbtQdy6+cn4FUg0YZB1wuCsoheRBn4j0k
Ztqd4lz+2bGxrLW9qheFsTRK5MueRwApMaiA7+C2ImppABJBhHuPMoLgr5OD
N8ffUhG9BUASe9T7G2CQCUHESCIQNIz0q6f28wvaAd5tmIoy6yhAha7a6QKT
kLSjduZ11J76R4nHJCfu+yGChtiCYid3b/PlgJ+H2e6X23G/az/kz/0km2Dj
v7+lf29tZaPsy62HHHfir+GhEz12vzx6ZefXwmpWUWZ5KiBjtnSR+Lx94q3O
smvvt2Cy4766HHKPR/I14S/g5us42oFom2vE4/eiIGL1DN1aT8VU+QgDtGxs
0w2pVOAJ9Lz1QUQCiB9J/cMXuTg+zO8IE4gbvpTh6bZRW0a7wYyzJgzaNuWu
O++l7WfB3md4g+wnxwPbkQMJ8iy2fIehUh/AIj41Wzz72miJqU7sB8n55MqG
SfjeN+2Mld2o2edMlpooGoERYc+/z25Pd3azP/+w/3j6+unjyXm3XNze2Z3s
fvXVV7t7e7f/Mt0EHVoxklrKGpmgRGOfl5nFhOxM4rIz974GMlIsKn7RFAtc
HeyTg1w/fJAoV6CLLloxvTDXbBx5OBIZpxQHyHZOOaEKjrZY5niHW45+wo2U
WAy2GSti5ZWXabwFTA/phsxmEVGybbV9nL9JNMWK2KRFCXk1VsNyQTdomjXO
NJuSwKM40BMVXRdYkx6/RPXOK1k7OJfcuq3Ptxxst9tRtk0QNxQctn9/9N8X
IxA4/NNyxK9fRsQH5sOkxHGTyyXHH5ZCQgQwGHi+ImuwNwxfiffIHJBzCpaV
K04UUgf+vEYebKg+ZVgB8yZMw2MExjc2p/kAyeG42zhvxKXohcKreECGlTEn
RNjgpEBMCWqF1k0gNLGbLrIg0J1j/1jrjDUDq1D7c8I0GWf/mpvmynxNTTy9
60vWK+evQWs2XWifs7BFUZvN9WcK5HgrmzsR7hrRHv0KwNxsyec2i5qsRoYR
jnTwmhdPRDiWggoiX1inK8vESln4WvPg5JfmTmQkiEyIkkgos+frkc+dwYH1
fTK1b2gHSzzZCYAw4MtOewT0h8RTOaH233MLctT3t5oiXyy33KPypHPaeFll
gU3XCE5xMhx9BYyBW/N5PrnkmUhfxv7ctnHlagVwjptEC7nhcELvtbL1VYVN
AYIm+XIOOJDPign2IQdtDoZZlOwxR54ysWnnYmqXYHSBit/Ni8yMw7UVULuw
7opBU70u0Y95D9ztRjb7NasVnFeUzeDrRiL5m+IMNtBcaV7E8mv0XhNiem1q
b1AmLA6qD9dmNKOpPKsIL9mvWLFTCmEncYbBaxxxoeSfTFd+JWPyXEb1SUC4
b9fq1HcAtk8Z35Tbp3VkIXJFzhIoYKKo1P4z16BmiF0XWv2FWpKpqRIWdgbX
klyWYgKea1IYSk0iABqJ9uO7B69PMAIchbjjy9oV5CMgXGj6C54u4QMOiyvL
3/lFYF+uiurwiQEBoEKV88/89/Q51mUDmvgXG1+DX8Qlh4/RTlUv6rMrGGBJ
0StFtv3y4PjxKHtZUazic8wH5hSU0LCDPrt6Vi9gyucHr/5iXuLXVKsNASAo
ggyimHHbY5FxaHsPt+CfCns+NvVpCZsG0bNcbPkPrJvqgVpZ0J9bFYuH3z56
+bn/eUOX9OE341ffTHb3t27Cmr3wu37dJAlmCLl1mp/a3r1e4ikndRiHWsnU
KN/NhD1LQRC68r0wutJL0lRmC6+AQZzuXfbKWLKqHYRJoJzGpYvg/qodfEBI
8Dh8N9BfN7k7m+jV9pLKDDWLFS8fuzZ7FyMbuBjWnm6ilQXpYG5FmkHsF000
N8t4k5a2QX5f0GV4a5zK5eNwouRqnGHVDDG9OMetR5u2XdED4H82m+Bgentk
NiSxXZO/Zmz+mrTO9RzgAfXBvWHGIYcqCw9tWqPOWv/h6WDKqAchH3TGg1R6
n/DFwfQevX8wvT/ixPGb73g4UXJDbuENYP8V8BsBf2jlvGHWofnkAwsSDgMV
lK39Vgjf5CKi2wHzROStnxi3m/l59/RtLLxbQzUJeg+1LMwWVpadf/KiEs5r
qUeQ2TqoNkDCo9m/6tLHaQMqU4KHNlGPTQ8bH/ax/OHWcSwryk62UpVgEuR7
uBIMhnk5gEYZNtQZ+xrWRe25PcYkYpTSvh/OkTN3XtAAu50wKCCKD/mE8BAx
JtmCObBYoMRle46joK1/SZH2IuaS1K+A4M8+fuQwSVqBECrmIi3cJ0QRGOFM
5BHh7cnqGHCXXqBEmi6dAYfICSurplxSR1ya1hs2xlmbR4nCN3YfD0qi2LR0
F+4YlfhwJ+GFJdoDsTRZxH3YqmGQUO9itSnKuQj4HHAHtOIpVas8t7tGPktk
3lKiWuNNXfkbSfKkEG98QMK+7FosQzj0EMr2orI9irUSMOYQz41XjKYLRB38
WmF7YrkKLJy1Yl35LF8RR4f1su+HNOLoyKLDHht0MaEw4g7ZnvupJvhL7MGY
FehSeyDKIToMdFBgxCUI4uJZe96Mbjj27LyuhWRiDIFUhxannWo5aaEsEkLC
hvRSbIbX6+cDUES46Pb4ymJRaI4b7I8dhRJlYmK0IbMZE7DHhBNJ6sXCp7hS
8ptQJ1siynlCQHxqajghNFT0ujNvdy6m6vbODv6zi//sUzmS2zt3qEiUsc4L
l1TgmWp93I6Kk2HWZb+mEyU8Hp97esUnV3NK13Gqm1jKRy2KKzYpQvH73thk
PEt57jmQxsb+uBBwTm/kEOjhMkzpKEcpeaZJjq52j3WH9Qp6+Sc29QAaZKD2
OKUNB8K+3r3qNYmCJ5p0cWoLC7KK1cY7EXLir15A4rawqf5Q5IPT2k42N7Nv
6uBYcaQMaQU1GIBB5Awjb4M8Wx/tBNNaLtbQuDTtllHBgtDPTI3KzA6fcfp4
eRC4Ydk2yKIn5RwUrF51pliXVOVGVhCqbE5ksBXliQrKOn2Ahbm1LnNcAbLI
Z+84hLVX1svRPSm65BiuQWV7XeWXucbm9hP33NIwtdDWy1IJ1fj3OV0fbKM4
5isGtsUDQdMiM3/mbeS6Ehe/SJKPYjttvf7H6KWcFxyY12+AkPphZmFHOD7H
vGrpH+KIMJlmRRXF4KcLivAQibDjd7L8LMc0PkIIND+1xmXykXGS9DFbRFKt
+Wr21WEwI1pj3F8cglp5hOwNpntFaYt8bPd3diZ397M/4wP8+180boBhAqxz
fZpTbZRby3pu2SM12LAZbhg8ptWUMRqiPltrrC15EebK5Pkz8RmjUuzKVfSb
hnhmJmrtzVmpXHbSRZ4IicfEc2eZ7sWFczB/WfmMNnS72dwSX/vElojBLnt7
QWsOxczRZ0ScEQGw4kU9/zrLjUsdtY7UYBjX9wGXSb4xaxr2b7R6pa+0uidn
W2QkEmLke1lchmeHSROLGoPxAQ9dlJ91wUX6KCZbKcCNA7hYtOTeOn9CeEm9
abXAWogi3ChEgGYrb2uCs5YmNeJ7iilIDzQwFECQ7BBd/7xxxSCrkCGZWusB
5C/E+2aP7YQDB8ouXj7a6cLFCy2kicn47XstMcEhX6C97cq47Beh+nnX24tI
X6tcAwqFWmTPAbBneruAzDcgm1KjQv9aS7XvJT/LbE+9WbajLV8vEwSwnlxZ
dWRenpUdUAKbdjc1BwsQs9CEiXbscRzRhJNatMmc/UfSC5zJPKg/BidsS3Xa
GBdckB/hzriyuIKLR2qaHdzrul6dgoyD0XGS8+4OBhZwBkyx/druzS0Ocd2G
z1ZSncBP0FAbX27CLAybTNauNdqtpQQPpi1u8yy6DwHAJq6QjuxZFvIqWAaq
uZx1u8G3O5WAWWtUsB51X4dyBVeaABNUsaKNfZ2d4/ox06HjUqJYw3gJo85z
8WvbcmXa0hOgnFMBkMKSXC/50/OmonQRWPp8M4mtIaz9CobHsSVenOsMzlpL
9bhDIi8Ra8PMnjgsB8PTAcH5EgZUidNSWnRLgiCDTEFtpMnSR14YNGHunKN9
VL+yPjIYulxxZMc2Y8WcKh6hRGQrn+RadzcmCVQ+xHLwiJxhuRChGSrPvi4w
pcHdeKc7O/KWW33W1VQkpdvv13BtMXV13mKvezaYAQLjouBJjB/CoNLOMDW1
DxP5WyyoXntWExgxnS+v5HNONpJcI3OJmTArpJ9eFCk9zJVtbRD/xXqBbOME
hKGOSlAJIsDYSOpCRzNjgWCUlam6iDGOg+oaCRw0yGExtsfKwdhCSSsdlSsg
cO26lHBhm9dj4lG5iHMfz1V4s0qO7ZWON3JdOdG+T7Y8s6YSrhQK92rM32ws
E+Ho2KsAdsO9SYNMBBjaDnKkLzXrPQ6v8spWNRWWGVti9MaykiRxyhkJchib
z5ZHoguWNhl3wra6bwhQ8beKuMdlx8ijK0FbXdCtWMYvpC57fYIwidltcAPH
shCgAZiZ4ZM0RafS+SpVBrWB6wAzE2DJAQpPp+uGOCpwioJyyAex2lt+L2OT
DgQrhzCEyUlThnk4Gt5sujqhyLdjz+AyOy9m7xQUj71RXxcXtegK3yNh2378
+vsRR9Lc2bu/Q9FNj7WYXFAgSjMTOmf0nS1AHKHLsqb6BleBaCyiiX18KZnD
VNkPoOkgw4wHkKgGKEUZMH54JxU5pOG03h1dTBG+Wi8FnFY21qTSyPS4eS3m
qCiyLbLFHKG4nT3PKzh/uhbP1bK+xSC7u3f3jrgFlB6aWaCmCteW9aLZQGJZ
vNB8/+AY551quahzzIpeYPmYhi2X1C5uxnEXHpb2hHPKqaaeu6BZ1Y0+h2pj
vgiE8iDxMcjwpSwIVGsAnhdeZpVZVw4DfXIFN7HqsOiVLsNe3CxctvHWp4Ty
BMRH/92NizsEUopyWwBITzABIQnP0wmsoCvAg+rqJwUsJpqhaJ7cFlXxkHWq
KPB15hGUqNMTKU60UMzTInFZVpaWiGb5ikqe2hoPHNDvmSsiuZBcYMt8XjzI
npVNyxUJXbOnYDkKCglK+1ostnCxqcjB7BwUMsZCrsOIWsy6kygqq0XTuBw9
WVYqUxqHDxhaG8zrJ+9obZFzCkamrhrb2hoKiwFg8sBILz+XchQGaWs50v1l
6RILOZK9+IgaWo17J+oJDuplfM9VGtoBNmt6LNtPB9/A5mN9N+Isyi6oCCYW
KEJhvwJUhIvVzpt6hXUbOQO4L2msQGkjkiVmBeZ1fqqjbmuKIVm2AtLY6jZ1
NaFB8jliLIqAUlZIymm5wzLPmKGhXX/MDCgqVODVuurJIz0ehwVarhJiel8H
J3oNUDCamrU/3aUQQSLGLxGmQEOE9O7d370fpoX5Z0JC4iey145C3WwOESk2
PSaLRYiHgFFlXFTeJSQhOvmF5ntEGgvGgbbHIlIoD3iLNbJYlNLJDWtPsWQP
YNshFXGrQZQky4w/uasJkZIexOhxtF4uST84BVEhpDNsjjnKTwtUO+eBLaLV
9KxI3o/LE+WdCV4jGQOxkC8yyZyVVd8oRh8FG5aRr7h8lWddk6jqZcISlT47
5GjGSq0lbdVqMgHnZtRgYhUtmQ4VnluU7BZnnRy9YFa3i3V3wk8m4WrX+oMe
dhIz235zoxidzc2kxcHzfuYQbw4oVJNpRophPXlxlJ2Xf8tZiGTDTohppodp
9tj4EGxa7uIyv6IIdNrp9nnXrdqRS+fjQpvBQ0YewuuBKhjsnOwLmsTijiy5
YfKqBWeGCkW82+I9J/YHd7jC+uD1ujV2yyRgkgh0hvZVtXG1wxt+UldfdCyr
RpgjwesqDYIwmLosKOxyOe/wbdzW9aIvC+XZNkVxKKprW0OR4TlZfEkNhbge
Co6IpSWiBXHWPMIrvRtdC60b7brIKWZAclgwEUVo1oDkM2lRH7d++Lo5K6hU
OoHskOpk+TJBRFzYCBwVDidToElKEpmVJIKBxl5y2YKxx2iBKy3AVttkIOZR
60ohn1PU5klTX7ZMurlcZ1FdlCAeslmexV1f4ZBa03S7qGWDVhcwg/ulY02W
sXaijxHRJ4TgjHKObwy86ElBdpcLJOYypBps2UK9HycR5kfBGtbm6pndFldS
ybojr6XE8/ifl0V0YbCIVh/DKEb2zevv27gygqcXGnyV9UL7eLbtl7RDBgKI
h8Sei464OJXRFFQypGrzcTS7C/1x49P1XXKMu+QRYSaV0Y9O6nkpAZ6SQhjJ
o1YrsSH1U/OIMQqwE/FLzmnstaFr69PuksX8K+49M8ey0B2mahIplD0LBVAM
BV6Hlh1/WCxM5g9tgKHkrtGCxE71WXQCwmPjaKEr7iWM2bKJpcsYkOVkOOWY
F2Ksi3ld8UZA06yjUhWMvq9ZTH0lNiX2xrT9uq5hiRm8D+LH5FRAMlNesbfS
xEnRrnQrD2xTsugvUuZOFuUZl06ZF0ueFsgamkQXxZytRP4oWB6NpFqAJ3Iy
IoJi2qbpV1wYViViYapakles17ZZUyw/jno17pKl9wWTqcyGWjCk1hsD0AxB
MCjFryZ7Ooi4ebHK7Len96e78H974k0QI/jzNVodSAJwoXGYtOFVuMWsmdAM
fkh2Pu8zFfowVL+rSSFnE/ghWeeQwaEBgOpnSnSmMzSgJ9W6eSi1BC8H2S7x
URsm8Ojxq8xtZ3eXVixWPmNFDxDBSwoEISHHj1h4ZVsWvHZ0Uxq2uDCZqIRd
Ly/EkR+lvsVcky9hP+VyvXTxXuotcewtyH2tG5scI00W5Exby+zomnLLJtVs
/MU6FUYCeiyScZV5V4HIjkypFIlxy8ZsGtnL3XFyHtcAJOVL3jQeTxIXynmx
WLFjMME5A9h6/R/CfPMQ91NHQAKC3O/YJZRtpzjmaCwGciCOVxLBGjqcjEuN
q9HgIvaXigvPknts2CihaNSy4aKX5hYv1jXkwKqAVPo5tlwEhE40eKkRK89L
3zXbk8XOLGpB6+Ub5V3mpxb56Tc2VJYtffYgYjcHX3DgfBtyjAHEIovQpyZC
JY1wy2z5Ib+Oba9AaJj/56JaNVUG1ryly9hCYugnbZgw0hwn6hX71pcnkvRZ
Ny2WhPET18bMZvxqwz0jL2nFAlCrhhzYomMUNfCzcBrEd4SP3K86gT8ch+9U
6wh1zSegbpZGXaEz7gg15cBbWR+Lsx4Wm0/F4iyFxeZTsTjTkpPsk/C+8M3Y
G/B6uaZIS8Fr40x+vzZeuwywam62gpffcjxC20PyBErnDTDxCGe5c5AWPYXx
b9UKGJLwzFOuh82CmYmKqT6hunrAN/rlHjcFANoQQleiz8boeHndGpJ9WWOJ
uPZBFuQ1EAVJlJm0ofbbzibP7LKeAedpKJTbRDnjLolkRIHPXtzPmiq2BbmD
CGssxIopCOgmoHmdUyinZ6L8BE00J1yv5nVjC46Y2CbHgaZieeM4R4yDEAmZ
9KVqzr3c1KAl/Z3CkSRWxfpYY/y1vp8rCqeR6ixYPEHaBdO+1E7ugM8FS7Vp
d6rXHpXHJAAcPHrxzGV8xMUYXfA7RUbbEk69RIixez2Ca1SSutgwCL+63e+W
R/VStXSnw0ljo145P4XAxqQErzzWuePvW2mO6bZNtbjwtwkm89GX9i/8sl9/
S8p1cfku410tTA55qk2pbBWq6wNsOa1EiaKXleXzS92LDbcOgyFsMyyRX8WX
oZ/6NQVYs4nyjiTbyq068woVJC8nUy63Qu9mApDjBoOpZEt61yEfXxY7oObl
SBKmIjeGekx0K9okmggAj0GhRjaKTeV8V3nPj621c40ELbwVbcaLmyDGm8rP
qAopiccxbBuDkJyYBDlxxaUjkpL1SYqJSEpScAjpCvNfSQ5R9pb3lw7QLd9n
fib4onxXsEiORwyrZW5vNIUjSizTczuBL0RC+YJqBFZXCOO3X1B98eBehcr5
NxTufC336t2xof6/PZ6GLeWo35Wg/TLLTYq99G6l398tqPgm/RPtafvdh214
lFfkNrrAXlktQ+fVJ/ZqtRq+yb6pAUORh6/vJuBbEmfTXrVqNHAGm+06XDX6
puRQ849p8M3kLyB0ZiOhu9lmzM2oX7hZH4SZG5AY1DAVDMZgLszEKPwCKI79
gAjUl9vZ0avos1H4oiNk9iNLzIJPiJ6laJhmKLudqFm79YsocZEePx1+G9P3
MbKzM1oAtOH6RsMVfWzxHi9zVsvbKDeI+sViaSWkkbwWqYQjj8qVdhgw1mp0
XI8/t+JT3lAcul+YkPM+XfrsmkSHXvG4EDRbmv8xZ0FkUZxytfANtaKwJ3Z9
WbDXvnLcgJavmcgeIhMVCSYK1kAAmQW7dtuBYziRcv1GghZCCoKV4iWZmZLk
qYAr9XwKYapVr0Giq7X2FE4QLsUnI06T9lNOr6MOZFby4xY1acjnmtvcs6NX
SxwopYOmX5aw9piuzwRGLp7ertZESdO6+QE65HWhjRribIMe4z9KibW9PjiS
YSbEP0jRpxE29dBhfSgwKQpM4oHUJntvujca++UAeJtSkEzQdmo1y7oKH+tz
oGsUubgMwEi7s7jjCGUR8oxWf1tXvF4COgbv+HnzvXNn8779vs9CWUiskrwY
7s9Tb4/urNe+NOewz0hNNk/n0qoQHpQiks9QRFJPV9vzj5FoRaQCU7P8wjdE
yzmGSMLfolwul3PovUajSE4tVxySwq4h1D37hVWk7KqId83tN29lvC1hUzwn
/SCnkaxxZTPuT/h2Q0kXoBUvKD0H67SouZ1kCvp04hnh051j7Pv+k4RJapin
5oGLhQgGxftitu4K2yNnXqAXwqT6r7BlXukMHOq7rl7584wzXiXwwpNyQenu
+hXqqqmFKaVpJWsxCJkx1NqPTRBquR9nK/iMsIgKJUiWgLggKdNyYQsvhT2p
j4fFJSt5bo6aN3FoHoPkC/ZNTPIzSnrBeU5QhYUVU+KaLbZdchRY0dhWfiyk
hqtyFb6UEzbIL9wUZtuLonb+2VGQioWvLkHAnVNKg75qczENigphKgcs5LI4
mWCGIXqxCV5V78w4S0yCStWgSvTUOmaTOpbL3OIMHfwKq1pJkoUYPDziYlkL
luPiIobtFXy35GwdbTRmK1Oz0Re2Pl8gbcOUVkKo1dUEPptgIp6NXvXqlo5N
s64qXhu6iheed3usl0UMaw6MXtM94G6cnKdVUeItZmHhLh56cl63QdMWigDz
cO0L6lPcNfVC20Ci4I7lL2yJXq/N3AXouOor75LnhsYI6bUpXXsuqYM6JSWj
WuFesQmQCQRqzbbVyDegj+eUDQ00GlRFtivU4DXBA/MrlxhcP2/ySwyIjsLY
MQ6npecNh+rqdvGEaYFB2Xe8qbaJfZgZQ5ShUv9hHTa/JSQG3TDvGOLUGAIm
pZDgwrpx/+3f/s1QliLQwYICbeGKXrWllZvtLvADxv0kNC2cpj7lTlMEsYxo
6VcNy6BADgzvktAN2jpcUoqfyucXwNO9Rgk4+Rdtr3oLZiZMzaMAsjqRNRTF
L0mXkDBMxGh9X3FKovlgQt0p1YU7p/gcbUkZ9h5OZVsKBaGjoFhxko44Q5fq
UwDAtrlMvPNgn1wNB16z93dENYOo0oFuzj15SnXbbe6odztcdoHsF73fGoov
pcm4cZ8iLt8DK7Nzx1ANQuVvTZoFSPSFXHI8W85ADlonFc2SkjeB1NgyAZgi
uqQgmxZJUBjdZ/1LxO1QpgijwxHXMaWE163er6TNv23XmPK3WBgVL0jU8HtZ
IznVLyni2B78fM7lJrSNFKW0nmrDZQ/iM88TpWb1lgPAJAld9ihoQW20vBLZ
xI2VC1OERWT+eIYx0AgRJ3y10rIH55OAKmP+y/6AVPfb/9r881t45idXUu0N
3tUnJF65D38Kn0n+8DO/HVYPf4vfb98ZRZvqvcIL2jDdT7oY1ErDzxMrsp9K
pDYAzT6QXui/8ivH2v8jHiixon9Jj0SvWKPVjWF0dxQ44MZDW4s//48YTBka
trg9pOwmDex4oOivT3pme3fkPbN9e5R4xmHAxP9r4j9Tet2MfsoIVeS8P209
1z9zce0zG04Mjgx2uffLsdp+q5tOrieBjHLtvSeGsDpc4rVYPYTWn4zVDKP9
HoyGsHrTT/Lmp4B9Pd3zyOSHB9lnp+XZxOmvk9D+c0rNicpuUTzcctQ32hBm
9wLveqq6ENLSyQFKUFsfjfnw4doZMBhQ2/Bp/leqRkSCzxuVs0RWoeAyK0oB
N9nVDmT0FtaDRuuufSs/GbKSuSJZe9Now55mOitKLWqSfJ1KePpClJNyRSs+
YUN18PYU3/KraLsaA1wCR9udUiKISMoc4htOR2IV6WVoGd6PN9Jv3d03FIrQ
l2WWn6PMAqPdtpDdAAYawmuOEoxwJzgbW5NpYJTcqzmBy9FTgIHuToXQ25PR
9Jnh0ah2Ou1btmezEKWkPosiLGcckiyGqI8q4+MgW88pUyDveSKKMd9hRE8u
Mp61F7rnxaqDMhhpzWWH8VEJyTiUOEnPTD1ki+FKOJwtig8zYCzymFfiC5qg
HEeq5Q2WUfrWKFBXrK4TLC/o2xEtyM2JTRAxvLZeWSznapZ+r2EPUBZ66Jmt
QNCmIl6Y2eGekeYv5PGVe+OHgke6j9WUNB3UxqFKK3Du8RNfK50EzxUnoqKG
ZxRUrWvxhWR+mlxurkgW7dQq2RTWKkmwqfgbVBoWoO7Zeg8zrDuodjEyxMgu
Qb3S7AtWH6t53szbCRcjIzBK5ysvNMh31ed+/Jra9AIluHWdTjw7mPGsMBhL
Lsa0DYY0qxShyZxSktntS5X7tSHaJixU5Nu2pXQ4HivgMtqVybEhNOwjFGPL
F11wggupQx46D9w2tCP0DTu4HL+jSLQa6/v0lsP05pCvn249pNcqIxFBzT1i
g92Qr9tweHpqYiGWEtFHrHJV9NiBjYhECF3vWuImyzB40qdEz3z8aJLg7xXZ
FQZjjd4B+UBL6Kl6X2xsmjccm4J82SG5LWqutiwR4+k4c44kJ7sZX5wBAeG1
Z9hlfBlC3JAesm3BGhS9nOpw/Uqogz3wRG2S0KpFjEsb1iu2CZxK1FEKz81N
uEqM4mXl6r8ZJRLM6DQa+hPwHzPmq6vE+igHWuLdVxLyT+hA66H4SaKGFCRL
gZReRBocKoin6Igy5uC0495RnAG1mbrAuGMFJhXOszt0QUYHrw6JZSKtsosZ
dAxMjdeXXV1b0TPiUQzzOIXCjQkcpmztuvxuZyBkrzU3hMzs1GoOM2ulbjMl
2W5pq1YSBIStsoD4dXauLn5X1U+Ja1ssxLY6a0rqaUzcUrpxAbU4qyk7HS5M
YlfqrXUd+2KzDyx7tubG26H1lCHh5wSlWE1kISdUSoJXy2678IaFVFxP0EE2
1VpSRI5iqr2ctge2gUGwZenDqRoIAuLwFg5cWTwFLy3k0IZ3Pi6zmzSfUmnL
opACCXpaFCSy7rTONkHf9pn1bfmRcBJ7S6RrNzn1TtYd3kpJCy2pvQQV2KNS
Z645cFwJHq2XjlyoLdBB6rSggohSegzDPcoKaYS16YLW1m6NJdoir1jAym3h
CiwNCXqdsAIdVdJ65eoYFd/UJtzCLyB+IDMCDOKgEpBVWQTAVAns520lTqnl
Z6+HPS1tDpAw4BN6+OUHSCA0LysPGFGsoy31q/W3vItAyQ3GSbZSg3osRBN5
PIcV+6BDwLQuJXFA4QUx5DWR2CEpRFgCZUlvFEL6dJ74dcP2ci2+G9B8ZVeB
18zXUU4pYsVf3gDHsmqnR0Bh0zxuaeum0c13vmg8W3bpXXDFDfQfOgn4uAZh
A4mG4q23tPFQJgZKyjXSVJNT8YtWVNnzpijSuw964OGzNmjFUEMEyYcJQRO4
8ZnoUjgi7qbgqvdikedpMiybRxQW7jAnUZ5QjkzHNRYoJy2fzeo1+slj9mfS
6QGSI4mpe4D0E2ychhs7Yhfya4+efPhsJQ/BKidwLaRVIuDIc/Q1cqACnZHG
M6AKtOaw6B4BGfCXkHmK2B2KUBr5o9qujVjzlkKeb+2YsI31u9Cvhe5YePs/
1yXxDFsED0GEEWmg6wO6vXn9vTZb2BoZYgF/heXYVqow71+phmMRMjoK9pFA
P5RQXbFbQ0XBcid15/Fag6QGEpE4C88FlVJ84yIHIfmcV8yOeF8rl1qNorD1
TEFhI50BaFn8Gseioszd9igykkxRT9PkiCkxxkO42mIxU5IwcIy5SoMGqedN
ghem0kKCWmS43BsZhE5aktg8BWi1GscKsfHesgXAc5CKl8hJKErKRhSUjQsl
ACoE1IuDygxm1jathIySQ9LWmWERwBVOum972t+785XUqBsARS9CVPinrQYB
CxHx01vtX1Gl8NoB/xVDM2mvPewWma3Uninqr0zVxWwlgF0r30gsRonfWLh5
62glo08rg/+V39vd2789RTIuZSDteqqi+6sGaOCCfflL1mn8bWpitRyd9Jak
Y7CE2O+1AnKmor6KAH9dXiEUxk6avrSVwkUsc7VGkXjiyZrSZimk0UURs7O8
c4kdE7GRI6Ge6MW0NvLQtuc49YyfbDvKjKeWjq2otuSv19vRalqaFZLgibOm
Xq8oVNcRW2NjHEgBTB2XwGvCkc7h4VGCoPFfs/HP3pEM0Dd7Oqw3W7bZSS54
flGXcwYvSKkgOCwJ1f1Yz7i5u7tBe/YG7X91/y7m5vJaqD2qqZDNLr04hO5K
ap4mF6pLwzBeSo4xanFc5O15tv3XW38dSR9QuAGnEjCtbyOPA3pHFZoPxOjX
YVIGN+6s/297X7rcRpKk+T+eIo1lsgJqAIiEbtXW9lIU2c1pXSNK0zvWVksm
AZBMCQQ4SEAUR6a1fY19vX2SDf/cPcIjD5Csqw8rtVmXBCQybg8/Pv/8pGrF
21TBNvlXStmGyml9ehfJnEN93135ri+mxiLuu2awhnavtHdJj+WtTIL6o4Oj
oyq+kf4YjsninO5X5s9j50ZF2DOJfdsdiJZLfziUIMXVEGp8GemeiLdUD8Qn
rPhE3wLdKvyLJFXGa7Gz2jWHvvEQjLkIadyup4rCtDPNC0BYxVAXhYn6YJQm
MZ+qYyqVKU7UmhG9LDvCq450E/AFMby3+fUr2//qx8cZFYSGXAFNOgrBVlYz
uFVyN5Luwk9SMKeOmlxgjRHKRq+8RNmZKOLWk2S0k3CxYlVXQtQL46q2DFJW
rBbVyMvkhJSVMAcvH6epUkI+YhIrLzMtSK9xu4vj1esS8IyTa9Cx5BtpKMxE
uMQNwec2HEEsytO7dytX6vUncVsPmTn7RCE50btjMiMqcJCexTGliB1nETsY
TRscKJqc//Z+/+3uc0v78oc//CGrkjDC3wtRPiLR73X2FciXBJwrgHqeTXCy
8mSf2foSKf2BfTF5m4jbg6yRBTkqpkQn5o3Ovm7EymZP1/+M+GzBxBsgd0QQ
Lgk/GjxN/avye7XI9FpEYCZyWzr21NF0i9eI93Mg6x+v3VDiyakposqJDV2B
DPteYgMbjp8lJf4Rtho94XFonyUfRbH4LGhezOcXCFogqHlCOVGpVTaVB/qF
PtA3QrgSRwghpEBWeoFQPUwy8ebpC72NubycLz668OLgftFwhELNL2gflJI7
s7R+U6IYQOYoW4Q1SdjNVDVNmo5NRgeyC9pEWG4/R2F+0i2kb8Q+C9tMU+eD
V1kkmEsa33+TTckR5wcGAn4/ZxOGOi6SMyQlhDjyJQUnkMDa42a91NgaPhps
+v9tPf1Cv/569wsRvX49gj6y/+bTfcAKnD7+16dPt35sefRhKqDCcGNJPHpf
0xSK5eY3uL87ppqGShyevh0j5pL+Ptja3Lx/Aym3rkfo9g165Nb0iKfk4dbm
8N71vXnXdnCFyBKX7uxKVpLrgwbaDCkjYJmZDSVisj2SvdYTfheCco/BCGs5
ChkxArstuMgmF7QbaX+hI8HzFU6HE93H1GuodGkQSTpjrTDFkAbJxzF/9blA
EYs8PlKTQl8M+eKPfCjizrxRVY4vGJ7cstOCvDSTxSyIzoYFF65WSvvDLqVz
RZvDiUvPeL0K40wEzVxrlTHHFP8UZNdMdsklQOEbUjtIfvVYaCBm18wDH6tr
ADVP1bvmC60PGPPP1I/ntMJ5BO0vmAI0Ooz9ZU7ZqDPkGY8sLAJuRM20kFL3
FQ+iXtxDfw5xydvEIBNJ0UCnTRuiWWjMWGDjZDE5own6FBHJ0mFiHGV5p/B7
WwbD0XqSiTkzfGYKwuYwTY/LPoSYh2MW/sdbT75+baZZ0rb7/mYoRiVniUO3
Zgxs6pX/8k14nievn7rtv1bp9hoY9jS/JX1zcWIv3VZeu7y8OveK7MJrZx3W
0vqIMtAadAMChqyH5mbU53BOZHiWWs//4kgMpEP/xsMPl8sj/8Brvyn3n1Oo
lQulxuZNWyGbKm1L4UttPu7xHCqowseZ0jZWKotN+f6UvZSFW1tHlrY33QGb
EjrZ3M1W58ecMy00vTUaRCuSYXAT+IVOR+vqLJnCHmBjKlvjpRwxM95NtFQ4
numfVI7NyDWmg0bmok1qYdprdX5VqECDZ7G5R6y/655pZ9FysvW4uoFoe1wg
qsYoruZ2UFb7feyl4Pk71tpc0T1iRq/JWKldo4lh5IWbTbX831ktD1FYNorF
eWgf7gx0sWbTy/iTQlOWS742FnfJG/ijmNfV5tO5Iw9yJSlcWS5JpFJDZKiY
tWR6ULZ2TybFMqwbOWsc38AMTGlvdl1hJ/jk9M4QI0jEJl0BIQPT2xcBCUs4
Pk7ytXjScZp/QVlFgXXWjwL0BVBGL+ZLMfLAhU0BVr/EEsE3Qxfak4UA6BkV
2QVxshxtkjrS6KBOdFmNHNTp37RyE3PQucT3uxTSkKQ8FeozliXo9WRbajKp
HGIXBVfwSpqaivJNHCYqZoyuRlO4cqXgy6DiGE/PKPxuY+J+EdSACSjI+z/4
VXVGDDTPhFRSyqcfBbgbPLe6yUj0DcAqQM6YHA61k+CNFGZqi/+4hFXkdbPJ
lDS+5KD4+wEnqSDZ7R/MRDHO5e2jpWBhM1niXPvBhLZOOXQgWTXjPc8kn42u
cS3iAihBbdzKM8m0wawyw7BV+z6U4GWWDlW35I2l42o2an/V19Ikxqsrrem6
9wuYoHMPMDxjwVKUXtZWmMTgSdICJxIoCTcCC5Lgh+fsubQu6BJIOrwlcbPw
zLI+NJ8hoVtx3Yxi0jvkgkPURPIu0QfGF/ALjJfAqZeAdxeV+bUKB7Bfjfc2
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
xHoCAA==

-->

</rfc>

