<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7595 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
<!ENTITY I-D.ietf-oauth-browser-based-apps SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="March" day="04"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on whether they can be issued
credentials that they can use to authenticate at the authorization server:</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;browser-based application&quot;:'>
  A browser-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, PKCE code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<t>To begin the authorization request, the client builds the authorization
request URI by adding parameters to the authorization server's
authorization endpoint URI.</t>

<t>Without a client secret, public clients would be susceptible to an authorization code
interception attack, where an attacker is able to intercept the authorization
response through various means and use the authorization code to obtain an access token.
To protect against this attack, as well as to protect against CSRF attacks,
the client first generates a unique secret per authorization request, which it can
later use along with the authorization code to prove that the application using the
authorization code is the same application that requested it. This practice is known
as "Proof-Key for Code Exchange", or PKCE, after the OAuth 2.0 extension (<xref target="RFC7636"/>)
where it was originally developed.</t>

<section anchor="client-creates-a-pkce-code-verifier" title="Client Creates a PKCE Code Verifier">

<t>The client first creates a PKCE code verifier, <spanx style="verb">code_verifier</spanx>, for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for <spanx style="verb">code_verifier</spanx> is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL-safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-pkce-code-challenge" title="Client Creates the PKCE Code Challenge">

<t>The client then creates a PKCE code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using <spanx style="verb">S256</spanx>, it MUST use <spanx style="verb">S256</spanx>, as
<spanx style="verb">S256</spanx> is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use <spanx style="verb">plain</spanx> only if they cannot support <spanx style="verb">S256</spanx> for some
technical reason and know via out-of-band configuration that the
server supports <spanx style="verb">plain</spanx>.</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to <spanx style="verb">code</spanx>.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to <spanx style="verb">plain</spanx> if not present in the request.  Code
    nverifier transformation method is <spanx style="verb">S256</spanx> or <spanx style="verb">plain</spanx>.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  OPTIONAL.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="authorization-code-access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="client-credentials-access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2 of <xref target="I-D.ietf-oauth-security-topics"/>.
The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Section 4.11 of <xref target="I-D.ietf-oauth-security-topics"/>
for further security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (<xref target="bearer-token-error-response"/>), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See <xref target="native-apps-embedded-user-agents"/>
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<section anchor="authorization-flow-for-native-apps-using-the-browser" title="Authorization Flow for Native Apps Using the Browser">

<figure title="Native App Authorization via an External User-Agent" anchor="fig-native-app-authorization-flow"><artwork><![CDATA[
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
  |          User Device          |
  |                               |
  | +--------------------------+  | (5) Authorization  +---------------+
  | |                          |  |     Code           |               |
  | |        Client App        |---------------------->|     Token     |
  | |                          |<----------------------|    Endpoint   |
  | +--------------------------+  | (6) Access Token,  |               |
  |   |             ^             |     Refresh Token  +---------------+
  |   |             |             |
  |   |             |             |
  |   | (1)         | (4)         |
  |   | Authorizat- | Authoriza-  |
  |   | ion Request | tion Code   |
  |   |             |             |
  |   |             |             |
  |   v             |             |
  | +---------------------------+ | (2) Authorization  +---------------+
  | |                           | |     Request        |               |
  | |          Browser          |--------------------->| Authorization |
  | |                           |<---------------------|    Endpoint   |
  | +---------------------------+ | (3) Authorization  |               |
  |                               |     Code           +---------------+
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
]]></artwork></figure>

<t><xref target="fig-native-app-authorization-flow"/> illustrates the interaction between a native app and the
browser to authorize the user.</t>

<t><list style="numbers">
  <t>Client app opens a browser tab with the authorization request.</t>
  <t>Authorization endpoint receives the authorization request,
authenticates the user, and obtains authorization.
Authenticating the user may involve chaining to other
authentication systems.</t>
  <t>Authorization server issues an authorization code to the
redirect URI.</t>
  <t>Client receives the authorization code from the redirect URI.</t>
  <t>Client app presents the authorization code at the token
endpoint.</t>
  <t>Token endpoint validates the authorization code and issues the
tokens requested.</t>
</list></t>

</section>
<section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" title="Using Inter-App URI Communication for OAuth in Native Apps">

<t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>

<t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>

<t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app"/>).</t>

</section>
<section anchor="authorization-request-native-app" title="Initiating the Authorization Request from a Native App">

<t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant"/>
using a redirect URI capable of being received by the native app.</t>

<t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>

<t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>

<t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>

<t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>

</section>
<section anchor="authorization-response-native-app" title="Receiving the Authorization Response in a Native App">

<t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>

<t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>

<section anchor="private-use-uri-scheme" title="Private-Use URI Scheme Redirection">

<t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <spanx style="verb">com.example.app</spanx>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>

<t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>

<t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595"/> for
private-use URI schemes.</t>

<t>For example, an app that controls the domain name <spanx style="verb">app.example.com</spanx>
can use <spanx style="verb">com.example.app</spanx> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<spanx style="verb">client1234.usercontent.example.net</spanx>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <spanx style="verb">myapp</spanx>, however, would not meet this requirement, as
it is not based on a domain name.</t>

<t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>

<t>Following the requirements of Section 3.2 of <xref target="RFC3986"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<spanx style="verb">/</spanx>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>

<figure><artwork><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork></figure>

<t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>

</section>
<section anchor="claimed-https-scheme-uri-redirection" title="Claimed &quot;https&quot; Scheme URI Redirection">

<t>Some operating systems allow apps to claim <spanx style="verb">https</spanx> scheme <xref target="RFC7230"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>

<t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>

<figure><artwork><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork></figure>

<t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
<xref target="native-app-registration"/> that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>

<t>App-claimed <spanx style="verb">https</spanx> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>

</section>
<section anchor="loopback-interface-redirection" title="Loopback Interface Redirection">

<t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>

<t>Loopback redirect URIs use the <spanx style="verb">http</spanx> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>

<t>That is, <spanx style="verb">http://127.0.0.1:{port}/{path}</spanx> for IPv4, and
<spanx style="verb">http://[::1]:{port}/{path}</spanx> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>

<figure><artwork><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork></figure>

<t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>

<figure><artwork><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork></figure>

<t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>

<t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in <xref target="client-types"/>: web application,
browser-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

<section anchor="client-authentication-of-native-apps" title="Client Authentication of Native Apps">

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <spanx style="verb">client_id</spanx> request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation"/>).</t>

</section>
</section>
<section anchor="native-app-registration" title="Registration of Native App Clients">

<t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>

<t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>

<t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<spanx style="verb">.</spanx>)
SHOULD be rejected.</t>

<t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <spanx style="verb">com.example.app</spanx>,
the owner of <spanx style="verb">example.com</spanx> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>

<t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

<section anchor="native-app-client-impersonation" title="Impersonation of Native Apps">

<t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id &#8211;
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>

<t>Measures such as claimed <spanx style="verb">https</spanx> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>

</section>
</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in <xref target="tls-version"/> with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in <xref target="tls-version"/> with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

<section anchor="loopback-redirect-considerations-in-native-apps" title="Loopback Redirect Considerations in Native Apps">

<t>Loopback interface redirect URIs use the <spanx style="verb">http</spanx> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>

<t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>

<t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>

<t>While redirect URIs using localhost (i.e.,
<spanx style="verb">http://localhost:{port}/{path}</spanx>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection"/>, the use of <spanx style="verb">localhost</spanx> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <spanx style="verb">localhost</spanx> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>

</section>
</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="fake-external-user-agents-in-native-apps" title="Fake External User-Agents in Native Apps">

<t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>

<t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>

<t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>

<t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>

</section>
<section anchor="malicious-external-user-agents-in-native-apps" title="Malicious External User-Agents in Native Apps">

<t>If a malicious app is able to configure itself as the default handler
for <spanx style="verb">https</spanx> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>

<t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <spanx style="verb">http</spanx> and <spanx style="verb">https</spanx> scheme URIs.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="authorization-server-mix-up-mitigation-in-native-apps" title="Authorization Server Mix-Up Mitigation in Native Apps">

<t>(TODO: merge this with the regular mix-up section when it is brought in)</t>

<t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>

<t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>

<t>The requirement of <xref target="native-app-registration"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>

</section>
<section anchor="native-apps-embedded-user-agents" title="Embedded User Agents in Native Apps">

<t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>

<t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>

<t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>

<t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>

<t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>

</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (<xref target="bearer-token-error-response"/>).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC6749;
&RFC6750;
&RFC8446;
&RFC5280;
&RFC7595;
&RFC8252;
&I-D.ietf-oauth-security-topics;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&RFC7230;
&RFC7636;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
&I-D.ietf-oauth-browser-based-apps;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in <xref target="response-type"/> and <xref target="new-response-types"/>:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in <xref target="authorization-request"/>, <xref target="authorization-response"/>, and <xref target="authorization-code-error-response"/>:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in <xref target="authorization-request"/>, and <xref target="access-token-request"/>:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, <xref target="access-token-error-response"/>,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
<xref target="access-token-error-response"/>, and <xref target="bearer-token-error-response"/>:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, <xref target="access-token-error-response"/>,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections <xref target="access-token-request"/>, <xref target="access-token-response"/>, <xref target="client-credentials-access-token-request"/>,
<xref target="extension-grants"/>, and <xref target="refreshing-an-access-token"/>:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in <xref target="access-token-request"/>:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in <xref target="access-token-response"/> and <xref target="access-token-successful-response"/>:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in <xref target="access-token-successful-response"/>, and <xref target="defining-access-token-types"/>:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in <xref target="access-token-successful-response"/>:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in <xref target="access-token-successful-response"/> and <xref target="refreshing-an-access-token"/>:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in <xref target="defining-new-endpoint-parameters"/>:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>TBD</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAD/QYV4AA+x9aXcbx5Xo9/oVfeiTmEwAmIsWWx7NG0qWbCXWElGKX5KT
kZtAk+wI6MagAVGMrfnt765Vt6qrQcr2ZN68F55EJoHuWm7duvsyHo/dul7P
q3vFq4uqeH68WV8Uh5ODAn9pV/Xfy3XdNsXjVbmoLtvVWzdrpw38fq+Yrcqz
9XhZrqrp23rclvD8+N3h+GC8v+9m5RqeONw/3B/vH433bzlXL1f3ivVq060P
9/e/2D908F55j+dzby/vFU+adbVqqvX4KxzXTcv1vaJbz5ybtrO6Ob9XbLpx
2U3r2i3re64o1u30XnFVdfBr167Wq+qs839fLcKfrqSN4Cvjom7g0+NJ8YJX
DZ8VBe/muFzBNu3n1aKs5/eKEr/4N9nmZNou6MvNqr5XXKzXy+7eZ5/RI/ET
MtVXk+KbcjVbm4m+qqdvzYcyyww+nVzgp/92jp/Ew7yaFN+2s1m16tZVNNir
Fj9qet/KqGv++t/m4esJgNi5pl0t4GDfVQiWl48fHh4cfKG/3jm4E369q79+
fvC5/Hp051CfPfric3321p1DffbWF7f0gduHh3f8r0e35Nc7B4e39de7/tk7
d2/vy6+f37oVXvtcP717+wt97fPD24f465PxV5O6Wp8J+nXVFA5mfTVet8t6
2uETr0+OTx4+eXKPwCKIvvOwnVWz4iHAu5wC1hUn1boYj4u749N6XRwvqlU9
LZviZF02MziSAh8vztoV4OgZAw5QhfB1elE259WoOH528qT430eTWzs0T0C5
cFQ7ftxnNEA59xN0MFgHa9usK36fr88BQBf+/O7o4eTlo4fji/Vifmv/YHzw
xRdfHBweEjD1u/eL+Rju1ecHBwhvV+s6/QHfhZNQOH/uz/r25wH6h3duBzgf
KJzv7t/1Z3JwK/z6efZZP8LhkT+0O0d3Mie1Kle5T6uu3aym1bhu4EKUiL76
1OmqnM2rK3nwb5frcdVM8RjH3Rqh1R9s3b6tGjjRhshH//vTVXvZVavxadnB
KOVySXNdVqf4bRMjzHfVKRHEqlnjuuD4gGI0xfGLJ4QX5XRadR1MU7zYnM7r
afH76qp4uKpm+Hw574pvq3fVvDjIYUegFA/K+VnZ/D3+HIjVw79X3du6iz//
HVCWdnZe9T/+Xduknz7NfgpD/36zKFe9T7+tyzb+8CV+2MyArDRN/M0j+GbT
zE6r1blB3aclXA2g/wdfCLWcB2p5eXk5uTyatKvzz169/Ayf+QxRWAEPDAQ/
2z/av/UZn8d0dbVct/0DeUifn6/K5cUVHoW9O78rm025usIl3B0GOsDlu3Ld
tc0NVnmXVgnz8rQwH67z7j7cOFzn82XVPPkqXiR/BuSjaarpGpf3/Onxi+SZ
Zl43VfF0M1/Xi2pWlwnjfbFqgdO1c8K3J80MGChsy5MmxD59AUjaMSEi0H3P
Tu3IL+V6dVvwEPFqc3bWQ86T6cW8nF6se8jyrJyVsIXeKCf1YtE2Ccq9mBQv
265qPLrYb56WM/gq/hg43/G0ij97CIMAu6zm67YZH5/O6vjrB3CT2qtqZbDh
eLmq54gLh/mDbsv1dLLpPvME+bOv2stm3pazsf8I3nz25OTV5/v74ztH8Rni
58XJsprCXRcKwIfHD48PRsWTZ4+fv3x6/OrJ82fFyaOHr18+efUni69fVdNq
AVDBRR4Mn853sLfNatU7na/amWKxvZnPqst1+jFc5RfVat5Uqx6kX7Tzt/GH
J5Pi681yXfZHLk9PN10MTQDmtFtNJ03drSfn7bvPlgEUXbgjk6eAoiVQrm2X
pdCHioPJ/hZ0fQaIVr6tF5tV2cPAB8wybkIKAWeAxT8Fgl2v2q6Hbk9BwKwX
7arqweF35ZWlOhu4yn00A8C0sLt6hsLXZx0gSicfjKe83fFCtjs+eLM/QU4P
I3zz6tWL8fHrV9/EgPrmalmt1tX7dfFqVTbdGSCNEoliF9/57GBysHcv4VcW
2Z5P163g2uEwaAFRHtfVHLlnD7RASaYXbxEc7WXZLd8Aq6tXyXl+d3zyAmSs
qlwXJxcVUKITkH/gQMfF6+YdkAxcywxGgjcBAl0B96x43K4u8bLt9O/pFEfq
cKCOxpnQzESgzVefmbHf+LHfwNhvdOw3tKY3tCYF9cOTF+PDVEYECtrgqlmm
xNtRT6+ElR9mVhizDBjy0Dk3BrmyPAWiDZKmc7GKVUaU/kxVrKJqytM5QKos
1hf1aoY61vrKgYTiCQsQ+PZ0XdZNMa8XNcKx9JQfJEzEggLA9K6egnBa1YAI
qwIIwWl1ATJG0Z7B0CprwQkCLShOr4oWeHaFK12jJAPDwIyrFsAJxw7MBDZQ
0xjrywpUDhgzHQNPED+Op29p8HI+by9xXHjAmW0V+W3JduCzGlADhi947ZMC
1FSQhfAS1Wf63qpaAnOqGIfa066dV2v4a22gvR/zVecVWrj43XRVnwIMYV6Q
WAvUSSZ8cot6BiTEOeCmq3a2IQgUP3xSmz8/uPvmBx+leQGMs1rk/Om8Bkwa
I0QQStG9LBYgxM5H9A4/51bVf2zgHDo6AoIDCsZrUB7woD3Md+Fw1lX02R4C
DAEsUyHczWwA/UvABZpLnth0cibJWX7auWmQXwHqsK12BUoknhFiRQ30cuAY
u4CMLrPwbpTDnQ6UMTgyPG0zMa3XETxxroLmEhzA50o85g5u5ArADMuCa7Ng
LKB7wcsBheg39MrAYle4mP/YAKmY4e46UDuqaIl41QUq0eJQ+DrbrDfw+KYD
TF9fgdYJiA4TwEq7DtALkQpfn86rcjVGqj2h1ZwQ+DOTb5ZLYDbh9RhbRoit
S7jwOCYfo1Cny6p8C2ytQxg2cN2RdAE+6zjdZDsQzvHStbAkWDwoRqUlKEOg
6OMfHC3s8x2iVHy8fJDtZg1nQwyzPK3nuGwYXlGkmG1WfCW8RkXkzJO4bnPa
ARtpSTj1U/LGXibTgZ7dtGt46h1ogTFxRIUQ0HcDGGOQCsfUNdJbRAPDe3P7
dI07RSxbgDhezODYWrhrdM5oENArZYZHcMlR8IIftguA36LuKiLHzdXQbcKd
ggiPx1pM7UuKAlUzGwP6rcwUtDZcMgyNjwA7LM1xneJkJYnyZlFMKcvZbMVo
BC/CPHXXATHCV5ToKXOImNe8RIkbp+0q2AITG0IcoMW6DKZvwOjaBS1AP/fI
RYfHxIZWY8liEciiPxWPBAAZXN18Xs0c7S7Lmy7azm/fPMCkkA8UWAvtGMBX
zOqzM75IjHbR3Yf1I6ltu2pgF8gJYDq4SfD9MJmNB211c/6wXEI2BRjMJg2L
KMjcgVasssD7BNPBsC2zcs8ui24Kgifc0vqsQq2QN92SfCDjlGt4+3QDhBUO
4tiM3aHJthDoEFkI+MqrIjTpoYZwGuU8zksVCdwKPf1XYZsbQcR4k8BX9G/4
KkOGtp80HA3IgkX1vlws5wQCf4eK3Xg1e0hIinOQs9dI0wGsCFAnsk2xy8vc
MyiJkAwrWl6AYN4xSwGUokHwo7FDfodn44dKFrk38uRIH70gfg1aPUgueG7O
X3fP1XWFOizdJcLCEQxTWW4CKhBLx0Dx6f1ST4qs9AF6vOBkvW43d8i46It6
eqFUI7ckQMt5dU5vjQNe2luwaw97b4JSM3D7WOKDD4AT1udNxTYQgAvvgmTP
3R9+EEv2hw97jFFuwzeVqVxLghgQ3aVqTnwH6FbTEDABwh7eoCsDqzipmynL
BUavVSQeEDOD30TWhLIlrMkBMbda2AgEn+KihAuEovVmyboRHEAYF3f5jEy6
xfFy2cl4aAiH8UZCvb2y8gAoZfFwsyLy9YJkd0SyH37YbjGnoZAkxPM+EFPp
AzSV+umvtaci8COVZxA6oIGDfATAeEUX/DXqwh5it/cRYggdwI42BhGd+U22
NWG9IZjcQXmevk2wCrgI6A6kPTLy1sbgj1qJZ6ldhY6wzYKoHgJsVS0AqUAm
BJl0s6LXSzxSOC5a8Fm7aYhsnuKotL4KseD6pQPquZfARTvUSMZjZdSz6qxu
cEKgGsRlUc7dicnXzj13D5j8MRK4NaLFtFyiaombIKKWCDkZWjohPfe7i7zG
V6OSugSBC0VTQGH4e1UB0xRpFo+MzU9KYCd2jUw0ZJGvglKC1Fv5ZVbINNvA
1S/XaqPgk+iWLRn9RVdJ3g+CBHNlS21Qmtxhoh5gZ4WxRUmC4bZRW9VVBVVo
YRlphFAX9Z2Ikgr/A317UehKQMIUgxXKtDVwrSsmXiiKTjfzckUfVoiNgsjq
2qoBklO4rdXkfDKiIS4vKiF1VbSz6j0gHuI9/F4GmQjJ7FtARdLjiUiyIalC
Wt4hdd7JcYL+oSJL6IFb1Qth9+UZeuO6DT1ytgFNypunjA47IN2xSERTRABl
q4sxYRTWhJGVVQSNLJaCWAjvXbVi4iCmwAec8iY5wdzAblFeIQGgEZCL63xd
Tk4hPUjl6Uqu8MQdF4i284Gl4wzEfRNA8z0hpuIW6BIAfEknROx33pb4eN5e
MsnRH+f+0/+wSfC3+tVvi+0/vx3HP7/l93/U738cj3cP9sYJf3jJd6oY/ys+
6HU8fD59/5r5+fvnhCzZ9/9lvHu4N04X8DVJfrDedPyPnf/a/f/S4wE8j4b3
A/CMv/DzP+SbeDN4shUju36A5609WpoqEa9EQaGf/4nwvD28H8JPi6A/DT+3
w/MOzk+2fmY9frpheP6M+2mu+g/3ik/O6vOxCsvjMyANbCi/v3Msxu0iIhw7
H5jsqunbWL3p5Xo+35Cpmc2uP/zQG//DB2+ZJerohih4EIBYg2+m881M5Lez
Vs3OoNGgg98dxApmMCoktngyUeSVU+My0edlGNIWgb4vyhnoOapdJSY0HooG
2QXC313A33vEXpckO4Fkc0VGKnn9XV32ORW9HrgHmbVQZkA/7wqYhDtM9zmt
6ndV11fPSQ4MelvBfrSgj6FxHZZeNQO899MEdixlVO+XZEaaiZDVNswtL1vR
ptdXy6oTIZZQABkp7yoSyVu1UaOW/n4NrMwvmsYYPJLwCMyyBPmzE+N4sQAB
qMWFeR2Xt8yQIrMSn2Y8oHo3eOViqI2HyHFkOIujIZxLjDfD5vrB0WlVyflk
4ACLuLVFLontApFEBsOrQ42PZ2AGMZ+d8dMjtQAkW4R13B4ARl7Y79/ECPOb
WbL006seNOLp78j0qazlN9l7KdlZmF+FNtqAiJlLr/4IlqH6bOBpPFzZi+gG
KE+xC0jMfhR4l4hZAQITLQ0Elz28uTA2GjnIxpY95B6dMNc+JsiOCXI0zBjD
rZQ0E83OfE2bYJ01I3m4cf8HHsxCgnXLm9Ahl6VDxW6wpqKWlVEk9yIakD0h
izzidorpk6rhQNmcpWxoiI2Wg+Ah04rMYy1e+HBXXFbzuRySUDp2krhFhW6F
ulsQNtGMRBFn3sNIcyLQP/nkk0Syw+BF4cW99ZCVizbLYPCUNqu89PEn4sOG
YvS4ZjCFq3ezp6cFfjlwBSIfqQYNZG4Ke3myN2AXeSkgAxoDV+PynNYbcSFr
OPS3A/a3WekCWRhJvedoS4p1WW+T7YMdDupBdYZeRh5yQKndMqjrDzraos6m
1D1dflCf+9aIB9W0FLKSijBtM79KBh/YtZoTstfW3gR0MTToz2WHsDFtMwQm
g6gsTmkkGmfVJRpEgD2X5LwRm+hp1cBBr7uR6zZwrKJ0G0+k3YqZc2QvJ4Uv
YNzNAjicMQBHjDwV/czptZs12e3xzGsgFherdnN+kZerLJYim2/XDKb5lQP5
qvVjtGyY6UYi/ObxScmDaHgmPJVhmqFLu2rzQcKz6MgHJrc8ckuTm8SdVkxP
yyEpE21PWasLGVNA/FNPr4At59nZNDMxXonLL3Yujly7ypv9kANU7+p20yHS
rlYYuD0bwFeJnwDsf9gHSrm6bp8uBAL4HQvckKnxhe+FtgDDss85Mnb3j3EP
RWKyswY66i24GbdhQfZ4suqli90GkKwIQWzdaL8uYeSxxQngZOFGMMt4OI0r
H82tLrpJJASIPzMSAHqbsY5JZeYi68n7Na5hQ8fSLkuAXnw98WH2c/qJithv
ygqmhil0an7u4OLRuQdZIuVc+F6FvoTpoFfSC7M9LOTryfBA8x75dSvixQTc
s5odgzPWXWCzQEAzSG2dGS1bCrtqfoYxiCTv9C9m6v5wsByYjmzvGAqOLLWe
VBO0E/P6BNToSKkZOdGD1i4kBoH26NBvR14S9M0dBykmiYwyyKOsGHGKrbDu
GivsqBBbq4+uqTWCSURyI/Ahfyu9ivAqJeeBtTTeoOGDHkYSfUYed40Y6PFn
kH9WGxQe2BIf+XF9EMaed8SSgdfx7ETxunXbDvqzRTC1S5MQQpe3umMoq4+7
qQlZytz5MzVT1BKxGB5bRCyRXF89nsNrAy7WVECOEMi8D0IB2CiwbCI5dIuS
kDhSnVCejSkKWlfIoxYiMxg/AT8Yvuh5k8gcHgMlzs0aOLwqBQz+aUgdgMsN
54shtTVqBJ5aRqKKXFEvSghSkfsvCZMwARRqMnC6mOtJoGItKQCYpCTYfone
RHZ6h2DFjO8BfYXVGQx3kaHQ4/DlNTQ6jsIU1xgaOOltZ96OyK5yL8HTQYMF
vJhiVQl4chlfu8A7xY9tvwVpYwpkBcOiSC8vKKJjWRMCsAygIxsCE4WzsANu
xog3x5caYIPtJR40EZbd5NbA0RD6lWi0W4Ea5DSOhnYFYicGf4B2xKKhBAkp
FPqUnyVgJIJP9Jqi+zQcEOlnS138mmO5asCAysQe5Dk1jHk2fAhqndHpnFg6
2IUrJtQZn4AnIYm1Sig/2iKK3Vt7wWogY0oCFhsM0FF43N9cnrcPECLCF9dH
s2wA0Rae72Ke73kr89XuBozVDbJJGPB1M6/fJu63Ubx1ujpk0KY7rgEspE8x
C8gcWqdXRxUk5DMmCM468Yzx/sYugO3ugNRTNxZfSN5dZr0ikVfixg6R6LUt
w4jfzv9kvU388xGr+XURUdEbr+YX2tS298zR/PaaYcQHmAOKPZoff8ZqPmIY
9gjm/Vc/hj94mNQ7eTPH5I/BhRZWY51qGX/e/y2wuQOweSK8jNfyCJjRqhj/
Qqv5CLzZNkz62pZhAMR3o6sZ3ynzzT+IUHz+kwlFloj+uniuvDlLLW7kU+0z
S3WsypjCeh+RbDOLVq1O1mGPao4V/2QP6S/vrcqbT4z38r/VWeUjyhKprO/R
W5RvSZoaDgvL5VHofq71Wd36r/NZoTfuhL1JR+JNAlEOpDFM29vAiuZ966aI
2V7EtN7Tt017mYnY5ldmJGB2b+tlx4k2KDne3fuSBiA742WNeTS1h2jD1sdh
uIpHL8TmptYjUQ9GOeUUZbrNSnKUybXB5FfWjOQXxr87dB/6Gkv+Sgxg4rAD
N8a24ODO2l4jXZQNJFaFVSPH1bLy+NxuCX1bYpZjTc6kz3/BSxhtaej69QG6
Cw8y9qoaNL8ayYPRkKhfeDweIRLDP7f3eCbgrQSYdrPuOG8tMR25xHRUJor2
Dz/4Cg9jj4u+WoXE6L769qT4I8jfnCK4nnfjd/zXB6uEO4extCTAU/ouZXt9
i4akELy9C0PtseqiSmN/jWuO31y1y1WN/gqZjGz28nu3hxvEdV0CdwBor64c
Rb5z6keEJ2iQ6QAPyxmGS8zbq4UeJl7pxps+3LsN5o6z16Rmmy0rpqQHqy3u
Ep4FaI22fkkg03UfTI7Y+4bFX5BLMVYt2o6jV2A18iim1kThrl3x9PhPHByu
+XPWN6pgHpO9LuzEu1UlWHuBScowZz1k6IFDptwAzSvGqfsu7Wy+AtMzceu+
qwrJRqDhVmY4dOGwrdMquhJDkL2Iw57QTyM/J7lFmZzOyG+g+up3F/Wc74Rk
xHQ+HCfeA0Yq0XObkPREGzjaPyywCsumE08kBidzrLBEQZTvynpOZmONZkpW
NsXUtnmN1/mCnBseJOwKARmlmkmGFluXZ5UEmZ+yKTwOgJ5Va6yi5Ch1tyL7
njj6egemAfUYm2aciCuyNw9kaJOkg/bPsfiOnceYYEwE2H4Dy+Y46jAkJqLV
5xeg6quXf165ZOgFQVClS4RN2yAKjozbaJQ7I4AOWh/Y9bikfL2qZ25t2mZc
B7DA9DH0Okpe83dolDE0Up6nd7Z6G3tYqaPgdDa8YJYs/oIWYPa0qxlWWep5
zXnnGD6WxXKK+BeSM8JsgmULOyBjGFK0KzSifSfu1TUlLlqgaXoapWtSfF7D
NiFKWNR9oV8VUAvk5g1la2FOLEaBBS/QtcHiaiiuTbZ0gPS60mQmc9ylyWQy
zu6qJHsm3AFJjUcKxcnGTvAESDrDk+QH4FZLsuXDqZ/VGg3pQ+bQDo8sDKM2
KH/ugoxZeDBYY2fcwf4rs1a+LHiBnrW8BEDEh23zDpl+lu554lcVb6urgrKO
i52nr09e7Yz4v8Wz5/T7y0d/eP3k5aOv8PeTb46//db/wk84+OP562/le/wt
vPnw+dOnj559xS8D2d9hFr/z/AXWVjn+dmeAeCH/1+wb2CNAbM0u3ITRSzE0
YukZOu4TEo8353hf4LUH5fTtphs/KzcrrF+xKHaPHzx7vOcagRveOBoXK6DB
uNblhdIMEe4NAP/1yydjCh+rUJjFTFS1w1JEzM7rpkY7YzCVPAlWyl14ee9e
8TWIFkBlipMruMrvdxzNi1XaaD8PgS6hRdynGK2qOemLGNHTGRAZl5P4BUE8
xZSnJFAGK73Rjl7RleNhZNUgX2C6N5or23URPPtwuuV6DTDDA4xFWf3EXzH8
YIrElOBfIWbQBRV/BWyBnvAODPwLgIfOHXmbH+Xn8JLhEN79iB9SsiP+ojKr
IhS5Oq92AGyvmznVolAFBTeEugznhFchhxATNYDhVSsq+dapKAyyLaXOTkHe
IkDWeE/xaolN66Whf1E1CV9UQsKF6gZeLaPcKJw4SZPGwTTlfpuD4BXFwpbk
p+AoFHay5gZzWwN7jF/2OuGasCLER4DK1c7fhST2KE+HTeGYkPn0W2eZBLn9
Jh5+0VeYK1Vw7j8xJUrkRlliKAXIGcVlaIMTSYHrRf3mw5yiBaHXcoUcGUkB
yV8MdNiDA0EM+G/NVh5CxSSVSbV15q680CBhOOGjVlwCQjCyWh9yxijdOV0c
xu0E+ctHbJccHCD+PZJAfb63flp2HS4EuTZXeRlWK6sVnhnFBvDaPOvW+Zzm
HaNU3lQovBHMFQd5URqSZZB0hhV5ECQF8RAu98FId5XqwBmKL9VZKITyw4cR
va0VTqgciSJZBOMuM5J5ZKwiCo7IajcNLMQxSMhRjIU/6S2gxNHk2G36HlKc
EXJyoC7VSFa2ZPFt3p6DGLIozzlIkNZD6WAlMhq4ppiQPWfyvWfo0iuKZP3h
kwhCLic7myhYC+3OKJkm7/BK8yQYjVxSV2EdnqHAwyQwT/ygOdhgBqxlEJSF
+FCEP5M0uoDbZW9YwlREuakR1lE4XCS1eplZoquYrXrbklh+TAGcuKJKP9yO
k0DMMiVLeMjwI5kVgaRgMibnpkcbB5z7ZbfeSbKohLGRV5ryQZOcijQKSsMu
ydQGlA/LdRSoh76LU1Ep7xFQGYaIksrtQ2LaifYmByAhwkUKL1Q9w71TiL1K
CAQL416biowkOZwDLZsjslXWk1Ukk9Ni15qHSSumGE484DkSMBtdGZdeGrTB
BdnYoX0ByfFmsWSLSHmK5QsS6kdOeG+zpkATi8WkpM6QOVD8yszXPTGqVAWa
g5MwpRCGE1FYKgIj2jDGlmGpOqVYzg5vg5pPWxrSoqNsU87eL8KxSZ4RPUEQ
/9De9gAI56UEpfRqOEJfPOGpojpG3CcPu/MNiIpIO2npwKCwFCff63oVq7P2
CPi8nDI0gmVYMoPfp/uaeOeeFuIrRXjNsVxxfYHIoyMXQRVCpI5wq+wtIjpx
XCSfSuqFPQplgpumkVuvN9QLSGkJJlOiRd7mC0jiHNl/XMEy2VlJBv2GTToU
DGTMQzenMLGhPorZtdkVV7I0V3g3QSaGCUVaqduiJlKAUhLExBn5dJElmskX
A8Ybng9QgWMYJGtyIIPfS8UFxn1lRE0Q3AOz0PyOmVQyVTWyTPfhE/8RmSnK
s7Dgl5uLL8mq9oaPxPq39Eh8XqiPAE2jqauyq+dXFnBo98chzrC4+buaPtzL
J1J67w9zF1PUjPEDL7fsLLY7joKYQdSzq8oFKXrBvBlDwtqgODRqKJcFj7jP
1+RsMwwve6jKIM0ZISq64jrYD0M+YeoIewP0IfA+4bB1ZC7VjKYvqY7bgFhi
Z/AWDIY+8mSzbZECgT9QsYoZzPWcT4lZ9AV6f4rZFci2Yp4r9K7aSbxYEUXr
tas05mpKtUgkE1advcKLiQXjqYt7h03jx2j9A6WlXmwWhC5dlQFh8E7SBaPq
JXMfjiW2YnNB43oiV14v5e1TsPRyXq4p5UJmtXPCCIv6/IIMmcnUUsjLFvaj
G2AENSw74bR+R1ChjSnJy/shCO5D3suxPbiQcYlZXWD2qsE5E2JHRcs2TY3h
eUPxgJapRpHswpP9LYgC+/Qyhblq5uQlGuxX1fpLCXk0JLx/B+gKqgGzkDQX
V84xqRnlhew92LYC2auEIg5kWuTfFvh09d+Jus+rs7Wxq2d9hfFKuot2M0eP
TFvPtJxNVnC0J4TT3UAS1ZJIjGnwjpPahnb7a0GQSZoiqhcmiLVcNdaLYmRM
P5tvKnH2g5YiJXLe1LMdvPE73eZ0h21uxIq9tD+dl/UCXc5EvJDwUFYb2fs3
XTA2FUDpN2hS7+dOyU05jqmdvy3x6WduDN+aJ1EpRBKY2aPlZa1IZBxKCim8
5cjfqHwUPVDHmkmcpj1kfZs+jW3YVJhdBjleiYwSsMk+PZQlRg5Wzlnr8qtA
etSXOsUyHWyGzALQ0e2hsEeiMxUHzYh/xCWpUUM+YCm/N5F8NDtjJBz6s+Wq
focSOno5lmW92rsOk1GgyEMEEBLoDrFf9LkRKTI+Dp+b0l0tFhh/PC12eRFj
nJykwz2f6oAGxfw0yiEX6HBnJ/vd/dsfPtCVke28gRHf/O1yjU4DrsVOln0y
wZn5zWQDe9Lg/tFAFPOsJQqMaSGh3K43ixd+KgcL6kZKopgN6uycwNKeksHU
++maDZXQR5pDHgZV77MkCzH3ppeIFd5IQIu8u4NmT8800ADskFtFQl4ymdYK
WG5WSyksKoTzSitnR1mwMoqfBFFlwcWLgcAhd8qTBBDGSI0PMVQ2MfSFVpX0
pE1vwAclghQhgIhb+RxYD0BflBIBrInDFCbwAMT8qUtRc3pRLaqBLOy7gKKp
+c9XhN5CqrJMV/rFhFqsbsdISp+9H19eXo6RgI03q7k8vMNvEY+cn8Ns64sF
2rLd8RJLitTviwcj7zjQCZj9aPiOpBlrwteXhrqHAp655XGFsDAtTmNG9C9v
48uEGmrauNFBZKikZ7/IOi+rkPRTuuTM48qqxS5dGxLvC+pycrqqyrdMO2Z1
B0LuleJ6R8kPe/ccBXtF1PQer7eY/v3PD8uvX56UR4/3n/69PXq5WC6mXz0o
/9A8eX9y9PLR68XvNn+e//nt6ev5ERDkOfY/IVVLnayDZEABFGVP5/hIrWlh
dG/Gp+3sypyXN7w47wgkm0sQUbgoXqH+7y3YmjFIzDYr34ohlYhRCiblJ3gk
QBT0vg0jyX8IFQ7fsAi8fVX8TPwZwqxd1Gt1JhTG81lH8g2/Teoj0BwQMa9E
gKUIE5ur/tHQxoIbAc44BZJAyzzxwggHBpnd5JYrQm8oSRJzaHzCPucKpkSr
x0/5rvj0eH8XxWBDb2bf6aQcbWGWPiViDfzhtCqktMB67XXmeP+pJpIq2Bpu
/Prlk16ZYxuLrKpxL6kLvVgadz4um7E0IKBvP3zY4wMg+kvrMdv4mNvu7G1/
8Rz28xnPr/1L6ItvQJO+p5Rd9uE78El/jjE6qe4V11Jynoqiv9+g1H1ftvmG
5v119Nf99dd/f3f0u+dvH+//769v/+H94av57797ckwj/Nrf5vvdnQcXs5dv
/2N99OvoQt2/+/hvZ8v9Pz9YHfx+/dXL0+bsj7PFk8ttsgieqPqr1yHCDsW1
xM0I0pkNLf3Ahqiu4oKnSWnTgS4Cpphx3W3XHsQ/35mOBqNBxzfvQ2wSpA/4
QC2+V1KwQiQ2d7rarInjYIyal9hQFHlOSlssVD9l2e8akc4HgMLsXvXJ3Ecn
d3hRrqcXopQM5veSEGzcbSnvFLH0OkFQorVKtwB0xcEy5XMMF9iNKDwQKEoR
RzNelrSgGPe6MRYXkdWymmjWreD9HNV79lIbVNw0PVsOHFYkAcuTkfdkS9XU
NECLwugI7J0N3/VnUsJfV12t5Zbf1dUlqns1SaNx2Bp6tdCgZsuZPhJU7DIR
NjmcUo4qHIF929mzrfzIuxLPq/WlOBQhRmN/JcaR8TYUI+DgD9dLoRmqDIZe
FWOlNkEI0vODsxmumxbOnJpZ9pJynNJNlg2bJNHE1DpB+p+3hYE8FjwwqJjI
Y7qqe9LEI4RYDKw3ewCcnbtZNdIYZNk2nfSEyFUETlsuxB4q58WrCMoBwhMK
iSwqil3JVbkho45HG3JsehSZuEeZIoYcwK7kIeC+fw3BhgpzNetXVlPE3hqR
WeZxsA4p/2qFDkaROE3dBCYN5W1tKXxM9O+sXnUUxa+BORqdt7UVxCWZyF2I
TbthPkpSrGpb4Q2MkKkBl1WfnbbtW6oGEZEvt63oM4P5mnA6rbGFH83bqIOA
GzihbZF1ScUTdyoefz805lD46+kN5T6kU/oxiNHW7sNPD3Ik4WaIWypuoDU7
Ns+jELuLcVlBW94rQEBZXRmv966JUcUUGFr40eTW3kiOnFCHCrlIoTqSePCW
xDXweOAgkEriVLwVFZ39fjAUmyJ5w5K8eBRqU7YZxPMDr6hBD4KVnNqZwA/S
V5KiYaEjVBxoI4K8chKiZXvXSRZ52dH1Q9RuIjtKCaX8brea1FJrQ5oosvP1
o1c7mhNiSu15y9fQJWhmkXC3Dv088K0d1CB2VGQVXz8s9EVQTqiak+9BJSYa
xaw1NRKjN1l9vSIzh2tFETOclw1m11lc6vMGm0WizDRtzxuq/aHKV4SgWuA8
9C3orGrosqqeNfGRDw8l5pf6NupDxQ+f6GgUtffhRkwgy2IpjAAThyeRQ6rh
gnCDmoA2nqo6ime0jHGbvURaWNDKSU0bME7E57eDi9whJLIeeWl8mtlP2TOU
RA+NZZQPH0YcixZEXx4yFCLmhfTHa6rLcXQEnCQYmL8/7cD/tQ4XJpyU02o8
q9Rmsfur94f7e6BVd+Th4JhyrIlVyZ3nZJP2TMLNgyRPVNi7MnRSRyexUxan
O5pnx8bGrtg5LcodNVIgO9MaXhuNVcIAU5csvw7mW8YiCoNC9sQ2fcunKLvo
rC9D6AWBsYhMCpYk+BBuB8Uc115wCMtRH2/IYhgmn07IJxX4LCXpNwyXSQSN
EIVq3tI7/rTpnPlGBmlWZTS6mJkgYZDpqPUFRWF7J1k/GL4v12zRxrdlBlqN
QeqM9sviZEddVXbcOI0vmE0/jXP4PK0xJQe98+W6qoNi+bSCVM72eS1nQuCW
cmFQmaMobiZHHYVBim3S8YN1h9y775dgUWXkZZU7k8PJgUye3bMXPDhTscT+
pGj4wM9Le3FcThS6NdFiA1uEshu5Mq4TytxNhLLieqHMXSuUZWATCWUuK5Th
rfokXCXlnQ/jCOYtByHG4BsY2tyQsGSkgGrWJzvMiYgymcfDUpTGUfJekBsz
8qELHlErHkrjsgLbR4NGuMZUwIHC1NgziFlAM9OCtma7p1LXt9yWoM2gipxA
reSH0yBcwgvEHZoXQHyxWc0k1gBzWNWJ4lM0pGqEvEuROJoavIVIy8Fdlqt8
32Ef66ydtSzBqakanLPHIOxQrdJlIe23LaWJbSBycOjq/xbJJUJqIK88lCnE
kIR35C8jc1RozisPxm0xVVHIVQXkIKVQSc75IoJyoVQaHlpT3ZluUZjniieM
Ve8GSvKq9ct4MUuN7nDSwa+ahbStROmJrUsCbtvMGnFmXDeqhO75621z4eiK
qxn2puZzzMozyOqDrUkocQNMiXHEWKmHlZFtbCZDYIKBLXRNrpzw+Zg4IC20
NYCtA30H8+tB+hE8DBIzZ89zMi/cLxVdi+kGJJ+FrG/vukAIjrOK1+shp+2i
ssDrzI0oe9tJLNj+NOmOcI1S5F5s/OfN6I6HVMHOkz+dDEV0TMKI5DR8Yhye
kBodhGJfcUApM45zqeZLMqlpjJUke4VGfsYMbs8KUNAFo0IKh4HsST0sE5Kg
b76Be+uPOzBQTYrrT1HH0bZD4vV13hsVkqiGKvpGaNms5kjo7Mz5kJs11gFA
paQxbXA9fHpQRIcp/BIEjW5vWMIKAtYIxXx06JgBHQ1I0QhhxpD0kZMTPXhI
+dzM526V5k1ut7LkBEiXESCLmwiQPfmRkVNLwHmr7lZd6Qx4Z6fldojrc1Xr
UlWokfMFkJAl1533d91478p9WefP8V85edadrIca8azFOF22QOqUec3Bl19K
VtaX/MT125f0kmJbXhXx1CNYQ1e+q7bTlBQfvapi3UjZYDCOGDeAxzVJTxZR
EAUxhNssBBWE9n4o7/l70ls3tl69KjhxM/XsJ0skAVKyApi6EEKnTdtjEqES
RhRksVa7Q5IMZ6JwbdKq7frMK+1i/u6kgzl667D35Kjo2ikGcy7nm3Ng+Vif
eaaiK5rYe1Kys5ZVAqptY1z7pUneQG9LaK4jZVb3PIR3RMZsYRw/sXZq8G0W
0jnETEtTYJDFvKvIGuPzzoyoI1CiaslyqKOUd8DUmApYUIyV9gWQN92u+mh0
x6HhbHbzurI9QhOnaELuF6pUxeUl834jW21+yESYOisztQGdid/vNTkVe2Ca
ovGznShSt++nOE+K1Hni/uk8+UWdJwlGbVd+tztHtGxW33a+d51484sG2WR3
lonNjaJgY2cFDaxZGLb2pE7y/5EbwwYh97IsuIKpAnk8kHSRTx/wXWxCVAon
kfVjDkmO78Ubb3E79xAnv7IP0Ulfg0HadiZ1JdYhk4EDJh5RSxHlT6c14yfg
dFptPM0iITcITq/RDkrRFWlCCGpogtNfjVoRcBQmLKmgqlmoNq6xL53g+54y
qInL23KkHkgxZFRD2nRRUq1JNCilWhrQDJSNJhJiQkVHEEySDYuUC36ru4AQ
wOVmdYfG6djq3FLxDQqTUbYW9ShZX2y4y1AVytuqZsuznXL4JFZjXbdzWqc9
KIS1jq5dQHwSvlY1iMW3zprfsHlaKdYOqjrzrn2rvTPhhZUOxnEy0cwEHV9W
UWNmbIwbSHTnrLyfEgEgx8S00t4sPCZTV2BbdTvDmG3Tvk/KYSG5MJWxoqXh
GH3slTRRgPscQHZOZSUvqWjhyg6kXVOo1K0B2XZ4Ye4xqdXHWbOLSS/rUT6K
mpH8DESGan7mPoZRoFDLSn90Z96wN3MnxKqGubMDYQYCEGlLtWYR/8H1ELba
7ZBFilBV104oWjflDC4I6leSkr1cS+Udusq2Z4HP+eDcORfqQZiJ1DotZs2o
IADN2G1Ou3W93shB+twOg3vUNK8odp+sQ4XGps1GCWqWW9+KOtlLulcVJyQP
/vCJjXEek5CYS9/LmdBIo4oOo8va0kw1IhtF5MsV9wxBxQ49lrMAIdo49Fdu
MVf4MnVhmJQrI/E3Kr2SuLNUUu6VVEa+IEKOJFrad0wmQGe6AJP9WPzX4t52
3r89otJoY5MDRmYUtW3LXyTNx17ma1qf8PJUvQ3WvcS97mSCkTiu2ZmeuNCl
hxdW7BAjD2BfR8bLXn8ZLrTp2Zx6iwhAE27OUZ42Z1yVm6DGP/f5L0bE4je7
xcmL6JO98IZ8cr84gMd+9f7woPgM/3M0vv2Afrv91fjuI3iBas1vt/1ybU5s
P+0rdrLgF07VhU1EGuDo+vI4XFAax3d9y9GnHdU5wM5NFBjgT04TjCzm8Uow
0iB0f1KJtm0soJM19r05kZDbhFjnrbfFGMBcfFuAEW6QBtFRSquaSZrqi1J4
l70oSSmJGKmvs0lW9VoqpGu1FRcTE6xKX2mZWrw/JepdPkUaLYgWTx0KkZL4
ZUqiM+5emwHuvIGKwulpo3F98iZdwy7oKrI68gI997Xv4jDXHz7xVfHivsQf
ciUTJarb9PLuxS33LQr5eOukmV8WCBGtq7UvPedCI4noGz9GfcMGE+2w5EB7
nVaC71dbM0HE9zKy90DHYa7qgRWznW1uF+Karm85bCbuxyRj02HpBgTstR8y
w22iByKW86yWxA8TR1b3upVxCSkDME0VSARdk/tSd7EnRfK3MN4twhAtHByK
jTkfm2PzyLeF2ewGaxLXTvLldOiMQhkzdrOQhtGAdhJJktTB2Cx4LzQMz/LC
fCsobugUWu5Qm5TnZMu3PVOizif4Dn32706+wn93D/f4kR/5kfBqv7DIQFOU
MN2YvqTuUtSBKVbx8Lt8o5jXCOTiJq1ico2FimM6Hp0du0nRiElIeZg921Do
ZrNnFh/vHfs1ZRp44+z/kmtL86PC/vruXn3Iy4pu3mHn3/k/7xz1nqeWITf8
+VGX/NFzmjdp+ncf/2bY+Q17oPk3wzJ//Fc8nlvDx8M/n5o35QaYrfaRuj+1
nfPGW+29+S9j3+BqW6cjWXQGQruXnw20N9qj/JfqHrHBOTEi33vI9xFCBBkh
dZAOHEfcgQNIHikRDYYbAvdCkbMT/9gVpWMUtiO2TbrJ9E7KMBbbQClzTo/h
6+u7Jg2Me33rJLoVxvor9Zr1eZyQbEvDTd8/5ZYpGe/oQDRKMh8vj8cwxWtD
VuEoVUhG5PGYUwMH+OPF7x8+Yl6r9pZqJG17adDU8AaruyYzh1yVZIJYa7p4
GnyKBmAVz4Ala7fHXRI9mpolQ0Cmj+pHkzipdyW3q0gwi9lvCEbtbKXaNImI
3qflcWFIXJy1aHzaJRo9rhup5DFWWMofuY6nraT76grNel34rUTxxgKlhpVk
j877tKpyNaeE0zjjnHZoig5kYio0ULwXjKL3ZFsQPiJVc2XRb6CYlwTd8yoR
orfiazbYoiwvG1l4ftol9hucOaoDkROqBZwcDaPyvoY2EzXw1WllILqLuGvu
oI3boEG+M14BA/pROLV+QmXVXeOUAI2qphCriDoIUbAULD22fqfnHOQ4JYTb
DNkEOOA3P6VhFKm/WgVpFDc1G0Ke5LEYtNpuHR3qoaB0utnkECkuRkazoIhi
BzyZFRSiBmYPxedv+owNBM6jUWHW8U31jcF6SEtFD+N2V6mXHB1lMXdTD1yq
bWkmC+nCp3Bzc5Yai3TeB7Kp57MugwKmwgT1O2NXsqkDkeVXvlbyQFgfx/l8
5z2bUf2QUVJ6qbikEnanWPOzIwO1lK/Mup9YU6PHWnXIaO6M9dBQB3Uex7+R
3b/GfIug8q5c0bXnsAWp0jNAOYZDJiZ4QL50gsTXkY6qKzY1bNf9Rx+evHys
RRRGtncUJ92eY2MQui6h0iLXZlnK3cygAzN2JiUOO4Vwm2IsfDhUO83vEil5
FS6frXkZ2NKAr/BC05HMSzRSEF1qkHzErcBuKHyROpVh0uPOi1Xbno1/X7E/
gES/R5LfvkORcCjmAEjPJDK40BZQ+8YGwsEVd+8c3fnwYc8xwgAwsGMPLBqu
EunyGto+m0iYmoj9D8kbj/AmkYrW8EehUFGIAB/QNH48IWjf499v9O/vR7Qt
quGVJQOjYINSEXWBPtSVVFyJRivuUz+qMaxl1S6vCmqf0oJQsoTjR1v2DJjo
yauXT559nUgUGBggsW4AW6rhCvf/+78cj//81+Kz4i/l+O/03/3xF/jfnfEO
/juhf9/Qv/+58z2NRIxa41cOJ0e+Z44m20h1RqnFWqBcCh/AU7eOzNymY+ei
fJ88eXD4uXkUPX4Pnj0mQCbQ5Wq3Ajt8UEE2NiC7dfQbGDBAIAXI/eL42xff
HMMmv3ry9ZNXQ9vnclf05P3iV+9vHYxvH5MB/87B+C5XnOH38duj/fHRF6B9
PX/1iLWvCEs0LI5ClauGaJOeKVxIqnFcr7HVF18Z7PjQFucbLdJN5lhf7jeq
Qqi3GGjzckMO5DIUVxEMkeJ7QmiwHUjlmSgjN5zK0eG4BfCvXYeIimEfLDHQ
h4V+KESgIe/CnVub1Xys1dFsVzN364hHA+7x7bgrz3z8rS+b2BcOBm4pPhfu
6UNVfeL2ALik3D31mhIQgxVJE17wJAbkT+hUC1iZeOlwRSlGwhe27XwHTzuE
XODlvFQhhC9zWML9+Hbz8yeHt+8MPf7g+OTRnVsIwkfPHj7/6tHuyTfH8Pju
8cnDJ092o8H29vZSt0YdNdbg3X2P031PoZo+/kk/KzvHv+KbTyk1qV1dFcD8
fPBBsfv01RNfZNw79bT0INaXBKYVgkloeILI91RHy0c/AdtCB55mjcu8VOG/
XVQO+OdFQ/cAzrQTby7yECqpArg+Bh5ySsZZmyngr4O6kWT8ThchzlH6IzlU
3DRVzsQAcRBbuFqNFM6q2f0T2m+yNMHPo5uMI/iq5l29aht+QMvZfrr2Uged
dTytJXY7MQLsDFM7iyT/jeTOXtcnkUEly/uiK8tw24Qs2JzsGt1C15dk06DL
bKlcK8k648a/cV7mqIiDPW+SCv/HKP4Po15gycTNvp/8pMKDg92RehUEYyTq
j/8wIoz9V95wAKS+qe37RuodJOjrra7PpP0GhRQnhfFkMkKexpPa5N5pObNO
qQCyfX9d46ybZElYB/6GrZ5wKHYh98d4NRBW4R2UcQ0BptbaeDiKTeFpKB8s
s1RMjipRvmf3aj5sW7sAqR6L3NkWI7OxteiyQpU1WwbamqaMaaHuZHrxbccm
z8RqJVY5a7qKg2iHE9n9W3rPYbOsvUsFiLTBrsnt4I5ltiNb6FKLOuBae9U6
a4aOayqu84uMrbckecVEJgpg5sViGPJPLqH49SMguT499H9FdOM+Xrx82UI6
+Pvvr/4uskFR/NrehPsX6/Wy+9XR8a8OH8P/eIhfHT6S7cNvQBTxi9PwfnzL
7985m739Q/licftgfnD01cnm7fT4m6Ons/d334CKPf3mT7ODd/VRs3/x9M9/
GhpDKMV9vLc3rA85HPASm41MWJ3NvygpNUxasRl+wM0emAb5NuchaMUUsGBb
0GCZ4uut1aHYVud6Vo1ZNa1ZQ0Um1r0dsCsTgsctBqlhOCyOJZyA+nshr9AP
jjENoUTDFsOWwXzX91t4k6431qY2Rwk1waN1v+hVzdrJxHrTN5RJ+Q4v4Oat
9H3KvSXASBvbZ6OiORRmXlNR9DpJWsOTy4knGUNbXjxJcxuLnySTuL5MQtGp
eXkiF7AhdifTs6ln0B3uMsBjcJzT+2W9ktc7eIKiU8l8w7nxoWQyKAb1uRY8
WNXdW+5wCHQU2SOPoNaBzGzz+qzSYggH+2hxoOZItTjVjF6cFEW2Vdi3+Q2S
vAciH4Nx88S+/Rs8AL52fanR5ioiSqEYshq+34FIARzHWt/3uKctx86YUi0C
XA32Uzdauc6sevgcsZgedylrgyMuI4M2uRTQWOBRxNP6P5oeb4Lqyi6VF60b
JGvx1OIk7zHHLk55DtFgrESrlNKTBj6uZg7ccg0Wj695VP5NmLzyvuJo/7B4
jJCkj7+VhLV7BbHre599JqszHPGz6en/wjO4f7Kcv58/f1D9+Q9/+NPpn07u
fPf+5FQqG4cfIxf0cpkkNDTJCeql/Ej+WAYL/kENbNhqQmeIU92kj2Kvew0Z
uuAeSUF/07jmO81D6bc8yiF+zpUWuJuaSWATmCm71tSDRE/Hwr8DSpSW/dpm
k+9ateSfemvYrCCrPkrbGps2Gpw8/TCZ3JmGedhggttwc6bAQkEgldo44YBS
Lqd4mK601fpJl4067/lkKwFQKBhlSE4U1WvTFLMbkjNtUh+yowJsEugLBE4T
g9fc9m3KUZIrri4cqIXol95SGsXht/HR9rTnsBshtAqmDq1QFDFPiiPnNvRu
h8+Pp/z7QQknV6vMCDu2oECvikAxUEWgX0GhTVsAxE04tLIbPtZcJyXfsPCA
6xceKD6m8IAbLjwQ2zp9SoBGs2SMaY0z4MyxBG8ospXn+uQhKUTnMWSHvlD8
FZPPjuzgjcy7IzeCH35jmkHvFK0PbOGRAYbyGFUc8bn1Yr6EUeBeomoED9Jz
o0J6Acemb1WYAtRi8yieOpnMAxRNpVDv2Usslx8DwdS3nIFgDnpuAHrFzaDn
tkOvGICe36YLHV4MUCwcE6Q3QUeJCcnWQ2RbKF9nLoyJJu5O6BmJn2XmNvbK
ggzfTlMD1CRO/jyb6qDS8hEF7nKGVD72vtZyrEmW5Owo/vL6hH75qyAPR7pE
kp/flAhl/bt3jz+nqSQ4qlfYsiz69oVRP2qKf/RognBL6GufN98lykJhVIaW
SDBhwGWNvaLKOYKMcI33wlmEXGPsDR9qfz/B80P12/wLNnchV0RefwiqerII
FOKdfg2M1G848C8HzdTIkTdK0Ovh3ArRejQqT/fr79ub1NiezJufJaVlPkcl
OcOMQDYMAcUoNSXn8UkDOLnyk7DnTUNBEMyne8fLq36jt+EmO8TLtWk4kxoO
ddMAbaO8yvhEG84LYQFI8kopTIOvz9lmflbP58FQJcdgxtilcA5z72oteR9K
FRa39/eLJw3JinOJw7djsAREuhOqMBuJuRM/IJfBAGaRtlayQ/ge1cZujJmj
DMB1BQRrVa7q+dUbuCtqhLohLNFXulmtOLWWmw/hQrDN7TxCUyuReVlM576i
DHls6Sykm4z5VYMNyaM7b7nw5MYAPrJjnEiZk9dhrzcBb7SXtMHCMHj/yFqM
FgNXZh1oW0+0T0I/UFzupMYecXesmzzOJ0ei2Jzh8H2PyjebRYn2wXJG2085
BRUpYSOnj5Q1aVKmVe3Ix0OAOlB3UUihL5DpgwulenEZrAN8dKyVTAmRZpMt
gIsFl2EgikUjBPB8HBCN+JPxRnE0sGliWBYXMTyxsfgSa2+GiEjb3jfU9hTx
SWFoyilG1zhAkmOGskeRDrsVjiTZJfDDiABSStrAYmCrsC1KTcV25FfNunwv
Nbc23U/C3UGYDxrDyn+awm5gCqNzvR8JGtbmxX4DmzRjwmutP9ZE14arjO6+
Lu62hhvqh5mb7bqsgf+jTPZSNioRfjVwziNbaGgJ/OH1q8fjzwtTVMlH95LB
44p6zqH8bGpR3DAKIVfTYvLR7oMBnBtIdcy68XWSkbcVxyU243vSb1g/dEOu
rQ1vmghI4b1ahBWx1inEmDxOy/nWmI1RalcJ4rdWyjBRucNwyqz7RrWVQtiH
xlgMRX2E0LPrm12rQq25AGVSnMlF5b+o0ivWb0HTICmySaEQm2sutcCs8fon
FnZyHweloQgBJgxZ4pYEArif3Dn1p/VSjHyk+X6ry+a7rx4v/rCA3w9/9x29
9XM7MPYpxK+v81H8nPCEX0fIe//ozq2D8nB2cDi7c+dg/+Dw1hfT2dnd8u4X
0/39/enB2efT/duzw7I8m54d3DqF/9+59cVdRIbtdai5MJcWQsp2Q9OIvmyh
Mu6xRuE/Puy0zFyMIr0YhDHcnVBu/uC9oCVGd8HSlaHu7abAMI9gQyYGnA5m
2SYtRKclpp0BRM6K3EkOyCidlsfozWVLHcXxYrx434VsePEhjiN6Qa2+ngwi
LwfqjaXVfYhTYhw1pfekhDKsOh2GI02pcjD3yfQUyrhigw8kDBHsz5rSwDkF
3saofTen2EJSAqQFdENOHXFoiKehX1QFvVE5JBjkrrURQs/87B/BiyWbdt43
LP1EjoxpcjqF2YZjBbxeKZ+mwq2GR+fEw20+l0RkTF0vUfJXGkMUle6rtvVe
NbEmSTaZTybTPDInX/XBFQUbbuivs83c9rbpRTtNs6UK0fCMTHoVWae2aAVo
OKBQp+s78NhFZnrvHDe+AXnYwqACcbi/Xzz//TX87G9d23yJIjQIt/dJaOYX
yulFNcbXVu38HohjY3JbMiPGyqglfTjFx3jaH8QyokZO2sTOvWLn8E/tunn8
58eP/rY6+PtDYL9Pv1seH++M9Hl6UATwYudBBTi5Ct9ycEz3psaxju7s7/tv
or7G+Gq+tbEdikD3xl9FfEk/pAvBQdyAv86FJArPiqjoyzWFXZSDlU1kL7Zo
q2kS8yuTxt4TBlkG9CZciQ3DmjsRNu75upEusBPbKSyqmp3rv0HGGFyJm/Jp
j1hwbdmBpvWj0+BUJIqhc0Cg4q5cUY2w2TVCKHWDEEoM00g+nvakJNfMlprG
e3EUrQWeqaNDgjEB+jREC1umLDDr4loyhC0fVVgjV3+ksEUublDuol8CJR3j
X8fj3eO98UAdWS7iktaAkTHklZuvwxaCSdfxL7COB3tbym9kyrn8YvD4meeS
KbUh2o7BoajURoYQ3KzUxsC4Nyi1cRzXAPiY/PhSzEU3KBzQq+0Mh/oTkty9
wCECJc2e59hDcashjE+ljVDJakjRMN17+sDgMmQurqOZN3XUtvvwFuNY5jR/
QXtZcC3/P2guE3XFgG7nH5dNYk7j4+0kaeedf5CdxA32uvrJWRT/k4wnfXy5
rkHWgMK/VaH5RykpvSrqN9JEjuPCGLZliSk031NZnCgneZp5Q5XFicpys6ah
/1RZbq6yfIwGEvrpfs3pGT984us3cJHJrl9lMqJ3FKEZlb40sjE6abhys3KW
8KXziStRQ8/duEJxFnf2hCG7qH5yVPA7WEJsZ5Oo5PfM5IhglLLh4oYpNhWe
Wrm66hHcwdqovnDsiVLU4w4WTtaWp+Xq7WZZfAvaywadtrsnx0+/3aPCGaU+
ZCEY9zf9C9bTuH14+NeI3lMIcCZLLkf0PzZL7hcwjv9cSg1U4ldHx3W1PoP/
0MmgzbpFxID/0oPUIRr+6MrF/HBMA5zSffm1B+r9F48e/316+Mer2dfzd6f1
g99Nj54d/Pn1fDM9enlx2vzhiyd/e3L59NWj9dOvXtMAf5lMJr7zByZQofa5
voJP/1p+ffvV7OvH+3/+7mAOr45fPPziAQw3nzYvl6eHt8b/r5imIjqfWqg+
0jSF8Vw/m867JwAJoRqW3w5XMP7nQfzXHMRJYLPWeHvd3nKGrS1y10fDeyRO
gKRqgSxwILzWdtoR5cnoI8pAojAK1XNQlNh9/vs9G8+FCkzM6/Pe+n5XgG08
D5UZKxFkxySWETE8LQSfCIg5dYZKURP2sYZFlUk67gksjQUoXMkIHrqINKXP
5wBSh9opVW3LNEOApx+34tOPFBnm6zso1uxgJGq7toXoIshRhzYZAReGU2J1
mIt2szJmCFxMhAvoIPHJlRK+BLdOKP6WayRCsu1GG6aXAic4W5IhTMUgbYJU
VMWdgy8iU3NWZY3kdS0wJv1dkuKDTXUpQQwGXFbJ5xJhfZNG7LpnSwuXbKC5
qX58E9klthRuoKgL7/xR20QobJ9pOPClhHOtJcx6lGL5cHONstMYtqC6b9fa
k+z01GV2HR0YqlSC2gP6AGeYVt2T47g01607h3fpur3CdivxOgDXsBv732kl
FL36u/JdecKdLZ+f/g1zcZ5p857d3508f7bnmOShFy7QOeq3EWRhuUBYrgzZ
SnhjjkF/k9AprWjgv1w+R/INrS9PgQSbwql9uxH3DNB7RQe97XGudKUZhdwt
pD2zIEh6h0gZjQZLBV5tbcWcNqTgjnGR0rYTKhBeVOWMnL0VyM90Jod3DrAT
oFB3r17sqJ63w62Br8IY0h2FncJ4w0ZxT6vgZVEi6qKQVluVELGIlUjTQmNo
kS63SNI7d2JV5f9K9fejtN+tyu82d91P8dYNqMqpiS+Xx8tHwVfHx0z4Dqx4
zSmVlihJ6K/A6CEXphewly+MUNKdtZm/1+b4un6O70el97pcem+RT+91/VTK
LQJltoHqgAgrJWAZ9yUO/hYKYQ/KmRrSkRSG6PrdTTNHDhEiMTxn2TNFhlOL
qSVHtj2FWpT+J6zxF0nb+u/I2DJpRWnWVrFrMvCCoWRvZN9fVcuqXEd5XWYu
38fKEupo+nU9p4tqS01USU+XJHB0HSdK2UCs7SljCsxcttjDfPgba4PSNVoy
lvyMTdtfR8+v5dsow/oMsNOMK/MKe9H3ttGJp8d/ig+BEkvDDTgodl+b/LhI
aeKqwdQ5KYIjS7g0QLKgDljMQkSMkPSpqnMOBmvMAJKah5ExX4rfFHHHg514
M4zRlhtfU0Mkfp2IQkoTtkLEe1n5J8rG/+6778bGNV8NyAv2fd+4Xhfdg2Wm
1lkPS+nG9S+8L1KU0ycEUbfmM47S2A9zN/d6ja59NRkFjdg+WC6YjaQ6C/xi
JcmpEsiob6r++KLl20t8t6s4UDK6Mo1tk/txSaFRXOfWFFGujxNDIAd2JIvZ
RM3Iu5pZRm4gXUqgy7YeUW4R3mwRI9DPycn0xHNUtFHeYvV+WlUz2x1OW2Cc
ahWfqAXZf1O+3D/T5f6ZLvc/MV3uv89Q8hexk/z1xmYSsUdkLSHuxpYQ0GYH
TSHuJqaQothqC3HbbSHF9bYQ967nk0wVfdQ5jMrxD9b4VfnoaQve+fzSGxRT
fw4ojFusjUPeHnL4HGeYUOcrVCFIF4BcpvFqyTXu0FHYdajfjpxvYNQyny+S
htqEadNqRXZWYfZe8ByopjCVpsvroVGtS9dhX1n9OrbfYgl0Uk8opoqWaTpJ
jjD+4ULd47l6gkE0oPbZ/DgZ+rfUYVyUOisavNq3tVwIIHvIWZCjaHnHljwz
C3wSh8MEVYclD1Y1lasnj1wCTroYJE+NJCQ4eUBjvXz1u8DnudidMHc97ZJy
5DBVYlgCeCXtK00b7+WqfgeaFfAG4GTlnKEmr8PHQNcXqC2oOgHiObDEjQQQ
1oslpvqm3depcGJ5XoVqNMOOrlnaqSbO/Y/S8ULQHz///3fwX2z2G3SmJH6E
VKWwaVZehP+HRBDmZeAeC0djG3dxpsGQmJhGKltFXh9AqyENqj+sqR8DMTCY
PnXRDA6v8b+JWP1ACmFkbnjo3ortb8bzknMHbFS9yFoeMfqdwS2pTI/Pkwd7
T3x7vdrmAAYP+/bUWtsH6PoMwji1NnXT91Nrrw8ZzTOTn5GA/M+Q0Z8RiBTR
lF9Hf93POxpukuv6S6S6/oxM1+2Jrr/5WWmuYsJKUxzji3t9iqtNmfyNr0De
H2qSl/6kh4qIL6FzTKepQSQEoGg4Xbt4bauKMBdI3gJmnVKbMuBs7YoxO+6q
Rqf5m5MKFemxbTgSE8N7vxmOiS3i5lFELU/rZtZl4JYRQh3qsqjDT6tYTvzh
hyfjryYYQjemuDlhPzg0fP3hA2ITuRY/v7t/mwgF7ORlDArxNm9Zvg/XkdiD
5JyJQrzDsnVJNJZKMJGnrAj9IHuEXjQKLou9Wec1bVoAC3GgRiw5ZW1dXhdb
KvWke8sn5rBYroB/dozZIDufcsclKkcltlNqos7T+854Ur6iL0SODDouuNFr
qI/vimij2dAPesXU90xtrHIwIqEgUZ5ebDPhSykqryc5tcBjo+Er3LG2DUKR
15c8jFZGJ7LWwBypk80CErq/kztbcBs6UCqXkmRDUCt8cvq07Uishj1OVUTt
S+OmL2DB8WBZoyhZ/nyjJP6ioWbMOKwoRyoypNL4aYWSC8pNqA+dVoU21SLb
Q0YkoSq9ukOqfMs1y+hss/DHRgpnZ0BpGKn8OWSX18NRWaAGN4eY7BHVJU+1
WM7VxsQkHJTKj5HVfJIwWK9XcSF5peYVIei6OicJwBegtAvyRYLXFxJNJp33
RARxhegdKDhRnU/yHmsz0Fxg5s0CBf8Loi+d7db6E4Iu2fIXAkc+Puhym+NN
TApEetMLCYNroFhXWZGWK93XoOyu+Ea38+Q2i34NXHBa2YoKrjfNNY5BSwdg
loTPSiMCDe7tbyJRy4RG9x/zjQxyKoLRqk4rlwSlles8CntZJu4BJOWNQj3M
gRsTdp6qRFGBZWTheDgYURGkajJLeJMOyRfY4v2yXVHDSOyv9xvQps6p5Wuu
DIeIFe5lPHeosksBk5EmdFF2nG0Nah/T69DvrV5g0dRJNclBF1/kMoaUARHF
IjJFjg1ZOixFS/pyaXEMJXVvJUAjlsJdoqs3bEfh7ouL+vyCyimWxfm8PVUL
rKOG40JQQzMGu/llC/LcldZU0mjIqGi66+98l1RrkMk1xAvODnPH4YeNmlS6
2WfFv/RZ8RoWg0ZOnzU/9lnz2wydZOt8FVbOA1VdNvseUFfECu//tVTSM6/I
jOaNEtGnfH2sDO56odlW3q/XHjHEOSvSEH3XiTlj2tJtMUTXrF8WorK6dVLr
Iy6wz0g9iJa2a0Lt0JISB8F3e1SAnysDWAtIrjIAyTgcPcy39107f0d8nTof
l1PlEdOWCsbIS1GDsBisIiJmFX4h/dqCTam5wVsfsNLb9Lp1WctCbwGzCs14
vmmmRpJHiHKDKHU4q9AJAUPCGDSd8f9wTGYcapGNryDvz+Gdg7t/1biJ1KYi
cQtJylh8VJF1TjEed4eIFOzlPsYwjAbS1OXEX2LxTKDxoEsD2jh0PpPcIEw7
OhGcW7yJcR9338QgqDOhjRagdhBX5sEcnzlxTgUrAylw/rAVzLu2BzUsaKww
Q/EbRBJs2bMXhRS6qD9PmpGBQd6mvn9wJgdrtJN4hJ4JSiFv4aNnoKJjfKSY
ls/bnzlMMaxhsCvh1DGFU87PMcxxHSvb+k0B9NlBzgp1nfmJ1l8sHr/5YvLg
9tn41uTgd//xVI7+FNt4a3Iq1XCSSBnkf76kA+4qSrkDQD3C2O0+6hBouFi0
hgvKvTfWUn+IbremIM29oqtCTzGvNJ2zoyt0R4iidIP31jsKmMOW866VM+rC
nc5GjHmjro1fijM4sLaM9qHJ8K8iCFkCabqJnUtu2nFhvybZIYhSxgax5nil
ZYUaLTdhAm5ACi4WKsReTsiTA+lQ9lHscFLhzh4pc9qnSuVEGuayvHJ+THbP
sercG5mbyQA8X0t8JA8ul8VfJTUPmu+lN3w8XNx1/G2FJqs1ucfd7pK6ucP/
wit7AZoij6lOizqjdIrWI8u8X3DzXzwY51vLRbe0s4U4QmTTS+0Twx64TpoV
eGS6bD2nx74tUuI1XmrdBM5PyLHm6kOpI3Diex5HxCuN6sTZKPELrduLeh2f
KqVQBBT8ZLi2yDfMux5T5B23OLIVeWOCKf18trJBx2zQsDfv29dEgLtYjM1K
Ap3cSKWqAywz3W5SQaUfVRDTyZhKbjfWfwy5lCgWzehOoBMJB9rMR3YkXk0t
i4wRPjIKewcSUQHgfyKod4jJJwaeGLvRrll+5fwMpBo0yijicklQDsmDOBPv
ITPTwQTnsmfHxrLO97OeV87TKJEvex4BpMSgAr6F24qopQFIBBFujMoIgr+O
j1+/+obq9c0BktjR3m6AQSYEESOJQNBw0t2emtXPaQd4t2EqyqyjABW6amdz
TELSrtuF6bo9sUeJxyQnbv0QUdNsQbHTO7f4csDP/eLgN7tpT2wb8hd+so2y
8d/f0r+f7RR7xW927nPciV3D/SB6HPzm5IWfX+uyeUWZ5amIjPnKR+LztsRb
nWXX3m/B5MB9dTnkHk/ka8JfwM2XabQD0bbQC8i2wyBi9RjdWo/EVPkAA7R8
bNMNqVTkCTTe+igiAcSPrP5hRS6OD7NNaSJxw0oZRrdNOkP6DRacNeHQtil3
PXgvfUsN9j7DG2Q/eTWwHTmQKM9ixzoMlfoAFvGp+Trd10ZLTHRiGyRnyZUP
k7DeN23OVdyo3+hUlpopGoERYU+/LW5N9g+Kv3x39HDy8tHD8cV6Mb+1fzA+
+OKLLw4OD2/9dbINOrRiJLWUNTJGicY/LzOLCTmYxGVn4X0NZKRYVPxiVc1x
dbBPDnL94QeJcgW6GKIV8wsL/ciRhyORCUpxhGwXlBOq4OiqRYl3uOPoJ9xI
jXVnVyNFrLIxmcY7wPSQbshsHhEl21Y72NlNoilWxCatacir8RpWCLpB06wL
ptmcBJ7EgZ6q6DrH8vf4Jap3pjru4Fxy63Z+vRNgu9vtFbsEcUfBYUef7/3X
xQhEDv+8HPHLlxGxwLyflThucrnk+OPySIgADgPPl2QNNsPwlXiPzAE5p2BZ
veREIXXgz1rkwY7KW8YFNG/CNAwjcNbYnOcDJIfjbtO8kZCiFwuv4gEZVsaC
EOGDkyIxJSo12q4ioYnddIkFge4c+8e6YKwZWIXanzOmyTT71900V+ZL6iNq
ri9Zr4K/Bq3ZdKEtZ2GLova7688UyfFeNg8i3DWiPfoVgLn56tJdkfR5TQwj
HOlg+iePRTiWggoiX3inK8vESln4WvPg5JfmZmgkiIyJkkgos/H1yOfB4MD6
Ppnat3SkJZ4cBEAY8Pla2xH0h8RTOaXe5DMPctT3d1ZVOV/shEflyeC0MVll
kU3XCU5xMhx9BYyBuwMan1z2TKQ1ZH9u3ztzuQQ4p32qhdxwOKF5re6sqrAt
QNBlXy4BB8ppNcZW6KDNwTDzmj3myFPGPu1cTO0SjC5QsQ3FyMw4XFsBtQvv
rhg01esSbcx75G53stkvWa3gvKJiCl+vJJJ/VZ3DBlZXmhex+BK914SYplPu
DcqEpUH18dqcZjTV5w3hJfsVG3ZKIewkzjB6jSMulPyT6coWQibPZVKfBIT7
bqNO/QBg/5Szptw+rSMLUShylkEBl0Sl9p+5BjVj7Hqn1V+oK5qaKmFh53At
yWUpJuCZJoWh1CQCoJNoP7578PoYI8BRiHt12YYifQSEd5r+gqdL+IDD4srK
t7aG7PNl1Tz5yoEA0KDK+Rf+e/IU67IBTfyrj6/BL9KKxa/QTtXO2/MrGGBB
0StVsfv8+NXDveJ5Q7GKTzEfmFNQYsMO+uzaaTuHKZ8ev/ire45fU602BICg
CDKIasqdl0XGoe3d34F/Gmw7uWrPatg0iJ71fMc+sFk199TKgv7cpprf/+bB
81/bz1d0Se9/PXrx9fjgaOcmrNmE3/XrJkkwQ8yt8/zUtw82iaec1OECamVT
o6ybCdumgiB0Zb0wutJL0lSmc1PAIE33rnulLVnVjsIkUE7j0kVwf9UOPiAk
GA6/Hmjxm92dT/TqeklljvrVipePXZu9i1EMXAxvT3fJyqJ0sLAizSC2RRPd
zTLepKtulN8XNTreGeVy+TicKLuaYFh1Q0wvzXHr0abdUPQA+J/PJjie3Npz
W5LYrslfcz5/Tbr3Ggd4RH1wb5hxyKHKwkNXnVNnrX14MpgyaiBkQecMpPL7
hC+OJ3fp/ePJ53ucOH7zHQ8nSm7JLbwB7L8AfiPgj62cN8w6dB99YFHCYaSC
srXfC+HbXER0O2CehLz1E+MOCpt3T9+mwrs3VJOgd1/LwuxgtdnZRy8q47yW
egSFr4PqAyQMzf5Flz7KG1CZEtz3iXpsetj6sMXy+zuvUllRdrKTqwSTId/D
lWAwzCsANMmwoebc17Au6hBuGJOIUUr7vrtAzrw2QQPsdsKggCQ+5CPCQ8SY
5AvmwGKBEtfdBY6Ctv4FRdqLmEtSvwKCP/vwgcMkaQVCqJiLdHCfEEVghHOR
R4S3Z6tjwF16hhJpvnQGHCInrCxX9YKa8tK0ZtgUZ30eJQrf2AA9Koni09JD
uGNS4iOchAlL9AfiabKI+7BVxyCh9slqU5RzEfAF4A5oxROqVnnhd418lsi8
p0StxpuG8jeS5Ekh3viAhH35tXiG8MQglG975dskayVgzCGeOVOMZh2JOvi1
wvbUcxVYOGvFuvJpuSSODutl3w9pxMmRJYc9cuhiQmEkHLI/9zNN8JfYgxEr
0LW2W5RDDBgYoMCISxDExbP2vB3dcOzpRdsKycQYAqkOLU471XLyQlkihBjT
JvmjqNgMr9fmA1BEuOj2+Mp8XmmOG+yPHYUSZeJStCGzGROwh4QTWerFwqe4
UsqbUCdfIip4QkB8WrVwQmio6DWI3l2HmKpb+/v4zwH+c0TlSG7t36YiUc47
L0JSgTHVWtxOipNh1mW/phMlPL66MHrFR1dzytdxaleplI9aFFdsUoTi983Y
ZDzLee45kMbH/oQQcE5v5BDo4TJM+ShHKXmmSY6hdo93h/UKetkTmxiARhmo
PU7pw4GwtXivek2m4IkmXZz5woKsYnXpToSc2NULSMIWttUfSnxwWtvJ52b2
TR0cK46UIa+gRgMwiIJh5E2UZ2vRTjCt42INq5Cm3TEqeBDazNSkzOzwGeeP
lweBG1bsgix6Ws9AwepVZ0p1SVVuZAWxyhZEBl9RnqigrNMCLM6tDZnjCpB5
OX3LIay9sl6B7knRpcBwHSrbm6a8LDU2t5+4F5aGqYW+XpZKqM7e53x9sK3i
mFUMfNsHgqZHZv7MbOS6Ehc/S5JPYjt9vf6H6KWcVRyY1w12Y4tlVWQWfoRX
F5hXLT1FAhEm06yoohj89I4iPEQiXPM7RXleYhofIQSanzoXMvnIOEn6mC8i
qdZ8NfvqMJgRrTHuz56AWnmC7A2me0Fpi3xsn+/vj+8cFX/BB/j3v2rcAMME
WOfmrKTaKJ8t2plnj9R0w2e4YfCYVlPGaIj2fKOxtuRFmCmT58/EZ4xKcShX
0W8kYsxM1F2cs1K57GSIPBESj4nnwTLdiwvnYP66sYw2drv53BKrfWJHxWiX
vb2gNYdi5ugzIs6IAFjxop19WZQupI56R2o0TOj7gMsk35g3DdsbrV7pK63u
ydkWBYmEGPleV5fx2WHSxLzFYHzAwxDl511wiT6KyVYKcBcALhYtubfBnxBf
UjOtFliLUYQbhQjQfOVtTXDW0qROfE8pBemBBoYCCJIdYt0/b1wxyCpkSKbO
fAD5d+J988d2yoED9TpdPtrp4sULLaSJyfhtvZaY4FDO0d525UL2i1D9ct3b
i0hfy1IDCoVaFE8BsOd6u4DMr0A2pT6H9lpLte8FP8tsT71ZvnkuXy8XBbCe
Xnl1ZFaf12ugBD7tbuKO5yBmoQkT7dijNKIJJ/VoUwT7j6QXBJN5VH8MTtiX
6vQxLrggG+HOuDK/gotHapof3DR4b85AxsHoOMl5DwcDCzgHpth96fcWFoe4
7sNnG6lOYBM01MZXujgLwyeTdRuNdusowYNpS9g8i+5DAPCJK6QjG8tC2UTL
QDWXs263+HYnEjDrjQreo251qFBwZRVhgipWtLEviwtcP2Y6rLmUKNYwXsCo
s1L82r5cmXYEBSiXVACk8iTXJH8abypKF5Glz5pJfA1h7VcwPI4v8RJcZ3DW
WqonHBJ5iVgbZvbEYTkYng4IzpcwokqcltKhWxIEGWQKaiPNlj4yYdCEuTOO
9lH9yvvIYOh6yZEdu4wVM6p4hBKRr3xSat3dlCRQ+RDPwRNyhuVChGaoPPuy
wpSGcOOD7hzIW+n12VBTkZRu26/h2mLq6rwtXn17wgYzQGBcFDyJ8UMYVLp2
TE39w0T+5nOq1160BEZM5ysb+ZyTjSTXyF1iJswS6aeJIqWHubKtD+J/t5kj
2zgFYWhNJagEEWBsJHWxo5mxQDDKy1TrhDGOouoaGRx0yGExtsfLwdhCSSsd
1UsgcN2mlnBhn9fj0lG5iHMfz1V480qOb8uON3LTBNG+T7aMWVMJVw6FezXm
bzaWS3B0ZCqA3XBv0l8TAYa2gxLpS8t6T8CrsvFVTYVlppYYvbGsJEmcckGC
HMbms+WR6IKnTS6csK/uGwNU/K0i7nHZMfLoStDWOmp2LONXUpe9PUWYpOw2
uoEjWQjQAMzMsCRN0akOvkqVQX3gOsDMRVhyjMLT2WZFHBU4RUU55INYbZbf
y9ikA8HKIQxhctLUcR6Ohje7dZtR5LuRMbhML6rpWwXFQzPqy+pdK7rCt0jY
dh++/HaPI2luH36+T9FND7WYXFQgSjMT1sHoO52DOEKXZUP1Da4i0VhEE//4
QjKHqbIfQDNAhhkPIFELUEoyYGx4JxU5pOG03h1dTBG+OpMCTisbaVJpYnrc
vhZ3UlXFDtliTlDcLp6WDZw/XYunalnfYZDdObxzW9wCSg/dNFJThWvLetFs
ILEsJjTfHhzjfFAt522JWdFzLB+zYssltYubctyFwdKecE451dSyFzSrdqXP
odpYziOhPEp8jDJ8KQsC1RqA5zuTWeU2TcBAS67gJjZrLHqly/AXt4iX7cz6
lFCegvho3926uCdASlFuiwBpBBMQkvA8g8AKugI8qK5+UsBSohmL5tltURUP
WaeKAl8WhqAknZ5IcaKFYp4WicuysrxENC2XVPLU13jggH5jrkjkQnKBLcpZ
da94XK86rkgYmj1Fy1FQSFDal2KxhYtNRQ6mF6CQMRZyHUbUYjZriaLyWjSN
y9GTdaMypQv4gKG10bw2eUdri1xQMDJ11djV1lBYDACTB/b08nMpR2GQvpYj
3V+WLrGQI9mLT6ih1ah3okZwUC/je67S0A2wWddj2TYdfAubT/XdhLMou6Ai
mFigCIX9BlARLlY3W7VLrNvIGcB9SWMJShuRLDErMK+zqY66rQmGZPkKSCOv
27TNmAYpZ4ixKAJKWSEppxUOyz1mhoZ2/REzoKRQgal11ZNHejwOC7RcZcT0
vg5O9Bqg4DQ162hyQCGCRIyfI0yBhgjpPfz84PM4LcyeCQmJH8le1xTq5nOI
SLHpMVksQjwEjKbgovIhIQnRyRaa7xFpLBgH2h6LSLE8YBbrZLEopZMb1p9i
zR7Abo1UJKwGUZIsM3byUBMiJz2I0eNks1iQfnAGokJMZ9gcc1KeVah2ziJb
RKfpWYm8n5YnKtcueo1kDMRCvsgkczZefaMYfRRsWEa+4vJVxromUdWLjCUq
f3bI0ZyXWmvaqtdkIs7NqMHEKlkyHSo8N6/ZLc46OXrBvG6X6u6En0zC1a71
Rz3sLGZ2/eZGKTq7m0mLg+f9OCDeDFCoJdOMFMP66tlJcVH/rWQhkg07Maa5
Hqb5Y+ND8Gm588vyiiLQaae7F+v1stsL6XxcaDN6yMlDeD1QBYOdk31Bk1jC
kWU3TF616MxQoUh3W73nxP7oDjdYH7zddM5vmQRMEoHO0b6qNq5ueMNftc2n
a5ZVE8yR4HWVBkEYzF0WFHa5nHf8Nm7retGXhfJil6I4FNW1raHI8JwsvqCG
QlwPBUfE0hLJgjhrHuGV342uhdaNdl3kFFMgOSyYiCI0XYHkM+5QH/d++HZ1
XlGpdALZE6qTZWWChLiwETgpHE6mQJeVJAovSUQDjUxy2Zyxx2mBKy3A1vpk
IOZRm0YhX1LU5umqveyYdHO5zqp5V4N4yGZ5FnetwiG1pul2UcsGrS7gBvdL
x5otYx1EHyeiTwzBKeUc3xh4yZOC7CEXSMxlSDXYsoV6P04izI+CNbzN1Zjd
5ldSyXpNXkuJ57Gf11VyYbCIVh/DKEb29ctvu7QygtELHb7KeqF/vNi1Je2Q
gQDiIbHnoiMhTmVvAioZUrXZKJk9hP6E8en6LjjGXfKIMJPK6Uen7ayWAE9J
IUzkUa+V+JD6iXvAGAXYifgl5zQybei69mx9yWL+FfeemWFZ6DWmahIplD0L
BVAMBV6Hlh07LBYms0M7YChlaLQgsVN9Fp2B8MgFWhiKewlj9mxiETIGZDkF
TjnihTjvYt40vBHQNNukVAWj70sWU1+ITYm9MV2/rmtcYgbvg/gxORWQzJRX
7K10aVJ0KN3KA/uULPqLlLnTeX3OpVNm1YKnBbKGJtF5NWMrkR0Fy6ORVAvw
RE5GRFBM2zT9kgvDqkQsTFVL8or12jdrSuXHvV6Nu2zpfcFkKrOhFgyp9cYA
dEMQjErxq8meDiJtXqwy+63J55ODiS+qkJS4VcY9XgMNmWJ2AIk5Yil/ukHT
BIkJIX4OMztMGVw8hdhW/mSdfKaSIcbzr1vS2tlO/oRMeMgF0UpARTYlhDNY
I9Dd6n1BlH+CN4gMnPho2ObBwc12iGX5vY3QCy4gwNcURkIiko13eOEbHrwM
VFfavYQgm6QAXi+rJBAvpd3VTFM3YaP1YrMI0WLqawnMMcqcbVc+tUZaNAhG
dJ5V0iXnhk+qF9nFBgVIwoE8inKN+lC/yI9MiRiZceuV2zayyfwJwOYKgqS6
yZvOcDRxwFxU8yW7FTN8N4Kt6R4RZ6vHNyd3BCReCHVIHUrFbo7f7o3EvA6k
9UriX2N3lQuJdS2aa8R603DZWnKuDZs0FI06Nnv0kuTSxYZ2HlhTkApHp3aP
iEyK/i8VZuV56drmO7r4mUWp6Ey2UrkubGKSTd7xgbZsJ/QHkTpJ+OYD39yS
oQwgFkmGPnUJKml8XOGLF9kquL3yonH2YIiJ1UQbWPOOLmMHSalN+XBxnDpO
1KMy+vJYUkbbVYcFZWza24iZlK1V3DMRk04tAPVKzLEvWUYxBz8Jp0H4R/jI
/Woz+MNR/EExT1DXfQTqFnnUFToTjlATFszK+lhc9LDYfSwWFzksdh+LxYUW
rGSPhvnCGsG34PViQ3GagtcuGAx/abwO+WPNzO1EL7/haIauh+QZlC5XwN0T
nOW+Q1oyFcb/rFXAkHzoHnE1bRbrXFKK9Suqygd8I1sscibfRn2shqtG2qJ2
af0/HwBkksY13vuyxfpz3b0iSpogApNZlo/j3w0Gf+am7RQY04rixF2SkB4y
VPYoqtoEFW2oHFyUmIhHgVVeMb8BfRA0b/A4lfRMkvygWex0FZpZu/LVTFxq
8OMoVjHrcRAlBlmI+E3KWDPjRnFqLZPmUfFIEgjjHbgpenvH0hXF6kjpF6zM
IL2IaV9qhA/A52qo2hE818iPam8SAI4fPHsc0knSSo8hsp7Crn19qF6WxSi8
nsA1qXddbRmEX93tt+KjYqx7UfAOTuV8SC0nvxDYmNIgRcAievx9J503w7ap
0Bf+NsZMQfrS/4Vf9ot7SS0wrg3mzM3DzJNH2vHqReCE5voB7EKXnMAst95B
uYjPqNY401WTFmZZru7Xx3vH0Ri+G5eIwOJM0U9tUQNWrZLEJ0n3MjszlRKy
F5iJX1ihub1wEGmHw1y2J70bEJQvlB9QE4MkC1QvAMaajHUr2qWaiASPQbFO
PoxOVYVQ+s8G9/q59gR1zIq2485NkOd1Y1O6YmpjmI7voxCTHJchOaG6dUJ2
ij7ZcQnZycoeMe1hFi7ZKcohy/7SAbr1+8Kmos/rtxVL9XjEsFoWGJzmkCSZ
bXpup/CFCDmfUpHC5gph/OZTKnAe3b3YOvA1xVsTxb9R/LzesaEGxD2+hz3t
qOGWoP2iKF2OBfVupW0wF5WckwaO/rRt+2Mfn2Wq7CYX2NT1cnRefYagZrPh
m2xtHRgLPXx9twHfk0Gfd6uSCFJApV03EECuIYeaAE2Dbyd/EaFzWwndzTbj
bkb94s1aEBZhQGJiw1QwGoM5NROj+AugOP4DIlC/2S1OXiSf7cUvBkLmP/LE
LPqE6FmOhmmKdNiJ2tU7W8WJqwTZfPxdrB+AoaVrpxVIV1xgabikkK8eZFJ3
tb6OcoOkYS3WdkIayWuRUjzyqFzpgAEjLYfHDQFKL2KVKwqEt5UROfE05O9u
SLzoVa+LQbOjCSgzFlbm1RmXK99SrAqbcreXFYcNNIEb0PI1FdogMlGRaKJo
DQSQabTrsB04hlPpF+AkaiKmIFiqXrKpKUufKshS06kYplp2G6S+Votf4QTx
UiwZCcq4zXm9jjqQZcoGTmrWkuWau9w0pFfMHChlgKati9gapmuZwF4I6Per
dUnWtm5+gA6ZNrhJR55d0HXso5TZ22vEIyluQvyjGgE0wrYmPqwzRVZJgUl/
oG11EnAgU6OAty5V0gSVJ15hbZv4sT5XukYBTGsT7GnLmHBEsXxC7trmb5uG
zQp0EBhRZJP5e7jAPgf/fZ+tsuDYZPkz3KlHZo/h/DdWwgsY6aRQnNHVtFSF
gVLCBhiKSP7puhunHYlbRD4wX8xW4yH6zoFNEpOXJJiFREjzGo0iib5cBkmq
zcZQN2YRr4D5VRE/m/lv3sh4O8K6eE76Qe4jqezKesKf8O2WOjNAP55RzhAW
j1ErPskZ9OnY2Pbz7Wz8+/ZJwiS191NHw/lchIXqfTXdrCvfuGdWoXPD5ZrC
sMFfaQ8c6tt1u7TzjApeJfDH03pOOfj6Feq4uYUp9ekklTKK43HUb5BNF+oQ
GBVL+IywiKo3SOqC+EUp/XPuq0HFjbJfDYtQXhrdHsrv0nhBBsmn7PIYl+eU
iYPznKJaCyumbDpfAbzm0LRq5fsLsuAaryqUHVPuuEIeEqZwoX6BdRrvRflh
+OoChN4Z5Vnoqz5B1KH4EOeXwEIuq9Mxpj2ia53g1fTOjFPXJNJV7bREY723
OKt3hXQyThvCr7DUlmR+iKHEEBfPbrBGGFdW7K7guwWnEGn3M18um23JsPXZ
HGkb5tkSQi2vxvDZGLMDfUitKaY6cqtN0/Da0H89Ny73kV4WMcgFMJpOgMDx
OGNQS7WkWyziamI89Pii7aJOMhSWZnDtU2qevF61c+1NicI81uTwdYNN77t3
oPeqA3+dPTc0UEgDUGkldElt3SlTGlWN8IrPyswgUOd2vZa+BX2MEzg22mik
F9m8UKvXrBNM+lxgxP9sVV5ilHYSW4/BQR097zh+WLeLJ0wLjGrR403VEKck
XYcoQ6NuyTbuyEtIDPpiuWaIU7cKmJTilCvQfwIh7sYKn7GBj3iNSyCQFYUF
w9296movZPvt4Qd8KbJg9gCcWJKeJxViRtFCtRpEQmEnGIwmgSYEE7i9FO1V
zt4BszdtHXDyT7terRnMo5i4BxHIdSJvVUpfkp4mcVCL02rE4gRFW8OYemmq
y3hG0UTaQDPulJzLDRXSQmdEke0kNnE+MVXTAIDtclH74DE/vRoOE2dv8x5V
OKK6DLq58OQZVZn3ma7m2oRcCNkvets1cUAKqXGbQcVoviBewOf+phoyy9+6
PG+QWBG5/Xi2nC8dNXqqVgtKNQUa5IsaYELrgkKCOqRNcSyi92cRG0Qcj2PZ
8RJgAgyvW71tWSdC120wQXE+dyp3kAxiO28jndUvKT7aH/xsxsUxtOkVJeCe
aXtoA/Gp8Xypnb7jcDVJmZc9ClpQ0y9T0JvYtLJniuhIbCWPMWIbIRKksk4a
DOF8Ev7l3H/6HxD3fvuf239+C8/8GArAvca7+hXJXeHDH+Nnsj/8zG+Hdcnf
4ve7t/eSTfVe4QVtme5HXQyqsPHnmRX5TyWuHIDmH8gv9F/5lVfarSQdKLOi
f8mPRK94C9eNYXRnL/LojYa2ln7+7ymYCrSCcTNL2U0e2OlAyV8f9czuwZ55
ZvfWXuaZgAFj+9fYPlOb3ks/FoQqct4ft57rn3l37TNbTgyODHZ5+POx2n+r
m86uJ4OMcu3NE0NYHS/xWqweQuuPxmqG0VEPRkNYve0ne/NzwL6e7hky+cO9
4pOz+nwc5KlxbCw6o1ZK9Xpe3d8J1DfZEOYiA+96pEoS0tLxMUpQOx+c++GH
a2fAqERtGqjZarmKFhk+71TOElmFgtm8KAXc5ED7pdFbWL0aTcH+rfJ0yKQW
SnodTpING5V1WtVagiX7OhUctUJUEH9FXT5lq3b09gTfsjW/Q0UELtijzVkp
bUVEaA5IjqcjsYoUNjQjH6Ub6Tca71sVRegrCs/PUWaB0W55yG4BAw1hWrlE
I9yOzsZXkBoYpTQVMnA5egow0J2JEHp/MprsMzwaVXqnfcv2fM6kNABgUYTl
jCckiyHqoy75MMotDFoWyHtGRHHudxhBVIqM5w2J4Xkx96AMRup0vcZ4rIxk
HEucpIDmHvKleyX8zpfwhxkwcnrEK7GCJmjNic55g2XU1kwF6orXdaLlRV1G
kgWFObFlI4bztkuP5Vx703ZGNoDy0EM3bgOCNpUcwzyU8Iy0qiH3sNwbG7ie
6D5eU9LkVR/3Ko3LuSNReq10EjxXnIhKMJ5TCLiuxQrJ/DT550JJL9qp174p
jFZSdnMBPag0zEHd89UpplglUQ1mZKGRXYJ6pbkirD42s3I168ZcOo3AKH26
TKyR9euXNl5OjX2REtyFvizGQOaMeQYj38XKtsXC5pUitKVTAjX7iKnPgLZv
24aFiny7vvAPB3hFXEZ7SAU2hBZ/hGJqEqMLTnAhdcig88BtQztC3+KDy7H9
T5LVeEepWQ7Tmyd8/XTrMb1WGYkIammIDfZuvm7D8emp7YVYSkIfsSZX1WMH
PgITIXS9H4pbQsPgWQcUPfPhg8uCv1cSWBiMt4ZH5ANNpGfqlvHBbmY4NgVZ
2SG7LWoFt6gR4+k4S45cJ4MaX5wBAeGlsfgyvgwhbkwP2bbgLY0mAzxevxLq
aA88UZcltGoq40KM7ZJtAmcSopTDc3cTrpKieN2EanVOiQQzOo2+/gj8x/z+
5iqzPsrYlvj6paQYEDrQeiggk6ghBeVSZKYJX4NDBfEUPVTOHZ+tudMV52tt
py4w7kiBSWX+/A5DRNLxiyfEMpFW+cUMegwmznSRV59X8oy4GuOsU6FwIwKH
qzu/LtubDYTsjeaikP2dGuNhHrBUmaaU4B1tLEuCgLBVFhC/LC40HiDUIFTi
2lVzsaVPVzV1YCZuKb3DgFqct5RLDxcmsyt144b+gqnZB5Y93XCb8Nh6ypCw
yUk5VpOYzgmVsuDVIuEhFmIu9eEzdJBNtZ4UkQeZKkXn7YFdZBDsWPoIqgaC
gDi8hwPXQc/BS8tOdPGdT4sCZ82nVIizqqScg54WRZRs1loVnKDvu+JaI38i
nKRuFOkxTt6+080ab6UksdbUDIPKAVJhttDKOK1bj9bLQC7UFhggdVZR+UYp
lIaxIXWDNMLbdEFr63ZGEppRNixglb7MBhayBL1OWIGOKknIcnWcim9qE+7g
FxA/kBkBBnEECsiqLAJgagZ2H/cSp1Qe9NfDn5a2MsgY8Ak9bLEEEgjd88YA
IwmM9IWJtVqYuQiUTOGCZCsVs0dCNJHHc5yyBR0CpgsJlAMKL4ghL4nEDkkh
whIop3urENKn88SvV2wv11LBEc1XdhW506yOckbhLXZ5AxzLq52GgMKmedza
V3mjmx+c1Hi27Ot7x/VB0LEYJOBXLQgbSDQUb83SRkOZHygpt0hTXUmlOjpR
ZS9WVZXffdSxD5/10SyO2jdI/k0Mmsi/z0SXYhdxNxXX6BeLPE9TYJE/orBw
hzmb85RyctZcEYJy4MrptN2gAz1lfy6fbyA5mZgqCEg/xjZvuLET9i2/NPTk
h0+W8hCscgzXQho7Ao48RSckRzDQGWmgA6pAG46h7hGQAX8JmaeI3aEIpSFB
qu368DazFHKJa3+HXaw2hn4t9NPC2/+xqYln+JJ9CCIMXwNdH9Dt9ctvtTXE
zp4jFvA9LMc3foV5v6eKk1XM6CgKSKICUUINpXkdlTArg9RdpmuNsiRIROKs
vxCBSsGQ8xKE5AteMXvorVYulSVFYeuZguK2PwPQ8vg1SkVFmbvrUWQkmaKe
5skRU2IMlAiV0FKmJDHjGIyVBw1Sz5tENUyk4QU19AjJPDIInbQkzRkFaLkc
pQqxM2/5cuUlSMUL5CQUPuVDDepViDEAKgTUi6PNHGbyrjqJLyWHpK+KwyJA
KPP0OadSv3z88O7tL6Si3gAoeuGkwj997QpYiIifZrXfo0phmhd/j3GctNce
dovMVmuHF/VX5qp4dhLtrnV6JEijxm883Mw6Oskg1Drm3/N7B4dHtyZIxqVo
pV9PU62/18gNXLCVv2Sd7v+096XLbSRJmv/jKdJYJiugBgAP3aqttaUospvT
ukaUpnesrZZMAiCZEghwkIAojkxr+xr7evskG/65e4RHHiCpUlV1t5XarEsC
EpFxevjx+ed2mJrILUsnlTCxDEEQ28owXs/Ura8qwNH5Fc1CL2rTl4HXXNSy
yIxKwpNW1hUhpaF5u+jGXIS785zqO1LZSWw9sYvRN0RoyzN69ZCfLBdI0UcB
ylJMW8Tr9XSUmucWlCT/xOl8trwArjcKWxcwDjAAm5ZL5qvPsOh08ZCQ6OzP
AljaLEmLfAurw3ZzuDYXknuef5wVI55er6V6xeEcW92CQKul6OMJ2gon6O7j
Rw8oF5j7gmKubkrX7LnBISyuhKG1saPaNcL8IpPGqcdxkpdnWedo/agrVUv9
CTgRdLX+mu44L+/AJ70tTr8FZXBwmdHZSdWKt7mHbfKvlCITldP6ZB3Jo1va
3rp81xdTYx73XTNYQ7tX2rukx/JWJkH90cHRURXfyKcMx2R+Tvcrs/2xc6Mi
7Jlyv+0OxJtLfziUzsXVoGt8GemeiLdUDzQtrPhE3wLdKvyLJK/Ga7HT2jWH
vvEQjLkIadyup4rCtDPJC2BbxVAXhYn6YJQmMZ+qYyqV107UmiE1lh2hqSPd
BHxBbN3d+PKF7X/14+OMCkJDroAmHYVgK8sp3Cq5G0p34ScpmAFITS5w3AjB
pFdeouxMFHHrSTLaSbhYsapLoRWGcVVbBimCVotq5GVyQspKmIOXj/NeiQAA
MYmll5kWvde43cXx6nUJeMbJNehY8g01FGYiXOKG4HMbjiAW5cn6euVKvf4k
bushM2efCC/HeneMp0RcDoq2OKYUseMsYgejaYMDRZPz397tv9l9xm51E8cV
7DzmhzLPKxSS8P9CtA/pKvA6/BLUUYLitb/OwCjLk39mq2Ok9Au2YfI+EbcI
WSdzclxMiAzNG6F93ZiVzZ/uhzNi4wWPcIDgEb25ZAtpMDX1t8rv1ULTaxKB
msjM6dhzR9MvXiTe36HUwGjlBhPPTk0xVUZv6A5k6PcSm9gwFC0oa5BA2OgJ
j0P7LMksCtpnwfN8NrtAEANBzhNKqEqttIk80C/0gb4RypW4QggpBarVC4Tu
YaKJd08b9Dbn4nI2/+BCw8Edo+EJxaRf0D4oJfFmYf2oRHGAtFO2EGuSsZup
qpq8Or4yOpRd0C7Ccvs5CvOTbiFtEfssbDPNzQ9eZpFoLnn5/utsQo45PzCU
D/BzNmbo4zw5Q1IAiSNhUi4D2a89fq2XIptbDwcb/n+bTz7Tr7+sfyaa2i9H
0E/2X3+8B5iB08f/9uTJ5s8tjz5IBVYYbizoR+01TaFYcn6D+7tkojmsxEDq
32PEXtLf+5sbG/duIPVW9QjdvkGP3Ioe8ZQ82NzYunt9b962HVyh4cQlPL2S
leTqpoG2Q4ogWF5pQ+iYbI9kr/WEX4Yw3yPw2VqGRUaQwI4LLrPxBe1G2l/o
SPCEhdPhRBcy1SYqXRpEitFY6UwxpUHyMQZAfTBQzCKPkFTU0IYhX/yRDyXo
mbeqSj4GQ5Tf7LScMM1kMQ2is2HBhWmWcgaxS+lc0eZw4uIzXrDCOBdBktda
I81xgQIKumsavCQdoGwPqSEkv3osNBDDa2axj7VBAK+n2mOzuVY3jIlq6tdz
Wp89ovvnTGAaHcj+cqdU1imSlIcWJgG3oqZk+JZOism44lH8/Jm/lmzpL09w
89s0IvVta+jTZhjRPDQmN7C5Mh+f0RR9jBhl6TIxprLEU0C+LePhaEXJ6Jwa
RjWFZXPgpsdlK0IUxHEVgUebj70C0kj01ECYB/+2omJTP/3n78LzMj+pI/9L
lS6wgSFQU2HSlosTe+22Uu7l5dW5V23nXl/rsN7WR9yB1qAbMDFkTzS/Rr0Q
58TTZ1n//C+OxGQ69C0evr9cHPkHXvltuf+Mgq9c6DW+3rwrJF6l71JAU5vX
ezSDUqqAcqbkjZXW4qt8f8peyiKub0eStzfmAaQSOtzcTZfnx5xyLTTDNRpH
K5RhghMchs5H6+osmIIf8GMqu+PlHDFLrid6KlzR9E8qJ2ckG9NZI8nR5r8w
bbe6wypUpsHX2Nwj1uh1z7TzeDnZelydQfQ9LnBVY0RXAzyoq/0+9lLwBR5r
bbHoMDGj17yt1NLRHDLyy00nWr7wrJayKCQdxfw8vB8ODnSxZuXL+JNCWZYL
vzYWd8kb+IMY3NXXp3NHPuVKTrmydJJQpReRqWLWkulN2f49GReLsG7kvnF8
BzNUpf21qwpTwUunt4aYQSI26RIIyZrewgjYWEL2cT6wRZiO0owMyjMKrLl+
FGA/gDp6MVuI2Qcubwq5+iWWmL4ZurCmzAVSzzjJLoif5WiT1JGXDupUm9VY
Qp2ATitPMQueS7zBC+EcScprob5kWYLgT7al5p3KIXZRcAU/pakJKd/EYaLi
x/BqOIFzVwrWDCqu8vSMwhM3IuoYwRGYEIO0/96vqjNioHkmpBJUPvkgUN7g
y9VNRqJvAFICcs/kcLGdBP+kMGtbRMgl7CKvnY0npPMlB8XfDzhJBclu/2Am
qnEurQ8Xgo7NZIlz7QcT8jql4IFk1eT4PJMMN7rGtQgNwAW1cSvTJdMes9IM
01Yt/FBCmEk+VOGSFkvH1XjUAquvpcmhV+da03XvFzDB6x5geMaGpbi9rK2Q
lcG3pAVaJHQSbgQWJMEzz/l0aV3TBbB1aCVxvPDMsj40myL3W5HejGvSO+SC
g9ZEUi/xCEYccAPGT+DUT8C7i8oUW4UDaLDGexv2MGeEN1/8TVlgkcpWEX1J
v3oO7vRCUG5k1i4Wk7HwAByPr2bxTFZOq+TdeltAsusqKJhMgkCHxegomFPW
RdissWGNFeAh7BuN683jcMJFnSKNwqCZwB/1Ts2OhNOSp0plmuWfa9DDu6Jc
zxbCbq03QeDBnpGIPmm+A8lpy/4TZxidVPj3Ejkt+JLj9xJC0ck/99LCbxs+
p52ykm6ranHyGGNXGTWSqgsGG6K2pGVRSF2IxO2BIZvKIXkk3GY81TMWt3qg
7QudBkA3wYPJ+4QpJbwZgyTy6XAcT5rdvOQJHk7ISXAi3mbZ4cEZunrdfmwl
x2oByoY7EEW4BlljYkap3Lrk46y5QEOpNlHHzNQrBxvRaCIMR7h+SYBntjvR
dENJvIofdVVnrGhIMRQqoyRilTiqO2keOWophUhXV6Bz2IzNuepyYKUsbBOO
lSiaKHXZX9dUepeYmpjMCTQLDHXNS7M2P6InY2w60bknVV9fKTAzB0wnXY3c
bGGSmbmFaLOSxwUw5hDI45B7c8hKDGzzwkaxHPR8Ym8ZRuiGhDOFFbEZT/Ml
carQvRTgLeGqU7SBDYejZ7Q3CVInrOdcp7AlzJisQyytzGXDI01X1jkaHHWd
JUN+j/I6TAlerR9JuBscZAKUUf1rdmsEHGI0WXILRmkBXqjyYrgeOOQVGAsJ
QeSXWwnNSY6IOl+eFRcay2JrgXXAorwgZj5BqFzOIFQ4RGbi8s1z1uFf0R6V
UAGr9rHE+uSqW+XXKU7Ca7IQ8KgiMXocAYAd4vt5ZPEbUpPnYryQqRboEBeq
YTchtCx/AM9ngrW25o9gzOFviM0UFFpRicMT57uaO5RG9+LUjPuSGQdG7eJm
+z/CfY4gCwkQ9SeylRIwabEqcFKrW90hOroLf7TBtjD3FiAQULQlQB/CDdZK
05MKxkbiyXKCI85GqMqxoRKTXFx8X7oYB5o2hGhZgglaDV3TtIUy9UrtJ5ew
287CVgi6LnEphafGATtmSuqpW1iJ4ZuKWCnnlWkqqGEnuEEWMzBUefVrKQE6
/8GH8fgCQPua5p1qtdcWYk7ZJeL9RhoAySNn+KX2V/CJCqlcS3NutAxR3aAz
cYn4FfzoyW3HQIRUuclNtoIBJ4zE+6AA1ep1pvBww7alnKcV542WeU5dCt6y
BT0Kl8QUCx7XXbpHyqrMWLQhxoeoZH9KB6PZb0N6ERKunGXRsYoumYsEqZkX
p8VKN0flFht/IpO1qI6x5mpkleWj1l+vdJG52MzRRdFYV+mgiW3UcnkYsg7D
Sgp/amzCLS8MY2ZlYojLZ3wp0qlaIzdkCEpQWJmobJds0vKMSiBPr2w/bzCT
FJSJ2tyFWJfNKpT/eHYeLJyOxlrzCsE/D89kYHddeLSekyzDwZ4PKYdhJ6vb
yZkShjJC6auKeH8rjUsTqcJWIvKoWFkUZ9wKvtlc7PtEYlbs+tTkaDRgEOgB
SH9Ee+fjKqdFw7y3pYPY6Q5TyCxJJAN41sw891SVvFToTVryMyj74rqkYJww
snPdB+FT54uptJBZvPUsL+HmZKWCE08/goOuBe3LKWNUuM9ANLN+3wmfT0MX
s7SLeMO0Zze1Mj0fj3UC2eIqqBZDpv0LT59RAWek/0t3/ZK/0I2lF/w1oI+Q
gMRGtZAaNmoduXGPw9pW/Gr9Pve6gQOqP8snyOHBlquniYX2JLFFNAGhttQu
cbVtGqNXFMH3xFQ4hhGlrJROSJy0hmCLbqbEu2R5KSmmyt6qshsM1g+065Kf
kAyjaocFSyrSC/0FwWAC+P000+V81piFkWYzVoqXLKR6VxgJpemBGNLPXC9I
6+gOvDxTWrv0V+KEJhulbWJiDAjut1iEnT0MVC4zr0VHF5OyL9Frbz1J4JUt
9srNZMsJOFtZ9zrdxwrEtEhMoMhltTnH5jifjcRj68/k6ZJPDSsJqLfE05c2
5HuUVM9N6gbeuGqWrILIvUBFkLwpeDlgJZI/ky5UNx3TQ/n8SiLdqy4yBCos
9kX91UkWymUCzz8jx/HM/2cqtne83+ONTnVXuFpjtcgXes3EZOSJxrmcxjYa
QhlfUTVM4a+/pGoY19395lXDblE0zDTsag1nq4qGxZ1la4a5f5KaYX+UDGsp
GXbbimG6QWuVlW5UWCkzhZWcSf8+ghg4osN0pL04qhUMU6DEw6YaYCkItTrQ
bNFYA6wmX5vKb/4OdcLatms7G+MfZcJW7+W0Stg11e9utZedXA7Chq1bmX57
lPxYi4Q1beyWImHZLYqEpd652xVIdddUmL1ZfVTi0+l8dzG7OBTswSD7+tq1
TgK3Vvo11q5tLV2bNZaudbcoXZutKF0rm+f60rXQqK6p/OpWVn5FxM7wJJar
XLGsQqUgkBg4pI3yJv3u62wLMSs4b2qlbbHCTHCVbl4yTkJMhdV6OUUKgEKh
pgl0ClxpoKBLWm7rAhM7R+OkaWZWmiQUGPztTRKDr6oOnDclRuHi0KtAHfXb
Nunx4hGwrj3MzS1BcM0uTHSfd2iDXEh3gxPNOl3J+Wxhps/MfOc7eZCFz6F4
ZUlNvJWNV9mSv8DIq7S0ysoD1HrMUDFN6ug/RWBsD6w6gkFE5kvMzqmkOijy
0ouyvgltA5re4kbhXGhRyjhwKqXjET/1fxEBKz5C8HGIW0L9rRdBWSIRJxYA
LIMa51QpCUH2ZgF4ofOd73kAER560+RQMJG0gF3YQCEzWMwRVNCkSG/xqb+8
UIyptuc/PVxedLsGH4/BkkMQODopJo9F98L4MpfYPRlX/+///N9Il+fflM+P
C79LvaLDhDyI2ZCiwnlmXm3wX0UdoLOGbBpdndl8zXfjVfpRKf58zgP4dFJM
bMziJjPXy3ik9K7D2PCh1zR4e9TGrjf4ztwf1f4B3XRKVbY3m5/SIDo7B2/2
aL6ZgEb5V3oZfZ7B2grQI473q9M9RlgCu6PEmeEQFkfxIhBENvuhCPGZmyCJ
78Scz8oVw1xiZfJ7g83Bo0FICBZ4+Qn881C0ulGTQ08om0wc3KPo4W4UCyFR
4vVfdnbhmgAymZ7HRETpkuCc6GnMHQO2KU9hSlsUNH6svR9NZ1MybuJukQbK
asuDDMxDRFhICcrjPsU7CHHGDwYBNZ8XMXXzCO5x23xEyQH3N7lyx8Duy8Ix
oRJYl1QTCDp4dai0AK7z3bCcnxxKkFljBzho+wbHontt9enspdAsXLYxTCIs
KDEYt6pYISw8WBnNaj0ZLnQZhtAFov1m+LC2Wug0SEsQwk32KcWthY5zPP76
vrlWH770jtNn2O4zMe64Vo47i2v9bEychs0b2RpYgZdPx+6P9XxeA/EEp0Ay
tGpECLw2vu3pwqkloNnkJ0n9W1bLQ+kgJtFsCNXE9xn7hDNjh9UrDhZnPqxS
/QcjGEg0icsGJFW7ZlqxI5mPaAiKCT9TA2S1bR+oYqBBijziF01gV3A0gazR
OLcdR9FBfCBXTcyhqJfjGA7RdY7+8ZHTlx/e3XjYTWVcJTtU1YdKjlSN9PZ5
PTfrJomTUtFIomTuLWnFAEo8z6/ISaxuxY7XjrvdhDQUphQSskwSnWt7vcBB
qFBwmG5WWr2GoSTGnNZmrjlB8QamP8lc1bTWCeu+FEOca2R0RdWI4YTUhIJ+
GaBcyqlFp4q4GOF/rryek0Hb0mjNjFOPKC3fBbHJm4Sf4Bq1dK9ImrP8XrLS
SCksJvVl43z+YT5BERhesJBYGr6oJJd2IzensGuyS9UkO7p4Aio2zzWZx196
Kr2AbwpdOGoAPFMYj8GDDYSjIXzRkKHrbEEn+w7MKO3/fOR3D51XPzKbrltP
by61tja1lbwvPBJyIqGRUnDClcsSEEWttcMRbDqD2Ykfw6U/z+xSOi9KwwSJ
VSJ8E3yWk6Vxc2mdmbDN60U3uE4i7BuxUMtyhRKpV/x5PuJUjJAP4MgfNB1P
amG9KsBG15HMX0Z0LMp6XhBf1KaiUyEFxHkLR6dddlBQIeZGjXeemt3EEGZI
Is07mWuT0jmBljNS+RhXCQ4yjWoO5gXTiJdO/jAx2hZFyYUwbO6tjJxqqtQ8
a+lE+hM/JwZrjs+PJABB4MFY1Lfx7pkdC8Q+MgRFMjEK61DxG3LPNkwNB/zT
oNb1qWcmSdfrZlQSLAeqnq1U9gNbw0yB/MjSILbn3CSvIoF05ndbDaNDHRyg
NGwdZpA4Fdp7zNObuCCqMKaqVtIwSdG105Cr02YaFdP3quyyh7PbdpTIL7+C
LgY0dlB6aRNZJyAZCa6eV7rgkkMjfrZiQNStBjIH/QMctgApjckTtUSumrrL
7cKe8XtrMhlPgbB0LW/SDY4DyF7mCJUIFJlkFMGc0ErqFSCXUa+Tur2mVWio
uJBxlb70h/cJITXOcFTRXy9hT4jGhX0+kgVVJlkHEYdnCGsgFkhGj5D9DuWU
/Ra08z94VRsmBbthNYXARQR8JVur1FxQvmOpa9F+MborzzFtwTjRmimL4Iek
3IobYqHLItlec7XlWng/jVUYNlgWSlPRmV1hDnSGJwO3LT/Ltu+x68yvJZK+
u8zCcewb+cAnJoSJxcp1wcrdYZwcKTBHB1v3HxwpHzLDTgjxw4NenaigQFs0
uvJJRRbmfiNcaXAkpFxpOxTN4A6+jWeKrwexZwrc7Z28qxRs6PWYE/jdES3c
YVi4Q1m4w8DxeiTL49/pTQP/dT7KFzlVzSUX/j3y4HadMQbYZpIfV8+fbotO
JL+LJR8sMjIOl08EN9glB2TnuBvnxo3GlGB8DtVDj6vMl8hMNh4krGRbU5jA
9oEGHXjP7KQZ0Sm6qaxmnFYTIyAte8YP7WqwH/LJVVzsis2kBDrx367BtSE0
2QgbrVkKcQP4E4RdFrLYFZBXzzeu4EG9xEc1uE8LZZYLDnHbO2hOxVQyKUVz
QhAXjoBR+A5pOn4qd2nqaTeEwkQhxxEz2ug5yadeoe77x/rnxWjEGgIXe6yd
b2fd2auUtbZYhDNVyE0sQjSNEOBNLPp0nVGWI6nuosQZVpFMMt2b7v7vS0ed
pQAdJxeO00hJ9jfy9W1u3f9Z+OSFWwpBOqOPGgZBGoPGsTXKkU4AL9JO3Jf9
Py2FFI5lZXldCEEXLUpk+FpOtRkbx2w7ItVzVAFbE+udV55HyWGynoMAhJod
2zoq09Cp2J0QzAheeOQikGRMjiddU2TzgMs04az3K6Glgw1AUeCm+RQ8A/9J
wU6/Wbb+V6e/ufWoWyldHR7Oag8/2Lg+arMajp8MIxmCdpvKzZyqVfXa3xRn
yXr/leRplKbseyxK0fK5AIXyngBk6gUFCsHqrFDg4JioYAl1vpxHNTSw6ZvC
GWzK8DNSBkh4wDhlEVRd5Qd+YDyNaXxhV7C9Ed8u9WIckYtSUkxKzJAb8SNu
1XIc33w8PiGHJl5ESU78LlsKGMFTSss9jkxlLC2iTjJD4sCsYN9q4LFnmpEx
GMWTlInvzWgozRtp5Hq3xRxtY8gQII1EhBk25RSwr6Yo/Tpe6MKqBxo6FxaR
W9Or0yAiJKXoA3w/47y8cnbflJYjo2UuSSGhiRxoYUcXcvzDMG7EIsHYSbJt
FYAevSC2VDXDD7RIQS/Uye0Ge94ZmQCFR4/BtRuj0YBlImqDCKTpRs55ZcJX
mHlu1XVFgSRgi0I4KcQlQs1yA8qXc7xHq9ZQ4q7uACXhYlLENd+wSAv7NGvR
Z0I3Oj8lEXFK9PC+1yFBUUPrmN7o7dOawsY/4WIthBPqeUOViZ52rddSp9zB
mbOYCVUtI8ubK5uw+ULGz+lsNhJHojAEobpyY5ELzEMogVwIuzDzFSRHP2xi
0PSzJ0O01uNcXwciZa9SUCblCZMJNXdXSaSA7vS/Z45jWBi4p+gqQtCBx0LB
kzyOict6xJE11I3uOfODtJ4yFsN3kmiWTy3p0blJnOShUWkIWlwTtJQEUf5e
qkJIhmKYr0CM4eczgJMAgpv4U0P+ScVEEV+Zt3m52EZB1GSTS8TzCJsAjrjZ
yYI+6TE4G5mgyCZgP4aq0jmfLSSjWi6MY6SYOGiuJd/RfKV6Ga3s+1XcL+Tn
xTySybpk9K2GXIjh833H0T5sEAUvJMfAFI8pU9YjiaMZHZbJ2gSRZIpSeMV9
2Xiw6I55B3lO5Co0ozEaxPGcIfHgjeKVUpgtHtkPXFPtDlpuDDTg5Q3VA00s
smNj8bRY3krqSCzpatVKKxqyrL9JirdLKn9dYtFCjmHLnJOfuVqAWu4CbtfZ
di/olp1PuR5GmgarvFgkb1+EZb+R0N0/aToosTy9eMWlvLcGgbTCEpdDmOM2
rqQQWaLkagpQoqvoroBYRhZXS1pYUia+UuOJwRjHeoDpVBeK3fDbTVKy4jjH
5GnSJKhwQdKyS/lTRMn4wlQ4FSZjyuIIHqofa1NnoggAwvlfkql/KXqN3iys
7DOj32x6OoPGSbe1hQAwuYtjXxg04zobM8p9NCRY+bGfsk2nqT61wxoySNkj
ONSwtri5zRw7WeUsrLKAaesLrunY7XCWz41ghS8I7AarSPiNolbJTmAT562A
XLgEDKeLTsanfvjnNHx1MvAu/EhJCucheuNVMqhoNOZctpWLzh1xvUd8b+Q9
0H5+X0bW7xBVdVT9Jp8uEksvlmS6HukTYkdBOqWTBcFoAScBT2JhJM44epEF
nJemFkMDKKXBg6A+jHqaV0D3sA9baBoCLKVCNgmXltYgaHZug8+o7s21BOna
Z9qE8qsGSIzQNlGNndl8ITB2f3o5MkEEtj+sRlNsH1SwRmJ5mU6RR5OKSlfR
QfsnrZxtxO0hxHzRu4oaxw3Dug72M8Ao9uOUFGV8luBHV8KsEHKi8FxP/DML
rx8L57Z/P+gIuPwHb2C9ZytIIFUL9J2iHqAAcE5JwSxXvBZy6d8ccYoaaJIS
pSSHFCO74PrB4e1UAg0Fv2QzxiJ6oc4sIew53rA+ng7nV5QASm3w77CLSiEz
PfYnaDK+EgD/+8tFn3j4/Zbs42HAegEl8fcxVvh2Pm2OGonvmgKh1vccWIGo
BfVD3wOd6LfxDEfei+GH917AkNZDudjJOU2ReY8rwLwmp6Ut6VkLnoc3DTIr
rCNLuD92H4F4pB8IjYYJmlfUw8R3EW8dxwmIMY9Nop26KXhT8l62cWUNlYro
+96I7uuiGOwotCMM/KjZCwkGu8qNxdU6W6SirQtojGjq2//s75HI7b8SZnmB
00iIkkPc2UkxnowEG0cPE40rrfC/ejX6wL/xYgFMY8r3MyvHbYyyGm/26i/D
FfnERXDQa+Qc0g30uusv0I/jSbblB+T/2d/iXXsK/j1xMvjzzPlPBWX8+6e0
Vk5SdTrtS3AakJHoKsg0Nm+Cm1q5RevEJMug6wX6BxOTEafLIgCRWvrQyyaz
U6+gUb0Nv/nG8zmdS/nHYjjoiuwK+Z20DOJjtZBxxxha6Lnxvq0Q1vjpGSRe
9+3/YFb+BfsaHdYYghGFFaTyAFqOgBcyzpUxkkS2wVq4UNC9Xuvgmv0wmV26
fEQZtsjKmRlXGrR+PEErKuNE7Z6I0Ats4yyYI3Nojd6MAISR8BN2Hs0nbR0u
U9vOqajUZQGWESfd2fzSlhPE4+GUBukJX+XKTu7EsBIobNz1KXD5uZwK9Tpr
9bWAFvadEcLlGATnWkchk0BN6kTU0J6C1YrE30JZDjR/kVefd4N/NzaL7yqP
4YjlA4VayFtQHnXdYnbKCX/ileSAdrVBVWpRdZQEShnWmjhHPnnBsBiDA2zq
RdSL51yapqN9paQ6+lW/nA+PkFXmVZf+lAN3H5OaS6UwXbGEKeBsvQxUL5HC
XRiQvYZ2dHTkSCyubw42s62NjezVX5xIrL5KrD5LrCdZZQJCkRgqEaq8XV6/
fvJoY2OjvZU4mux7snO/r8rpJ9n28+ev/trfe/Pqxep3DAYDjMA9HbNZgUNt
pYOADVQ+hA0n2Ai/Wc5QVMzwvA1n58cwPbGokBBleskwa228jlxyHQntCNbC
20f58CrpEd1lag8SM+00hMfdcTtad5DtEr9JIezp5M4iX2LwqtSuTBkPk4fS
HQLqbYBMoMwQQGM/wH1QiGBKWbf/HhJPmCmf+P3jY2xgzYZ+SUt2AhHVDX5I
3ifFZkQXFgy048k4qM3kb5sm+rKfgZzczv8lIDKsZOk4zWiYQMDtz+hWGSrE
lh1OXNciakv+dJ1GerGmRuTmIoYb2ixeneyJgerVJcoC9Hp7qRTBzIMjWU5e
ZyXFcg5Vyh+96JugsEafr+xyVRjPhDEZCyKzwNHIECqmWQ4UY12Eo5mQNuDa
+30E7w3fACxwPCSaUIIeCHBqfy4tiEC2BlJ13phUnc9IsgmgVv/RFyloHwSK
hpdIP8XuCJvDa+qR4/qMvfPUnIvNQcWt5AzBOqom0wh6nOwmzVOKXrsZlt6m
Kl2XqcTjDYR2vm+VocvIG9OLvrRnVlWG4hXb7RAVpI26lGfMFGjsFlsLmVkY
tmHaNtAyQyNwzjeI5E81AQHLOraxV3UyKMQemWdxxHTXaLnXY6X5AM6p0lfA
uiT+Qt/xitl+ax4dfE10M34QGg/k98NpqPq7bxF8Aby54GFQxJGsdcXYPQ7m
uPoWW5JxknWB+0IVKAXOcxEGcXMV7OJaUJxrwQMl2X15VizGQFCPIBFOrNJQ
Nfq94RmowxpAoAMvhyuWjmgt1b661ATyUvTVX7e9Qvf58+wyLy94wWBmf1dD
SR8Ez1Jlfzv3r6hZIdQ4kUY4bFeGFC/msJN13+VqZLKzV7KQG2VcR0n3qORw
IqQ4j0NK+UIjq0ROB4JMbNZVpbidXS9sKEJi8pYl+CKH8ztxH5ZdTrKDCeV1
g3ImrPD5CUFmSVn+/Dl5Y58OUR9WSygVTnVcAs+3WC3JgiHfFTzd2NTR2xVE
RcpyF8uE1lCjdOaEDaCYcmotKyghXdJSi8NVbOX7kR/Rn7XIq70beWURpInr
KolRSZWAlCF5Ecsv1xfsrfHX8gt6aemOYKUEsn5y5oixEtN6DYWloct2erim
rPJMkFQGYjhanukYgYGmcIZ6nykJuRSXvE4me0BwWdK9uSzhBqWiaCqQyG81
S5bI+nvJYb4wYQ3acnLr63ojCOY3ilcs2A9h6SSghZ6RwT/InirGHEZnUX5w
sYJET/vCJdDhLKNMqcA5UrCI4TNp/fWo82ywRxwjvNn+O6Fm0WTpqjGAgbKd
mlIoeFTB7TR+4mQAyNDMG8g5uNJNeJ8fz3ng1pL0PBpgGfBpjTLtRfGp/+7C
/wcxGIExJjG3zttXz1498Wbi/FTCVQFBogUyJUlT6lqx5sLx/WNkTNA57HLl
8Uq4Nk8yAZKgV2MuAh8O3oFysTZJTVWUF+ruR91X9rWHSpccidCayMkhtS5q
lFBujDTYt1A8rWOrVtMXXncPHKoVKvSeY1xNXg8gBurYeaTM1lvS9pKRXSC9
CJosaeRCzB2I0StDg1I5Wy4QyGvOXhvU4C2VLNW0MLEJ1TQ7aFvZ8dlTzgBo
zgykSqdS70ZUbhcRBX7TA3RIP2CkQUpoIdcENFeTLlAbpHhfktzWhE+e8jN0
Fiz9OnzSrcVRe0rLwzKhvrguXr7vmfJXgsUYL2LQkvMeF/BSGO1dvFB6IXEs
sMwZgcgujFAxi9DDCl6h0HrWGFpP2FPLvsJd+gbuQJUbGlAwDC0UPwAPPIBU
GJ6eFCGh4xBr1ArEl+zdtqbJuD1hfNCS02JiTn8xLjVxpFEM+IeB/C1YWTUU
4ZzQP+NA/dg1vJ2xJsFNrxobgBVpbMBARXuQ4e/1AmnSv6RojdYpUGipC5xB
gL8QfwKXP0X1YeIflgoCDRCMZnASNYbkQGuuc4oHCk0wOo6qsnmL/IOANeNJ
Zp8zXzwUc74AfojegCrvIUyrkOLkOiyXx+QxlmLyM78Q9GhCiisoZKp0o3Jg
OJt9KKTpZRnNM9WXEs0/so7F9fETByePgGtEOvONysCl4zHJl2r9JfBDSEON
aMVe8/78WMwm6uu/mBfTIXt8T9zEWyOLSKZI3TjLP0YgN27rGYr0evlN8Nqk
CBkBoCHcSVXpJYEj/xLylgd8IfuTvOmDrFI/fqrePc9PNY+8jIDfFNHchgZU
AmOeUwJV56PRnPp8nLPqQeVW6HRbjH1kW3Ep/a1YnFKLmTQUlIGngLdB/lkt
hsAHjq87xi1TBLWQcu1SGDSCJkhb/BFVGgKdMn5Ft72DG72UfcSgQ3+EX/2l
eU505DoWifkyo1cxx7W4zfm4gQNCQ1IShS5bNoo6UYn1Kth6JrrIAeHoLuXN
KhMTyqkHRIyz8+UPKk1NJNNr0eC1wpLfn347hdKlTAztVUyq3jHnVoG/BF+m
erTQqTeERveihxe6lUbM1pGFB8JEWfx7vJ0g6fDF3FnTizAFXnAcqeONM0e0
4gFlKBZCokZSDE5GGsUJV4uQ4nJ+vpcUfq7k6QhviL4t0oJPT0E94va3X25X
68L+VP/jBOGUsD6+pepAWqSIQEN8yPtwFqmOcPXF9a/7I0CuoEVwGLAk2gNv
HAlpQWsH9EWDCn80iheJNpkWLMolWV5f9UbUCdehLJn7W1sPfu5y6UO64S9n
/cvxmJKvQYcv5V7YBnGMWxh/WvT56/9BdIQUZyCmtYmGTHoh2soplQRinGKp
SRq6Z2NGqvr+7TIE2OsHwfjmvEu/n8JVOaE8fbXiGU5BNWs4pM+lnXK++unx
Wuudsst+b6Ycr5R+kE0qMsh/WIJvUaKlCBOlC0UQQdCdc1ogIgVJqayg7mn8
2WZDtU6gsxMoVSewAALdZNs2EBVHanGt++Uk0LymEC7oY9Ud8kQtFyKbclRg
rFA+OLPcK2YSCElGmDiZ0Uqxg/pU9DCA5TRWGgDuma1WVe2kAxg+wiz+qPp9
8QzxheB61KQ9AQvmUlZFQd42fl8uT0/9y4P2MFOG6WBAK+ePX2eaJn9BD0RE
YOnYAcCV2/TUZcuLEfhTw+XQNEvOZI6ICZVLbTrsDF5eM1HpHMhWcDQX4qlM
dthbClJR6XBHIgG0EE/ck4yNuXNLnK17wi56pKoVuRKyDd+oyfQ6xDqoXfOD
YFSZlEplOMmqUV4CUq3xDmS6PRNE8Sv7krZbbCZwJYzpwwVRUGVWlMk+Zbn4
2r5eViZx1h/Trz9/ju1HAU3OXyBcttPb+QCQUb96Opd4qHqFM66UprlDTtIC
pWN6ofBslsJD6mV64iZYlommCNgk4G/s6+J6lzuMQRJI52Q8p84RouJAQv3+
cpiD0Wdvh7jeoGGs7e++3VuTkjEamKXCD5hBsIhksUA8VhQ6GhRkSqDAKmrd
OdlDXpNbRDWRYIJj2qfhA3+6oGOfwjLvRmz78TjUX6R8rUSYjmbDJUk2mfU3
Y6WzkQNhvs+SmnHsa5HFpc4Yju8Ygs5jQbm0QDBt2jlh/+CaurjSiU/eSIUI
SGcamVqZPGWTMeW5hArvYay+DTNaeNDF4acmvMbS9pFANInqhMAAJOXo2tv/
e81BmkSoor/Bnjj3QxaFQvZ07D+c+89ud+izztRf2F3/u9UHJbZf36cZbUL/
TfuCB2bbTT8prnawjabVdIzb9axb6FcNciSVkEZAnSCurWXLGtkXNAzrwsXX
/kyQpfxQmhQdGxAlKP06yuFGfc8163vZrfQ9t1JduZm+52D9/hJ9zwl89g99
70b6Xtiuf+h5/1R6XpBTt1X24g85W0ePljah/8aSo8BUTL8wV6ZwNKg3x99z
+kPxDDc7I5o98j2WZlDvjJQTmkh+5g/V559R9bmx5tNwL6/SeLLK+ciCvyn9
snIG2rZtwlhKLbRrN6vUG78vswcP7z1e1UMuLbC6l79Fd/TcHZLd8RWT9qt1
K0I0/m6XkstjfU3v0rBhllVFZH0c/PWvNRASod92IL/W6ZmNbtnRxnn9lXoH
FNQhOyMA1f5lXf1VZ5L7euvj9Zv2EcHUG0im32JtrT/r73jKuLzF7YX5b7v3
Pl146V4eFn/PM6mx8N9/62kc/vfvSVJE5Rbd+TWWTEN1yR6pe7dq0TvtQx+B
s9vE735hSK+xo67S0WZvVHD7cLBP0TItwKuY3Tgfu5sGBVc6iVxTUPCWTiLX
GBS8pZPINQUFb+kkcsZJlN3WSeTqTqLsH8VJlOyiPxxF/1SOojd2bW/rLPrD
49LucaH5tJVkfZe+ztkigdFf5GwhptnsG8aZbnR31h0xru6Iadh/wVj7Rjc9
UUhNS8zHLpLkzaWu+Sc3vMtvcW3X3tp8Q3PaPieUyR6wQXGGOSkhKNI/uVEn
wOjwiSJIaep7dRxHCZ9peNqUye3eCgNkr3t3IwzQDW+r1Rigpuve3Q4C1Hzb
u5uEhFbc9u6mIaF/mNs+7sg/rvp/vKt+1V3PcuhWd3xGeetLMR3orePQhr9Q
QtadzvTwLCfiVJSeXi4AimU87CK782lro7+1ma3T3+727z/N1n0Ldz7df9Z/
SBT93LmbBp1iV7466IQUfBaaYxHQYmRmRLt/g2TFrpqn6e/xawv1bPidoYwn
CBBL63ozx4BLtDUDKcKpL/UbIlliJedtuCwa7grqHmlQ4elK2T8z+aAxKEOu
j7+q3wudo28AFe3+0BJXaYlxGv+xAnM31xVT5WdVUM6IJ80iPYxuqUb5QOqj
FJxvOkLfAmfU3C91ZP299MpUudXo0u/VNUdKdIYqfJQKcEoP+X301H+wLPsv
8+WczvR51tl++nKvmx1cTRf5pyZQfeMf1cDTMqlldv2LSn6RibKYW20iRR20
IkTBhWoretxSE2yo9mw4TqwQ3733s9w/9DpkFF0yXXNscTw/R2bWO6/dkI0D
8SlsYX/7692dwZvdnf6n80l/a2Pj0eam17F/pLeVycWK+mWcBOatSqEDpObf
vd3rP/J92NXBgHyY+VojHpbZG5C4on0jkTaLt0TMjQt1jKFcK2vtmpdH/bmK
uTUXn2dFh+bj7uNHD36+XbslGILOaWvFB4nr0v/594OdP2+/ob9lP7Em8XAX
X7z8t/SLRL9Q7UKeDG381KSMJA+/e7m/8+rZLv3g5audN8/38JuNx9m6vBzP
P9roP3u4twdFpvnPnU+7Gxsb/b29vWf4xeYG/XNzw3+wRynUlJVae5WZT0qV
Rnrf8kKsI3885+YJZxgStwYg9mreSEzPMKNKM5oktkM1fr108EoEAbKhSD/3
++GE2Mrjhht0OdlnLWAk1vTQcgEd87mco8q+//xZqhZqQOLLF1lX+bwYyQr+
wAudvpAhD80v1e++8sX889qLE3BD5cWV79penEQLiNfCT+7nz9PxZT+NI4Qe
JR/7HoV/Q4H7oZMdvK581k1/h89+yjZ/CJ/QGqbP0Cf+mbXDNb8dn+3/af+t
/+/289d/3uaBS/2jZMDyWdtAE00Xz4YhCQdEJouLf/GDMh77Sdf8RD6iwfAB
l94x11LaO/6stXeJFi/aBKVk179Stbona3UDAyCMEyqrDHMz7CXeSpYTqrKT
7Fe3HoH0Ms0pk2+1Y/qKvn+F9i+R3txJjKvSO/msuVsHqjTeaJp61X7WHnAP
B1s8okeD+9p5Vk3sH94QZnZrwImmQaTff5MBuesGJKuz0n5Lxtk3nWwbZ30L
mc9/o4WicfnFSvsedlfbBouAjMoA7BfXj6Bxr9c6nY5HJL3J6O23tOMXNZi8
fXSsjCspEWx/d/bzadJCXEj8RuU3/wNCeb0yJebhILTpL1FgZ+GfNKFrfRLX
awP8f5vopgWt3pH46EaCuyY5oJo2i7Q0Qyt5Y/rVDd8cuZ/qEi162xoOjn2y
1ssIaKn00X5xs0utqQ+6L1gVo11hf5Je7Vn80HeT/rNiX8Svv82+iJiZquww
X3z9PARBwK31C14JdERvQIP9qF2ByXdf341bnFJ5pnnbhFhWBKjYDrMNCbPR
q3IRMGGyfqp9DxuEdD/9QT/+IHYMn31jiXCo1V/jxMM8pRFUHyjg+majjChi
VAz0QwXZn7J7d3/Y3Hq0nJJVOf/ItPVZ/Kd/Ah0wHap3de1/r+Fn/CQZVvc2
+/e3YSA92Ow/3Ma3/Hv69u5G/+5jM6RQ57R1TOaJ1kHFaqm/66ioVpDUT9KY
1Pqn/uXlZZ+4TfzNOlEL/4XX5XKEVm/sLEn8JtvsuF0UbJGbIFikg7beDsR1
3Nq1HVvLztEziLfL3G5/p6bp5sPB5t3BvcQ8PVucT+5tbPY3Hz9+vLm1de9n
WKjsZzRJvAjQIc7yYv/FrpmFGGB2nf9GbMZP1td99wZFPs0pOrbubb7idApX
yDq6yGL5v5NPdG85JwcxhRa5EppLre5iqtWPwA9ULGLxi1Bgj9ii3x30tw92
9vedsZfBaKbsKDyvVM7dN4jqz0RHIoUy6d8X+dVklo/K4FwiOk/qrWNXfKTV
kTCm5j3rvghOKXYARcudfUPgzuMkZDhmHmw9/pndPz+q85w4yf1TM/8j8gf/
Z2DimLpAindMxaMwZw0v9qprfoH6P8vJONkA7autdVK81EM7YPsSPlmZk9qU
SHRCIwCYFk34i+NAI8R6NQ8dpKfXmT8kTAoIh2isi8mV0wptqBc8ZiKhsjIj
ZU+eGI0bZz7ugawy836se5YDjn7CvcFmYo5W8ZKVxSf1D2bGP+g6m93s3b9s
bGxtZJ2D19s7u91e1tmSz+5nnde7b3Z2X77NDvb/9LLbc5278tWDrLP9wn95
sP3yGf3knnz+1P/k+buD8Px9/nz7rv/81buXz+QL7LzOA/pya2N7J+vsvnvz
ir+TilBxKzomnSUnY7qV2BkqdO9nfhoonnueTzJ1o3blDvSD82Pxffbd29nK
fGd2t7JH/i87TojxAAatOTV1w+TqMPyXO1v372w9uLP19M7O1p3tu3d2t+48
8n/ZIZ/0MFTGg3CoiVN/gJ8+C57sk8ny5MT9fyWTTYgVgQIA

-->

</rfc>

