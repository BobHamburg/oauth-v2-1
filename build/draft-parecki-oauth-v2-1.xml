<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.14 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std" consensus="true" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.40.1 -->
  <front>
    <title>The OAuth 2.1 Authorization Framework</title>
    <seriesInfo name="Internet-Draft" value="draft-parecki-oauth-v2-1-00"/>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization>SignIn.Org</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>
    <date year="2020" month="March" day="07"/>
    <area>Security</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>
      <ul spacing="normal">
        <li>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</li>
        <li>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</li>
        <li>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</li>
        <li>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</li>
        <li>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</li>
      </ul>
      <t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>
      <t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token - a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>
      <t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>
      <t>This specification is designed for use with HTTP (<xref target="RFC2616" format="default"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>
      <t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749" format="default"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252" format="default"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics" format="default"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps" format="default"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750" format="default"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics" format="default"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="roles" numbered="true" toc="default">
        <name>Roles</name>
        <t>OAuth defines four roles:</t>
        <dl newline="false" spacing="normal">
          <dt>"resource owner":</dt>
          <dd>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</dd>
          <dt>"resource server":</dt>
          <dd>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</dd>
          <dt>"client":</dt>
          <dd>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</dd>
          <dt>"authorization server":</dt>
          <dd>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</dd>
        </dl>
        <t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>
      </section>
      <section anchor="protocol-flow" numbered="true" toc="default">
        <name>Protocol Flow</name>
        <figure anchor="fig-protocol-flow">
          <name>Abstract Protocol Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork>
        </figure>
        <t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow" format="default"/> describes the
interaction between the four roles and includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</li>
          <li>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</li>
          <li>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</li>
          <li>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
        </ol>
        <t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow" format="default"/> in <xref target="authorization-code-grant" format="default"/>.</t>
      </section>
      <section anchor="authorization-grant" numbered="true" toc="default">
        <name>Authorization Grant</name>
        <t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types - authorization code
and client credentials - as well as an extensibility
mechanism for defining additional types.</t>
        <section anchor="authorization-code" numbered="true" toc="default">
          <name>Authorization Code</name>
          <t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616" format="default"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>
          <t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>
          <t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>
        </section>
        <section anchor="client-credentials" numbered="true" toc="default">
          <name>Client Credentials</name>
          <t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>
        </section>
      </section>
      <section anchor="access-token" numbered="true" toc="default">
        <name>Access Token</name>
        <t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>
        <t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>
        <t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>
        <t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>
      </section>
      <section anchor="refresh-token" numbered="true" toc="default">
        <name>Refresh Token</name>
        <t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow" format="default"/>).</t>
        <t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>
        <figure anchor="fig-refresh-token-flow">
          <name>Refreshing an Expired Access Token</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-refresh-token-flow" format="default"/> includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</li>
          <li>The client makes a protected resource request to the resource
server by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
          <li>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</li>
          <li>Since the access token is invalid, the resource server returns
an invalid token error.</li>
          <li>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</li>
          <li>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</li>
        </ol>
        <t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources" format="default"/>.</t>
      </section>
      <section anchor="tls-version" numbered="true" toc="default">
        <name>TLS Version</name>
        <t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446" format="default"/> is the most recent version.</t>
        <t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>
      </section>
      <section anchor="http-redirections" numbered="true" toc="default">
        <name>HTTP Redirections</name>
        <t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>
      </section>
      <section anchor="interoperability" numbered="true" toc="default">
        <name>Interoperability</name>
        <t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>
        <t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>
        <t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>
      </section>
      <section anchor="notational-conventions" numbered="true" toc="default">
        <name>Notational Conventions</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119" format="default"/>.</t>
        <t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234" format="default"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986" format="default"/>.</t>
        <t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949" format="default"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>
        <t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>
      </section>
    </section>
    <section anchor="client-registration" numbered="true" toc="default">
      <name>Client Registration</name>
      <t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>
      <t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>
      <t>When registering a client, the client developer SHALL:</t>
      <ul spacing="normal">
        <li>specify the client type as described in <xref target="client-types" format="default"/>,</li>
        <li>provide its client redirection URIs as described in <xref target="redirection-endpoint" format="default"/>,
and</li>
        <li>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</li>
      </ul>
      <section anchor="client-types" numbered="true" toc="default">
        <name>Client Types</name>
        <t>OAuth defines two client types, based on whether they can be issued
credentials that they can use to authenticate at the authorization server:</t>
        <dl newline="false" spacing="normal">
          <dt>"confidential":</dt>
          <dd>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</dd>
          <dt>"public":</dt>
          <dd>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</dd>
        </dl>
        <t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>
        <t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>
        <t>This specification has been designed around the following client
profiles:</t>
        <dl newline="false" spacing="normal">
          <dt>"web application":</dt>
          <dd>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</dd>
          <dt>"browser-based application":</dt>
          <dd>
  A browser-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</dd>
          <dt>"native application":</dt>
          <dd>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</dd>
        </dl>
      </section>
      <section anchor="client-identifier" numbered="true" toc="default">
        <name>Client Identifier</name>
        <t>The authorization server issues the registered client a client
identifier - a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>
        <t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>
        <t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>
      </section>
      <section anchor="client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>
        <t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or "private_key_jwt"
<xref target="OpenID" format="default"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>
        <t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>
        <t>The client MUST NOT use more than one authentication method in each
request.</t>
        <section anchor="client-password" numbered="true" toc="default">
          <name>Client Password</name>
          <t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617" format="default"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>
          <t>For example (with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork>
          <t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>
          <dl newline="false" spacing="normal">
            <dt>"client_id":</dt>
            <dd>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier" format="default"/>.</dd>
            <dt>"client_secret":</dt>
            <dd>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</dd>
          </dl>
          <t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>
          <t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token" format="default"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork>
          <t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests using password authentication.</t>
          <t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>
        </section>
        <section anchor="other-authorization-methods" numbered="true" toc="default">
          <name>Other Authorization Methods</name>
          <t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>
        </section>
      </section>
      <section anchor="unregistered-clients" numbered="true" toc="default">
        <name>Unregistered Clients</name>
        <t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>
      </section>
    </section>
    <section anchor="protocol-endpoints" numbered="true" toc="default">
      <name>Protocol Endpoints</name>
      <t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>
      <ul spacing="normal">
        <li>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</li>
        <li>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</li>
      </ul>
      <t>As well as one client endpoint:</t>
      <ul spacing="normal">
        <li>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</li>
      </ul>
      <t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>
      <section anchor="authorization-endpoint" numbered="true" toc="default">
        <name>Authorization Endpoint</name>
        <t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>
        <t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version" format="default"/> when sending requests to the
authorization endpoint.</t>
        <t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616" format="default"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="response-type" numbered="true" toc="default">
          <name>Response Type</name>
          <t>The authorization endpoint is used by the authorization code flow.
The client informs the authorization server of the desired grant type
using the following parameter:</t>
          <dl newline="false" spacing="normal">
            <dt>"response_type":</dt>
            <dd>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request" format="default"/>, or a registered
extension value as described by <xref target="new-response-types" format="default"/>.</dd>
          </dl>
          <t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>
          <t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response" format="default"/>.</t>
        </section>
        <section anchor="redirection-endpoint" numbered="true" toc="default">
          <name>Redirection Endpoint</name>
          <t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>
          <t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986" format="default"/>, Section 6.2.1.</t>
          <t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986" format="default"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986" format="default"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>
          <section anchor="endpoint-request-confidentiality" numbered="true" toc="default">
            <name>Endpoint Request Confidentiality</name>
            <t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version" format="default"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>
            <t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>
          </section>
          <section anchor="registration-requirements" numbered="true" toc="default">
            <name>Registration Requirements</name>
            <t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>
            <t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>
            <t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>
            <t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors" format="default"/>.</t>
          </section>
          <section anchor="dynamic-configuration" numbered="true" toc="default">
            <name>Dynamic Configuration</name>
            <t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>
            <t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986" format="default"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986" format="default"/> Section 6.2.1.</t>
          </section>
          <section anchor="invalid-endpoint" numbered="true" toc="default">
            <name>Invalid Endpoint</name>
            <t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>
          </section>
          <section anchor="endpoint-content" numbered="true" toc="default">
            <name>Endpoint Content</name>
            <t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>
            <t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>
          </section>
        </section>
      </section>
      <section anchor="token-endpoint" numbered="true" toc="default">
        <name>Token Endpoint</name>
        <t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>
        <t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests to the token endpoint.</t>
        <t>The client MUST use the HTTP "POST" method when making access token
requests.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="token-endpoint-client-authentication" numbered="true" toc="default">
          <name>Client Authentication</name>
          <t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication" format="default"/> when making requests to the token endpoint.  Client
authentication is used for:</t>
          <ul spacing="normal">
            <li>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</li>
            <li>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</li>
            <li>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</li>
          </ul>
          <t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>
        </section>
      </section>
      <section anchor="access-token-scope" numbered="true" toc="default">
        <name>Access Token Scope</name>
        <t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>
        <t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>
        <artwork type="abnf" name="" align="left" alt=""><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork>
        <t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>
        <t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>
      </section>
    </section>
    <section anchor="obtaining-authorization" numbered="true" toc="default">
      <name>Obtaining Authorization</name>
      <t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>
      <section anchor="authorization-code-grant" numbered="true" toc="default">
        <name>Authorization Code Grant</name>
        <t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>
        <t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>
        <figure anchor="fig-authorization-code-flow">
          <name>Authorization Code Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-authorization-code-flow" format="default"/> includes the following steps:</t>
        <t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, PKCE code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>
        <t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>
        <t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>
        <t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>
        <t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>
        <section anchor="authorization-request" numbered="true" toc="default">
          <name>Authorization Request</name>
          <t>To begin the authorization request, the client builds the authorization
request URI by adding parameters to the authorization server's
authorization endpoint URI.</t>
          <t>Without a client secret, public clients would be susceptible to an authorization code
interception attack, where an attacker is able to intercept the authorization
response through various means and use the authorization code to obtain an access token.
To protect against this attack, as well as to protect against CSRF attacks,
the client first generates a unique secret per authorization request, which it can
later use along with the authorization code to prove that the application using the
authorization code is the same application that requested it. This practice is known
as "Proof-Key for Code Exchange", or PKCE, after the OAuth 2.0 extension (<xref target="RFC7636" format="default"/>)
where it was originally developed.</t>
          <section anchor="client-creates-a-pkce-code-verifier" numbered="true" toc="default">
            <name>Client Creates a PKCE Code Verifier</name>
            <t>The client first creates a PKCE code verifier, <tt>code_verifier</tt>, for each
Authorization Request, in the following manner:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork>
            <t>ABNF for <tt>code_verifier</tt> is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
            <t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL-safe string to use as the code verifier.</t>
          </section>
          <section anchor="client-creates-the-pkce-code-challenge" numbered="true" toc="default">
            <name>Client Creates the PKCE Code Challenge</name>
            <t>The client then creates a PKCE code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork>
            <t>If the client is capable of using <tt>S256</tt>, it MUST use <tt>S256</tt>, as
<tt>S256</tt> is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use <tt>plain</tt> only if they cannot support <tt>S256</tt> for some
technical reason and know via out-of-band configuration that the
server supports <tt>plain</tt>.</t>
            <t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>
            <t>ABNF for "code_challenge" is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
          </section>
          <section anchor="client-initiates-the-authorization-request" numbered="true" toc="default">
            <name>Client Initiates the Authorization Request</name>
            <t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"response_type":</dt>
              <dd>
  REQUIRED.  Value MUST be set to <tt>code</tt>.</dd>
              <dt>"client_id":</dt>
              <dd>
  REQUIRED.  The client identifier as described in <xref target="client-identifier" format="default"/>.</dd>
              <dt>"code_challenge":</dt>
              <dd>
  REQUIRED.  Code challenge.</dd>
              <dt>"code_challenge_method":</dt>
              <dd>
  OPTIONAL, defaults to <tt>plain</tt> if not present in the request.  Code
    nverifier transformation method is <tt>S256</tt> or <tt>plain</tt>.</dd>
              <dt>"redirect_uri":</dt>
              <dd>
  OPTIONAL.  As described in <xref target="redirection-endpoint" format="default"/>.</dd>
              <dt>"scope":</dt>
              <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
              <dt>"state":</dt>
              <dd>
  OPTIONAL.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.</dd>
            </dl>
            <t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>
            <t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork>
            <t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>
            <t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>
          </section>
        </section>
        <section anchor="authorization-response" numbered="true" toc="default">
          <name>Authorization Response</name>
          <t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>
          <dl newline="false" spacing="normal">
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</dd>
            <dt>"state":</dt>
            <dd>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
          </dl>
          <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork>
          <t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>
          <t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>
          <t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>
          <t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>
          <section anchor="authorization-code-error-response" numbered="true" toc="default">
            <name>Error Response</name>
            <t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>
            <t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>
            <t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>
            <t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"error":</dt>
              <dd>
                <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the
following:

                </t>
                <dl newline="false" spacing="normal">
                  <dt>"invalid_request":</dt>
                  <dd>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</dd>
                  <dt>"unauthorized_client":</dt>
                  <dd>
        The client is not authorized to request an authorization
code using this method.</dd>
                  <dt>"access_denied":</dt>
                  <dd>
        The resource owner or authorization server denied the
request.</dd>
                  <dt>"unsupported_response_type":</dt>
                  <dd>
        The authorization server does not support obtaining an
authorization code using this method.</dd>
                  <dt>"invalid_scope":</dt>
                  <dd>
        The requested scope is invalid, unknown, or malformed.</dd>
                  <dt>"server_error":</dt>
                  <dd>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</dd>
                  <dt>"temporarily_unavailable":</dt>
                  <dd>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</dd>
                </dl>
                <t>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
              </dd>
              <dt>"error_description":</dt>
              <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
              <dt>"error_uri":</dt>
              <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
              <dt>"state":</dt>
              <dd>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
            </dl>
            <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork>
          </section>
        </section>
        <section anchor="access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to "authorization_code".</dd>
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code received from the
authorization server.</dd>
            <dt>"redirect_uri":</dt>
            <dd>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request" format="default"/>, and their
values MUST be identical.</dd>
            <dt>"client_id":</dt>
            <dd>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</dd>
            <dt>"code_verifier":</dt>
            <dd>
  REQUIRED.  Code verifier</dd>
          </dl>
          <t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork>
          <t>The authorization server MUST:</t>
          <ul spacing="normal">
            <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
            <li>authenticate the client if client authentication is included,</li>
            <li>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</li>
            <li>verify that the authorization code is valid,</li>
            <li>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</li>
            <li>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request" format="default"/>, and if included ensure that
their values are identical.</li>
          </ul>
        </section>
        <section anchor="authorization-code-access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="client-credentials-grant" numbered="true" toc="default">
        <name>Client Credentials Grant</name>
        <t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>
        <t>The client credentials grant type MUST only be used by confidential
clients.</t>
        <figure anchor="fig-client-credentials-flow">
          <name>Client Credentials Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-client-credentials-flow" format="default"/> includes the following steps:</t>
        <t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>
        <t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>
        <section anchor="authorization-request-and-response" numbered="true" toc="default">
          <name>Authorization Request and Response</name>
          <t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>
        </section>
        <section anchor="client-credentials-access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to "client_credentials".</dd>
            <dt>"scope":</dt>
            <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
          </dl>
          <t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork>
          <t>The authorization server MUST authenticate the client.</t>
        </section>
        <section anchor="access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response" format="default"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="extension-grants" numbered="true" toc="default">
        <name>Extension Grants</name>
        <t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>
        <t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522" format="default"/>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork>
        <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      </section>
    </section>
    <section anchor="issuing-an-access-token" numbered="true" toc="default">
      <name>Issuing an Access Token</name>
      <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <section anchor="access-token-successful-response" numbered="true" toc="default">
        <name>Successful Response</name>
        <t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>
        <dl newline="false" spacing="normal">
          <dt>"access_token":</dt>
          <dd>
  REQUIRED.  The access token issued by the authorization server.</dd>
          <dt>"token_type":</dt>
          <dd>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types" format="default"/>.  Value is case insensitive.</dd>
          <dt>"expires_in":</dt>
          <dd>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</dd>
          <dt>"refresh_token":</dt>
          <dd>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token" format="default"/>.</dd>
          <dt>"scope":</dt>
          <dd>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope" format="default"/>.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>
        <t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616" format="default"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616" format="default"/>
with a value of "no-cache".</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork>
        <t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>
      </section>
      <section anchor="access-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <dl newline="false" spacing="normal">
          <dt>"error":</dt>
          <dd>
            <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the following:

            </t>
            <dl newline="false" spacing="normal">
              <dt>"invalid_request":</dt>
              <dd>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</dd>
              <dt>"invalid_client":</dt>
              <dd>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</dd>
              <dt>"invalid_grant":</dt>
              <dd>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</dd>
              <dt>"unauthorized_client":</dt>
              <dd>
        The authenticated client is not authorized to use this
authorization grant type.</dd>
              <dt>"unsupported_grant_type":</dt>
              <dd>
        The authorization grant type is not supported by the
authorization server.</dd>
              <dt>"invalid_scope":</dt>
              <dd>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</dd>
            </dl>
            <t>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
          </dd>
          <dt>"error_description":</dt>
          <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
          <dt>"error_uri":</dt>
          <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork>
      </section>
    </section>
    <section anchor="refreshing-an-access-token" numbered="true" toc="default">
      <name>Refreshing an Access Token</name>
      <t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>
      <t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>
      <t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
      <dl newline="false" spacing="normal">
        <dt>"grant_type":</dt>
        <dd>
  REQUIRED.  Value MUST be set to "refresh_token".</dd>
        <dt>"refresh_token":</dt>
        <dd>
  REQUIRED.  The refresh token issued to the client.</dd>
        <dt>"scope":</dt>
        <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</dd>
      </dl>
      <t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
      <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork>
      <t>The authorization server MUST:</t>
      <ul spacing="normal">
        <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
        <li>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</li>
        <li>validate the refresh token.</li>
      </ul>
      <t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>
      <ul spacing="normal">
        <li>
          <em>Sender-constrained refresh tokens:</em> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding" format="default"/> or <xref target="RFC8705" format="default"/>.</li>
        <li>
          <t><em>Refresh token rotation:</em> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  </t>
          <t>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
        </li>
      </ul>
      <t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>
      <t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>
      <ul spacing="normal">
        <li>password change</li>
        <li>logout at the authorization server</li>
      </ul>
      <t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>
    </section>
    <section anchor="accessing-protected-resources" numbered="true" toc="default">
      <name>Accessing Protected Resources</name>
      <t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>
      <t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617" format="default"/> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>
      <section anchor="access-token-types" numbered="true" toc="default">
        <name>Access Token Types</name>
        <t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>
        <t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
        <t>The above example is provided for illustration purposes only.</t>
        <t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>
      </section>
      <section anchor="bearer-tokens" numbered="true" toc="default">
        <name>Bearer Tokens</name>
        <t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>
        <t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>
        <section anchor="authenticated-requests" numbered="true" toc="default">
          <name>Authenticated Requests</name>
          <t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>
          <section anchor="authorization-request-header-field" numbered="true" toc="default">
            <name>Authorization Request Header Field</name>
            <t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617" format="default"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>
            <t>For example:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
            <t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617" format="default"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617" format="default"/> but is compatible
with the general authentication framework in HTTP 1.1 Authentication
<xref target="RFC7235" format="default"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork>
            <t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>
          </section>
          <section anchor="form-encoded-body-parameter" numbered="true" toc="default">
            <name>Form-Encoded Body Parameter</name>
            <t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>
            <ul spacing="normal">
              <li>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</li>
              <li>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224" format="default"/>.</li>
              <li>The HTTP request entity-body is single-part.</li>
              <li>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII" format="default"/> characters.</li>
              <li>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</li>
            </ul>
            <t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>
            <t>For example, the client makes the following HTTP request using
transport-layer security:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork>
            <t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>
          </section>
        </section>
        <section anchor="the-www-authenticate-response-header-field" numbered="true" toc="default">
          <name>The WWW-Authenticate Response Header Field</name>
          <t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617" format="default"/>.</t>
          <t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>
          <t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617" format="default"/>.  The
"realm" attribute MUST NOT appear more than once.</t>
          <t>The "scope" attribute is defined in <xref target="access-token-scope" format="default"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>
          <t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages" format="default"/> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP" format="default"/>
OAuth 2.0 use cases, respectively:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork>
          <t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes" format="default"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>
          <t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>
          <t>For example, in response to a protected resource request without
authentication:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
          <t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork>
        </section>
      </section>
      <section anchor="bearer-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry" format="default"/> for error values to be shared among
OAuth token authentication schemes.</t>
        <t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>
        <t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>
        <t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>
        <t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>
        <section anchor="bearer-token-error-codes" numbered="true" toc="default">
          <name>Error Codes</name>
          <t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>
          <dl newline="false" spacing="normal">
            <dt>"invalid_request":</dt>
            <dd>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</dd>
            <dt>"invalid_token":</dt>
            <dd>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</dd>
            <dt>"insufficient_scope":</dt>
            <dd>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</dd>
          </dl>
          <t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>
          <t>For example:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
        </section>
      </section>
      <section anchor="access-token-security-considerations" numbered="true" toc="default">
        <name>Access Token Security Considerations</name>
        <section anchor="security-threats" numbered="true" toc="default">
          <name>Security Threats</name>
          <t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63" format="default"/>.</t>
          <section anchor="token-manufacturemodification" numbered="true" toc="default">
            <name>Token manufacture/modification</name>
            <t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>
          </section>
          <section anchor="token-disclosure" numbered="true" toc="default">
            <name>Token disclosure</name>
            <t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>
          </section>
          <section anchor="token-redirect" numbered="true" toc="default">
            <name>Token redirect</name>
            <t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>
          </section>
          <section anchor="token-replay" numbered="true" toc="default">
            <name>Token replay</name>
            <t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>
          </section>
        </section>
        <section anchor="threat-mitigation" numbered="true" toc="default">
          <name>Threat Mitigation</name>
          <t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>
          <t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>
          <t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>
          <t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>
          <t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280" format="default"/>.</t>
          <t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265" format="default"/> for security
considerations about cookies.</t>
          <t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>
          <t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818" format="default"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>
        </section>
        <section anchor="summary-of-recommendations" numbered="true" toc="default">
          <name>Summary of Recommendations</name>
          <section anchor="safeguard-bearer-tokens" numbered="true" toc="default">
            <name>Safeguard bearer tokens</name>
            <t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>
          </section>
          <section anchor="validate-tls-certificate-chains" numbered="true" toc="default">
            <name>Validate TLS certificate chains</name>
            <t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>
          </section>
          <section anchor="always-use-tls-https" numbered="true" toc="default">
            <name>Always use TLS (https)</name>
            <t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>
          </section>
          <section anchor="dont-store-bearer-tokens-in-http-cookies" numbered="true" toc="default">
            <name>Don't store bearer tokens in HTTP cookies</name>
            <t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>
          </section>
          <section anchor="issue-short-lived-bearer-tokens" numbered="true" toc="default">
            <name>Issue short-lived bearer tokens</name>
            <t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>
          </section>
          <section anchor="issue-scoped-bearer-tokens" numbered="true" toc="default">
            <name>Issue scoped bearer tokens</name>
            <t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>
          </section>
          <section anchor="dont-pass-bearer-tokens-in-page-urls" numbered="true" toc="default">
            <name>Don't pass bearer tokens in page URLs</name>
            <t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>
          </section>
        </section>
        <section anchor="token-replay-prevention" numbered="true" toc="default">
          <name>Token Replay Prevention</name>
          <t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>
          <t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>.
The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
          <t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Section 4.11 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>
for further security advice.</t>
        </section>
        <section anchor="access-token-privilege-restriction" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators" format="default"/>, respectively, to
determine the resource server they want to access.</t>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar" format="default"/> to
determine those resources and/or actions.</t>
        </section>
      </section>
    </section>
    <section anchor="extensibility" numbered="true" toc="default">
      <name>Extensibility</name>
      <section anchor="defining-access-token-types" numbered="true" toc="default">
        <name>Defining Access Token Types</name>
        <t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry" format="default"/>), or by using a unique absolute URI as its name.</t>
        <t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>
        <t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617" format="default"/>).  The token type
"example" is reserved for use in examples.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="defining-new-endpoint-parameters" numbered="true" toc="default">
        <name>Defining New Endpoint Parameters</name>
        <t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry" format="default"/>.</t>
        <t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
        <t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>
      </section>
      <section anchor="defining-new-authorization-grant-types" numbered="true" toc="default">
        <name>Defining New Authorization Grant Types</name>
        <t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry" format="default"/>.</t>
      </section>
      <section anchor="new-response-types" numbered="true" toc="default">
        <name>Defining New Authorization Endpoint Response Types</name>
        <t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry" format="default"/>.  Response type
names MUST conform to the response-type ABNF.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork>
        <t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>
        <t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>
      </section>
      <section anchor="defining-additional-error-codes" numbered="true" toc="default">
        <name>Defining Additional Error Codes</name>
        <t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response" format="default"/>), the token error response (<xref target="access-token-error-response" format="default"/>), or the
resource access error response (<xref target="bearer-token-error-response" format="default"/>), such error codes MAY be
defined.</t>
        <t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry" format="default"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>
        <t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in <xref target="client-types" format="default"/>: web application,
browser-based application, and native application.</t>
      <t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819" format="default"/> and <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="security-client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or
<tt>private_key_jwt</tt> <xref target="OpenID" format="default"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>
        <t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>
        <t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity - for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>
        <t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>
        <t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>
        <section anchor="client-authentication-of-native-apps" numbered="true" toc="default">
          <name>Client Authentication of Native Apps</name>
          <t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <tt>client_id</tt> request parameter.</t>
          <t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types" format="default"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation" format="default"/>).</t>
        </section>
      </section>
      <section anchor="native-app-registration" numbered="true" toc="default">
        <name>Registration of Native App Clients</name>
        <t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591" format="default"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types" format="default"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>
        <t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>
        <t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme" format="default"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<tt>.</tt>)
SHOULD be rejected.</t>
        <t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <tt>com.example.app</tt>,
the owner of <tt>example.com</tt> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>
        <t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>
      </section>
      <section anchor="client-impersonation" numbered="true" toc="default">
        <name>Client Impersonation</name>
        <t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>
        <t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>
        <t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>
        <t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>
        <section anchor="native-app-client-impersonation" numbered="true" toc="default">
          <name>Impersonation of Native Apps</name>
          <t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id -
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>
          <t>Measures such as claimed <tt>https</tt> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>
        </section>
      </section>
      <section anchor="access-tokens" numbered="true" toc="default">
        <name>Access Tokens</name>
        <t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>
        <section anchor="access-token-privilege-restriction-1" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>
          <t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <tt>scope</tt> or <tt>resource</tt> as specified in
<xref target="RFC8707" format="default"/>, respectively, to determine the
resource server they want to access.</t>
        </section>
        <section anchor="access-token-replay-prevention" numbered="true" toc="default">
          <name>Access Token Replay Prevention</name>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <tt>scope</tt> and <tt>authorization_details</tt> as specified in
<xref target="I-D.ietf-oauth-rar" format="default"/> to determine those resources and/or actions.</t>
          <t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
        </section>
      </section>
      <section anchor="refresh-tokens" numbered="true" toc="default">
        <name>Refresh Tokens</name>
        <t>Authorization servers MAY issue refresh tokens to clients.</t>
        <t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>
        <t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>
      </section>
      <section anchor="protecting-redirect-based-flows" numbered="true" toc="default">
        <name>Protecting Redirect-Based Flows</name>
        <t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>
        <t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>
        <t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819" format="default"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <tt>nonce</tt> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <tt>state</tt> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>
        <t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>
        <t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>
        <section anchor="loopback-redirect-considerations-in-native-apps" numbered="true" toc="default">
          <name>Loopback Redirect Considerations in Native Apps</name>
          <t>Loopback interface redirect URIs use the <tt>http</tt> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>
          <t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>
          <t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>
          <t>While redirect URIs using localhost (i.e.,
<tt>http://localhost:{port}/{path}</tt>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection" format="default"/>, the use of <tt>localhost</tt> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <tt>localhost</tt> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>
        </section>
      </section>
      <section anchor="authorization-codes" numbered="true" toc="default">
        <name>Authorization Codes</name>
        <t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>
        <t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>
        <t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>
        <t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <tt>nonce</tt> parameter and
ID Token Claim <xref target="OpenID" format="default"/> MAY be used as well. The PKCE challenge or
OpenID Connect <tt>nonce</tt> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>
        <t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>
        <t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <tt>S256</tt> is the only such method.</t>
        <t>Authorization servers MUST support PKCE.</t>
        <t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<tt>code_challenge_methods_supported</tt> in their AS metadata (<xref target="RFC8418" format="default"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>
      </section>
      <section anchor="request-confidentiality" numbered="true" toc="default">
        <name>Request Confidentiality</name>
        <t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>
        <t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>
      </section>
      <section anchor="ensuring-endpoint-authenticity" numbered="true" toc="default">
        <name>Ensuring Endpoint Authenticity</name>
        <t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818" format="default"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125" format="default"/> and in accordance with its
requirements for server identity authentication.</t>
      </section>
      <section anchor="credentials-guessing-attacks" numbered="true" toc="default">
        <name>Credentials-Guessing Attacks</name>
        <t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>
        <t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>
        <t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>
      </section>
      <section anchor="phishing-attacks" numbered="true" toc="default">
        <name>Phishing Attacks</name>
        <t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>
        <t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>
        <t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>
      </section>
      <section anchor="fake-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Fake External User-Agents in Native Apps</name>
        <t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>
        <t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>
        <t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>
        <t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>
      </section>
      <section anchor="malicious-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Malicious External User-Agents in Native Apps</name>
        <t>If a malicious app is able to configure itself as the default handler
for <tt>https</tt> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>
        <t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <tt>http</tt> and <tt>https</tt> scheme URIs.</t>
      </section>
      <section anchor="csrf_countermeasures" numbered="true" toc="default">
        <name>Cross-Site Request Forgery</name>
        <t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>
        <t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <tt>state</tt> parameter to the authorization
server as described in <xref target="RFC6819" format="default"/>. The same protection is provided by
PKCE or the OpenID Connect <tt>nonce</tt> value.</t>
        <t>When using PKCE instead of <tt>state</tt> or <tt>nonce</tt> for CSRF protection, it is
important to note that:</t>
        <ul spacing="normal">
          <li>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<tt>state</tt> or <tt>nonce</tt> MUST be used for CSRF protection.</li>
          <li>If <tt>state</tt> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <tt>state</tt> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state" format="default"/>.</li>
        </ul>
        <t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414" format="default"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>
      </section>
      <section anchor="clickjacking" numbered="true" toc="default">
        <name>Clickjacking</name>
        <t>As described in Section 4.4.1.9 of <xref target="RFC6819" format="default"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>
        <t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819" format="default"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2" format="default"/> or greater.</t>
        <t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>
        <t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2" format="default"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <tt>frame-ancestors</tt>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <tt>script-src</tt>). A non-normative
example of such a policy is shown in the following listing:</t>
        <t><tt>
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</tt></t>
        <t>Because some user agents do not support <xref target="CSP-2" format="default"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819" format="default"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>
      </section>
      <section anchor="code-injection-and-input-validation" numbered="true" toc="default">
        <name>Code Injection and Input Validation</name>
        <t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>
        <t>The authorization server and client MUST sanitize (and validate when
possible) any value received - in particular, the value of the
"state" and "redirect_uri" parameters.</t>
      </section>
      <section anchor="open-redirectors" numbered="true" toc="default">
        <name>Open Redirectors</name>
        <t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>
        <section anchor="open_redirector_on_client" numbered="true" toc="default">
          <name>Client as Open Redirector</name>
          <t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>
          <t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir" format="default"/>.</t>
        </section>
        <section anchor="authorization-server-as-open-redirector" numbered="true" toc="default">
          <name>Authorization Server as Open Redirector</name>
          <t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>
          <t><xref target="authorization-code-error-response" format="default"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <tt>client_id</tt> and <tt>redirect_uri</tt>.</t>
          <t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591" format="default"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>
          <t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>
        </section>
      </section>
      <section anchor="authorization-server-mix-up-mitigation-in-native-apps" numbered="true" toc="default">
        <name>Authorization Server Mix-Up Mitigation in Native Apps</name>
        <t>(TODO: merge this with the regular mix-up section when it is brought in)</t>
        <t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>
        <t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>
        <t>The requirement of <xref target="native-app-registration" format="default"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>
      </section>
      <section anchor="native-apps-embedded-user-agents" numbered="true" toc="default">
        <name>Embedded User Agents in Native Apps</name>
        <t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>
        <t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>
        <t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>
        <t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>
        <t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>
      </section>
      <section anchor="other-recommendations" numbered="true" toc="default">
        <name>Other Recommendations</name>
        <t>Authorization servers SHOULD NOT allow clients to influence their
<tt>client_id</tt> or <tt>sub</tt> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>
      </section>
    </section>
    <section anchor="native-applications" numbered="true" toc="default">
      <name>Native Applications</name>
      <t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>
      <t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>
      <t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
      <t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See <xref target="native-apps-embedded-user-agents" format="default"/>
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>
      <t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>
      <t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>
      <section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" numbered="true" toc="default">
        <name>Using Inter-App URI Communication for OAuth in Native Apps</name>
        <t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>
        <t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>
        <t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app" format="default"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app" format="default"/>).</t>
      </section>
      <section anchor="authorization-request-native-app" numbered="true" toc="default">
        <name>Initiating the Authorization Request from a Native App</name>
        <t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant" format="default"/>
using a redirect URI capable of being received by the native app.</t>
        <t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app" format="default"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>
        <t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>
        <t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>
        <t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>
      </section>
      <section anchor="authorization-response-native-app" numbered="true" toc="default">
        <name>Receiving the Authorization Response in a Native App</name>
        <t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>
        <t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>
        <section anchor="private-use-uri-scheme" numbered="true" toc="default">
          <name>Private-Use URI Scheme Redirection</name>
          <t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <tt>com.example.app</tt>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>
          <t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>
          <t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595" format="default"/> for
private-use URI schemes.</t>
          <t>For example, an app that controls the domain name <tt>app.example.com</tt>
can use <tt>com.example.app</tt> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<tt>client1234.usercontent.example.net</tt>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <tt>myapp</tt>, however, would not meet this requirement, as
it is not based on a domain name.</t>
          <t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>
          <t>Following the requirements of Section 3.2 of <xref target="RFC3986" format="default"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<tt>/</tt>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork>
          <t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>
        </section>
        <section anchor="claimed-https-scheme-uri-redirection" numbered="true" toc="default">
          <name>Claimed "https" Scheme URI Redirection</name>
          <t>Some operating systems allow apps to claim <tt>https</tt> scheme <xref target="RFC7230" format="default"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>
          <t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork>
          <t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
<xref target="native-app-registration" format="default"/> that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>
          <t>App-claimed <tt>https</tt> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>
        </section>
        <section anchor="loopback-interface-redirection" numbered="true" toc="default">
          <name>Loopback Interface Redirection</name>
          <t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>
          <t>Loopback redirect URIs use the <tt>http</tt> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>
          <t>That is, <tt>http://127.0.0.1:{port}/{path}</tt> for IPv4, and
<tt>http://[::1]:{port}/{path}</tt> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork>
          <t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork>
          <t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>
          <t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>
        </section>
      </section>
    </section>
    <section anchor="browser-based-apps" numbered="true" toc="default">
      <name>Browser-Based Apps</name>
      <t>Browser-based apps are are clients that run in a web browser, typically
written in JavaScript, also known as "single-page apps". These types of apps
have particular security considerations similar to native apps.</t>
      <t>TODO: Bring in the normative text of the browser-based apps BCP when it is finalized.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="access-token-registry" numbered="true" toc="default">
        <name>OAuth Access Token Types Registry</name>
        <t>This specification establishes the OAuth Access Token Types registry.</t>
        <t>Access token types are registered with a Specification Required
(<xref target="RFC5226" format="default"/>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Additional Token Endpoint Response Parameters:</dt>
            <dd>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry" format="default"/>.</dd>
            <dt>HTTP Authentication Scheme(s):</dt>
            <dd>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Access Token Types registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Type name: Bearer</li>
            <li>Additional Token Endpoint Response Parameters: (none)</li>
            <li>HTTP Authentication Scheme(s): Bearer</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
      <section anchor="parameters-registry" numbered="true" toc="default">
        <name>OAuth Parameters Registry</name>
        <t>This specification establishes the OAuth Parameters registry.</t>
        <t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226" format="default"/>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Parameter name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Parameter usage location:</dt>
            <dd>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-1" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Parameters registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Parameter name: client_id</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: client_secret</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: response_type</li>
            <li>Parameter usage location: authorization request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: redirect_uri</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: scope</li>
            <li>Parameter usage location: authorization request, authorization
response, token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: state</li>
            <li>Parameter usage location: authorization request, authorization
response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: code</li>
            <li>Parameter usage location: authorization response, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_description</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_uri</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: grant_type</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: access_token</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: token_type</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: expires_in</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: username</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: password</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: refresh_token</li>
            <li>Parameter usage location: token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="response-types-registry" numbered="true" toc="default">
        <name>OAuth Authorization Endpoint Response Types Registry</name>
        <t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>
        <t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226" format="default"/>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-2" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Response type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>
          <ul spacing="normal">
            <li>Response type name: code</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="error-registry" numbered="true" toc="default">
        <name>OAuth Extensions Error Registry</name>
        <t>This specification establishes the OAuth Extensions Error registry.</t>
        <t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226" format="default"/>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-3" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Error name:</dt>
            <dd>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</dd>
            <dt>Error usage location:</dt>
            <dd>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response" format="default"/>), token error response (<xref target="access-token-error-response" format="default"/>), or resource
access error response (<xref target="bearer-token-error-response" format="default"/>).</dd>
            <dt>Related protocol extension:</dt>
            <dd>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-3" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Error registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Error name: invalid_request</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: invalid_token</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: insufficient_scope</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <seriesInfo name="DOI" value="10.17487/RFC2119"/>
            <seriesInfo name="RFC" value="2119"/>
            <seriesInfo name="BCP" value="14"/>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2616" target="https://www.rfc-editor.org/info/rfc2616" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
          <front>
            <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
            <seriesInfo name="DOI" value="10.17487/RFC2616"/>
            <seriesInfo name="RFC" value="2616"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="J." surname="Gettys" fullname="J. Gettys">
              <organization/>
            </author>
            <author initials="J." surname="Mogul" fullname="J. Mogul">
              <organization/>
            </author>
            <author initials="H." surname="Frystyk" fullname="H. Frystyk">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as "HTTP/1.1", and is an update to RFC 2068.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2617" target="https://www.rfc-editor.org/info/rfc2617" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
          <front>
            <title>HTTP Authentication: Basic and Digest Access Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC2617"/>
            <seriesInfo name="RFC" value="2617"/>
            <author initials="J." surname="Franks" fullname="J. Franks">
              <organization/>
            </author>
            <author initials="P." surname="Hallam-Baker" fullname="P. Hallam-Baker">
              <organization/>
            </author>
            <author initials="J." surname="Hostetler" fullname="J. Hostetler">
              <organization/>
            </author>
            <author initials="S." surname="Lawrence" fullname="S. Lawrence">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="A." surname="Luotonen" fullname="A. Luotonen">
              <organization/>
            </author>
            <author initials="L." surname="Stewart" fullname="L. Stewart">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>This document provides the specification for HTTP's authentication framework, the original Basic authentication scheme and a scheme based on cryptographic hashes, referred to as "Digest Access Authentication". [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2818" target="https://www.rfc-editor.org/info/rfc2818" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
          <front>
            <title>HTTP Over TLS</title>
            <seriesInfo name="DOI" value="10.17487/RFC2818"/>
            <seriesInfo name="RFC" value="2818"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2000" month="May"/>
            <abstract>
              <t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3629" target="https://www.rfc-editor.org/info/rfc3629" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <seriesInfo name="DOI" value="10.17487/RFC3629"/>
            <seriesInfo name="RFC" value="3629"/>
            <seriesInfo name="STD" value="63"/>
            <author initials="F." surname="Yergeau" fullname="F. Yergeau">
              <organization/>
            </author>
            <date year="2003" month="November"/>
            <abstract>
              <t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <seriesInfo name="DOI" value="10.17487/RFC3986"/>
            <seriesInfo name="RFC" value="3986"/>
            <seriesInfo name="STD" value="66"/>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <date year="2005" month="January"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4627" target="https://www.rfc-editor.org/info/rfc4627" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
          <front>
            <title>The application/json Media Type for JavaScript Object Notation (JSON)</title>
            <seriesInfo name="DOI" value="10.17487/RFC4627"/>
            <seriesInfo name="RFC" value="4627"/>
            <author initials="D." surname="Crockford" fullname="D. Crockford">
              <organization/>
            </author>
            <date year="2006" month="July"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <seriesInfo name="DOI" value="10.17487/RFC4949"/>
            <seriesInfo name="RFC" value="4949"/>
            <seriesInfo name="FYI" value="36"/>
            <author initials="R." surname="Shirey" fullname="R. Shirey">
              <organization/>
            </author>
            <date year="2007" month="August"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5226" target="https://www.rfc-editor.org/info/rfc5226" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <seriesInfo name="DOI" value="10.17487/RFC5226"/>
            <seriesInfo name="RFC" value="5226"/>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization/>
            </author>
            <author initials="H." surname="Alvestrand" fullname="H. Alvestrand">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t>
              <t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t>
              <t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <seriesInfo name="DOI" value="10.17487/RFC5234"/>
            <seriesInfo name="RFC" value="5234"/>
            <seriesInfo name="STD" value="68"/>
            <author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
              <organization/>
            </author>
            <author initials="P." surname="Overell" fullname="P. Overell">
              <organization/>
            </author>
            <date year="2008" month="January"/>
            <abstract>
              <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6125" target="https://www.rfc-editor.org/info/rfc6125" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
          <front>
            <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC6125"/>
            <seriesInfo name="RFC" value="6125"/>
            <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre">
              <organization/>
            </author>
            <author initials="J." surname="Hodges" fullname="J. Hodges">
              <organization/>
            </author>
            <date year="2011" month="March"/>
            <abstract>
              <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6749" target="https://www.rfc-editor.org/info/rfc6749" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework</title>
            <seriesInfo name="DOI" value="10.17487/RFC6749"/>
            <seriesInfo name="RFC" value="6749"/>
            <author initials="D." surname="Hardt" fullname="D. Hardt" role="editor">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6750" target="https://www.rfc-editor.org/info/rfc6750" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
            <seriesInfo name="DOI" value="10.17487/RFC6750"/>
            <seriesInfo name="RFC" value="6750"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="D." surname="Hardt" fullname="D. Hardt">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <seriesInfo name="DOI" value="10.17487/RFC8446"/>
            <seriesInfo name="RFC" value="8446"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <seriesInfo name="DOI" value="10.17487/RFC5280"/>
            <seriesInfo name="RFC" value="5280"/>
            <author initials="D." surname="Cooper" fullname="D. Cooper">
              <organization/>
            </author>
            <author initials="S." surname="Santesson" fullname="S. Santesson">
              <organization/>
            </author>
            <author initials="S." surname="Farrell" fullname="S. Farrell">
              <organization/>
            </author>
            <author initials="S." surname="Boeyen" fullname="S. Boeyen">
              <organization/>
            </author>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <author initials="W." surname="Polk" fullname="W. Polk">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7595" target="https://www.rfc-editor.org/info/rfc7595" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
          <front>
            <title>Guidelines and Registration Procedures for URI Schemes</title>
            <seriesInfo name="DOI" value="10.17487/RFC7595"/>
            <seriesInfo name="RFC" value="7595"/>
            <seriesInfo name="BCP" value="35"/>
            <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
              <organization/>
            </author>
            <author initials="T." surname="Hansen" fullname="T. Hansen">
              <organization/>
            </author>
            <author initials="T." surname="Hardie" fullname="T. Hardie">
              <organization/>
            </author>
            <date year="2015" month="June"/>
            <abstract>
              <t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8252" target="https://www.rfc-editor.org/info/rfc8252" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
          <front>
            <title>OAuth 2.0 for Native Apps</title>
            <seriesInfo name="DOI" value="10.17487/RFC8252"/>
            <seriesInfo name="RFC" value="8252"/>
            <seriesInfo name="BCP" value="212"/>
            <author initials="W." surname="Denniss" fullname="W. Denniss">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2017" month="October"/>
            <abstract>
              <t>OAuth 2.0 authorization requests from native apps should only be made through external user-agents, primarily the user's browser.  This specification details the security and usability reasons why this is the case and how native apps and authorization servers can implement this best practice.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-security-topics" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-security-topics-14.txt">
          <front>
            <title>OAuth 2.0 Security Best Current Practice</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-security-topics-14"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="A" surname="Labunets" fullname="Andrey Labunets">
              <organization/>
            </author>
            <author initials="D" surname="Fett" fullname="Daniel Fett">
              <organization/>
            </author>
            <date month="February" day="10" year="2020"/>
            <abstract>
              <t>This document describes best current security practice for OAuth 2.0. It updates and extends the OAuth 2.0 Security Threat Model to incorporate practical experiences gathered since OAuth 2.0 was published and covers new threats relevant due to the broader application of OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="USASCII">
          <front>
            <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
            <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
              <organization/>
            </author>
            <date year="1986"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-html401-19991224" target="http://www.w3.org/TR/1999/REC-html401-19991224" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
          <front>
            <title>HTML 4.01 Specification</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-html401-19991224"/>
            <author initials="D." surname="Raggett" fullname="Dave Raggett">
              <organization/>
            </author>
            <author initials="A." surname="Hors" fullname="Arnaud Le Hors">
              <organization/>
            </author>
            <author initials="I." surname="Jacobs" fullname="Ian Jacobs">
              <organization/>
            </author>
            <date month="December" day="24" year="1999"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-xml-20081126" target="http://www.w3.org/TR/2008/REC-xml-20081126" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xml-20081126"/>
            <author initials="T." surname="Bray" fullname="Tim Bray">
              <organization/>
            </author>
            <author initials="J." surname="Paoli" fullname="Jean Paoli">
              <organization/>
            </author>
            <author initials="M." surname="Sperberg-McQueen" fullname="Michael Sperberg-McQueen">
              <organization/>
            </author>
            <author initials="E." surname="Maler" fullname="Eve Maler">
              <organization/>
            </author>
            <author initials="F." surname="Yergeau" fullname="FranÃ§ois Yergeau">
              <organization/>
            </author>
            <date month="November" day="26" year="2008"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC7522" target="https://www.rfc-editor.org/info/rfc7522" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
          <front>
            <title>Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</title>
            <seriesInfo name="DOI" value="10.17487/RFC7522"/>
            <seriesInfo name="RFC" value="7522"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore" fullname="C. Mortimore">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t>This specification defines the use of a Security Assertion Markup Language (SAML) 2.0 Bearer Assertion as a means for requesting an OAuth 2.0 access token as well as for client authentication.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6819" target="https://www.rfc-editor.org/info/rfc6819" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
          <front>
            <title>OAuth 2.0 Threat Model and Security Considerations</title>
            <seriesInfo name="DOI" value="10.17487/RFC6819"/>
            <seriesInfo name="RFC" value="6819"/>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="McGloin" fullname="M. McGloin">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2013" month="January"/>
            <abstract>
              <t>This document gives additional security considerations for OAuth, beyond those in the OAuth 2.0 specification, based on a comprehensive threat model for the OAuth 2.0 protocol.  This document is not an  Internet Standards Track specification; it is published for  informational purposes.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6265" target="https://www.rfc-editor.org/info/rfc6265" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
          <front>
            <title>HTTP State Management Mechanism</title>
            <seriesInfo name="DOI" value="10.17487/RFC6265"/>
            <seriesInfo name="RFC" value="6265"/>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization/>
            </author>
            <date year="2011" month="April"/>
            <abstract>
              <t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7591" target="https://www.rfc-editor.org/info/rfc7591" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
          <front>
            <title>OAuth 2.0 Dynamic Client Registration Protocol</title>
            <seriesInfo name="DOI" value="10.17487/RFC7591"/>
            <seriesInfo name="RFC" value="7591"/>
            <author initials="J." surname="Richer" fullname="J. Richer" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Machulak" fullname="M. Machulak">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2015" month="July"/>
            <abstract>
              <t>This specification defines mechanisms for dynamically registering OAuth 2.0 clients with authorization servers.  Registration requests send a set of desired client metadata values to the authorization server.  The resulting registration responses return a client identifier to use at the authorization server and the client metadata values registered for the client.  The client can then use this registration information to communicate with the authorization server using the OAuth 2.0 protocol.  This specification also defines a set of common client metadata fields and values for clients to use during registration.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8707" target="https://www.rfc-editor.org/info/rfc8707" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="DOI" value="10.17487/RFC8707"/>
            <seriesInfo name="RFC" value="8707"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8414" target="https://www.rfc-editor.org/info/rfc8414" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
          <front>
            <title>OAuth 2.0 Authorization Server Metadata</title>
            <seriesInfo name="DOI" value="10.17487/RFC8414"/>
            <seriesInfo name="RFC" value="8414"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2018" month="June"/>
            <abstract>
              <t>This specification defines a metadata format that an OAuth 2.0 client can use to obtain the information needed to interact with an OAuth 2.0 authorization server, including its endpoint locations and authorization server capabilities.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8418" target="https://www.rfc-editor.org/info/rfc8418" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
          <front>
            <title>Use of the Elliptic Curve Diffie-Hellman Key Agreement Algorithm with X25519 and X448 in the Cryptographic Message Syntax (CMS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC8418"/>
            <seriesInfo name="RFC" value="8418"/>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document describes the conventions for using the Elliptic Curve Diffie-Hellman (ECDH) key agreement algorithm with curve25519 and curve448 in the Cryptographic Message Syntax (CMS).</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8705" target="https://www.rfc-editor.org/info/rfc8705" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
          <front>
            <title>OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens</title>
            <seriesInfo name="DOI" value="10.17487/RFC8705"/>
            <seriesInfo name="RFC" value="8705"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document describes OAuth client authentication and certificate-bound access and refresh tokens using mutual Transport Layer Security (TLS) authentication with X.509 certificates.  OAuth clients are provided a mechanism for authentication to the authorization server using mutual TLS, based on either self-signed certificates or public key infrastructure (PKI). OAuth authorization servers are provided a mechanism for binding access tokens to a client's mutual-TLS certificate, and OAuth protected resources are provided a method for ensuring that such an access token presented to it was issued to the client presenting the token.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
            <seriesInfo name="DOI" value="10.17487/RFC7230"/>
            <seriesInfo name="RFC" value="7230"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7235" target="https://www.rfc-editor.org/info/rfc7235" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7235.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC7235"/>
            <seriesInfo name="RFC" value="7235"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7636" target="https://www.rfc-editor.org/info/rfc7636" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
          <front>
            <title>Proof Key for Code Exchange by OAuth Public Clients</title>
            <seriesInfo name="DOI" value="10.17487/RFC7636"/>
            <seriesInfo name="RFC" value="7636"/>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Agarwal" fullname="N. Agarwal">
              <organization/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t>OAuth 2.0 public clients utilizing the Authorization Code Grant are susceptible to the authorization code interception attack.  This specification describes the attack as well as a technique to mitigate against the threat through the use of Proof Key for Code Exchange (PKCE, pronounced "pixy").</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-rar" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-rar-01.txt">
          <front>
            <title>OAuth 2.0 Rich Authorization Requests</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-rar-01"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Richer" fullname="Justin Richer">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <date month="February" day="19" year="2020"/>
            <abstract>
              <t>This document specifies a new parameter "authorization_details" that is used to carry fine grained authorization data in the OAuth authorization request.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-resource-indicators" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-resource-indicators-08.txt">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-resource-indicators-08"/>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="H" surname="Tschofenig" fullname="Hannes Tschofenig">
              <organization/>
            </author>
            <date month="September" day="11" year="2019"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.bradley-oauth-jwt-encoded-state" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml" target="http://www.ietf.org/internet-drafts/draft-bradley-oauth-jwt-encoded-state-09.txt">
          <front>
            <title>Encoding claims in the OAuth 2 state parameter using a JWT</title>
            <seriesInfo name="Internet-Draft" value="draft-bradley-oauth-jwt-encoded-state-09"/>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="H" surname="Zandbelt" fullname="Hans Zandbelt">
              <organization/>
            </author>
            <date month="November" day="4" year="2018"/>
            <abstract>
              <t>This draft provides a method for a client to encode one or more elements encoding information about the session into the OAuth 2 "state" parameter.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-token-binding" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-token-binding-08.txt">
          <front>
            <title>OAuth 2.0 Token Binding</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-token-binding-08"/>
            <author initials="M" surname="Jones" fullname="Michael Jones">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="W" surname="Denniss" fullname="William Denniss">
              <organization/>
            </author>
            <date month="October" day="19" year="2018"/>
            <abstract>
              <t>This specification enables OAuth 2.0 implementations to apply Token Binding to Access Tokens, Authorization Codes, Refresh Tokens, JWT Authorization Grants, and JWT Client Authentication.  This cryptographically binds these tokens to a client's Token Binding key pair, possession of which is proven on the TLS connections over which the tokens are intended to be used.  This use of Token Binding protects these tokens from man-in-the-middle and token export and replay attacks.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-browser-based-apps" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-browser-based-apps-05.txt">
          <front>
            <title>OAuth 2.0 for Browser-Based Apps</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-browser-based-apps-05"/>
            <author initials="A" surname="Parecki" fullname="Aaron Parecki">
              <organization/>
            </author>
            <author initials="D" surname="Waite" fullname="David Waite">
              <organization/>
            </author>
            <date month="February" day="28" year="2020"/>
            <abstract>
              <t>This specification details the security considerations and best practices that must be taken into account when developing browser- based applications that use OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="OpenID" target="https://openiD.net/specs/openiD-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0</title>
            <author initials="N." surname="Sakimora">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="OMAP" target="https://www.oatc.us/Standards/Download-Standards">
          <front>
            <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
            <author initials="J." surname="Huff">
              <organization/>
            </author>
            <author initials="D." surname="Schlacht">
              <organization/>
            </author>
            <author initials="A." surname="Nadalin">
              <organization/>
            </author>
            <author initials="J." surname="Simmons">
              <organization/>
            </author>
            <author initials="P." surname="Rosenberg">
              <organization/>
            </author>
            <author initials="P." surname="Madsen">
              <organization/>
            </author>
            <author initials="T." surname="Ace">
              <organization/>
            </author>
            <author initials="C." surname="Rickelton-Abdi">
              <organization/>
            </author>
            <author initials="B." surname="Boyer">
              <organization/>
            </author>
            <date year="2012" month="April"/>
          </front>
        </reference>
        <reference anchor="NIST800-63" target="http://csrc.nist.gov/publications/">
          <front>
            <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
            <author initials="W." surname="Burr">
              <organization/>
            </author>
            <author initials="D." surname="Dodson">
              <organization/>
            </author>
            <author initials="E." surname="Newton">
              <organization/>
            </author>
            <author initials="R." surname="Perlner">
              <organization/>
            </author>
            <author initials="T." surname="Polk">
              <organization/>
            </author>
            <author initials="S." surname="Gupta">
              <organization/>
            </author>
            <author initials="E." surname="Nabbus">
              <organization/>
            </author>
            <date year="2011" month="December"/>
          </front>
        </reference>
        <reference anchor="OpenID.Messages" target="http://openid.net/specs/openid-connect-messages-1_0.html">
          <front>
            <title>OpenID Connect Messages 1.0</title>
            <author initials="N." surname="Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <author initials="E." surname="Jay">
              <organization/>
            </author>
            <date year="2012" month="June"/>
          </front>
        </reference>
        <reference anchor="owasp_redir" target="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">
          <front>
            <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CSP-2" target="https://www.w3.org/TR/CSP2">
          <front>
            <title>Content Security Policy Level 2</title>
            <author>
              <organization/>
            </author>
            <date year="2016" month="December"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="augmented-backus-naur-form-abnf-syntax" numbered="true" toc="default">
      <name>Augmented Backus-Naur Form (ABNF) Syntax</name>
      <t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234" format="default"/>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126" format="default"/>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>
      <t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986" format="default"/>.</t>
      <t>Some of the definitions that follow use these common definitions:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork>
      <t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126" format="default"/>, but omitting the Carriage
Return and Linefeed characters.)</t>
      <section anchor="clientid-syntax" numbered="true" toc="default">
        <name>"client_id" Syntax</name>
        <t>The "client_id" element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-id     = *VSCHAR
]]></artwork>
      </section>
      <section anchor="clientsecret-syntax" numbered="true" toc="default">
        <name>"client_secret" Syntax</name>
        <t>The "client_secret" element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-secret = *VSCHAR
]]></artwork>
      </section>
      <section anchor="responsetype-syntax" numbered="true" toc="default">
        <name>"response_type" Syntax</name>
        <t>The "response_type" element is defined in <xref target="response-type" format="default"/> and <xref target="new-response-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="scope-syntax" numbered="true" toc="default">
        <name>"scope" Syntax</name>
        <t>The "scope" element is defined in <xref target="access-token-scope" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork>
      </section>
      <section anchor="state-syntax" numbered="true" toc="default">
        <name>"state" Syntax</name>
        <t>The "state" element is defined in <xref target="authorization-request" format="default"/>, <xref target="authorization-response" format="default"/>, and <xref target="authorization-code-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 state      = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="redirecturi-syntax" numbered="true" toc="default">
        <name>"redirect_uri" Syntax</name>
        <t>The "redirect_uri" element is defined in <xref target="authorization-request" format="default"/>, and <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 redirect-uri      = URI-reference
]]></artwork>
      </section>
      <section anchor="error-syntax" numbered="true" toc="default">
        <name>"error" Syntax</name>
        <t>The "error" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
7.2, and 8.5:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error             = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="errordescription-syntax" numbered="true" toc="default">
        <name>"error_description" Syntax</name>
        <t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>,
<xref target="access-token-error-response" format="default"/>, and <xref target="bearer-token-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="erroruri-syntax" numbered="true" toc="default">
        <name>"error_uri" Syntax</name>
        <t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
and 7.2:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-uri         = URI-reference
]]></artwork>
      </section>
      <section anchor="granttype-syntax" numbered="true" toc="default">
        <name>"grant_type" Syntax</name>
        <t>The "grant_type" element is defined in Sections <xref target="access-token-request" format="default"/>, <xref target="access-token-response" format="default"/>, <xref target="client-credentials-access-token-request" format="default"/>,
<xref target="extension-grants" format="default"/>, and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="code-syntax" numbered="true" toc="default">
        <name>"code" Syntax</name>
        <t>The "code" element is defined in <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 code       = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="accesstoken-syntax" numbered="true" toc="default">
        <name>"access_token" Syntax</name>
        <t>The "access_token" element is defined in <xref target="access-token-response" format="default"/> and <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 access-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="tokentype-syntax" numbered="true" toc="default">
        <name>"token_type" Syntax</name>
        <t>The "token_type" element is defined in <xref target="access-token-successful-response" format="default"/>, and <xref target="defining-access-token-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="expiresin-syntax" numbered="true" toc="default">
        <name>"expires_in" Syntax</name>
        <t>The "expires_in" element is defined in <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 expires-in = 1*DIGIT
]]></artwork>
      </section>
      <section anchor="refreshtoken-syntax" numbered="true" toc="default">
        <name>"refresh_token" Syntax</name>
        <t>The "refresh_token" element is defined in <xref target="access-token-successful-response" format="default"/> and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="endpoint-parameter-syntax" numbered="true" toc="default">
        <name>Endpoint Parameter Syntax</name>
        <t>The syntax for new endpoint parameters is defined in <xref target="defining-new-endpoint-parameters" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="codeverifier-syntax" numbered="true" toc="default">
        <name>"code_verifier" Syntax</name>
        <t>ABNF for "code_verifier" is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
      <section anchor="codechallenge-syntax" numbered="true" toc="default">
        <name>"code_challenge" Syntax</name>
        <t>ABNF for "code_challenge" is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
    </section>
    <section anchor="use-of-applicationx-www-form-urlencoded-media-type" numbered="true" toc="default">
      <name>Use of application/x-www-form-urlencoded Media Type</name>
      <t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224" format="default"/> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>
      <t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629" format="default"/> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224" format="default"/>.</t>
      <t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>
      <t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork>
      <t>and then represented in the payload as:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork>
    </section>
    <section anchor="acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>TBD</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIALgpZF4AA+y9+3Ybx5Uv/H89RS96JSYzAExSV8ujOUPdbCXWJaIUnyQr
R24CTbItAI1BN0Qxjs76XuN7ve9Jvn2t2lVdDVK2JzkzJ1ozsQSgq+uya9/3
b4/HY9fV3by6V7w+r4oXR5vuvDicHBT4l2Zd/7Xs6mZZPFmXi+qiWb9zs2a6
hL/fK2br8rQbr8p1NX1Xj5sSfj9+fzg+GO/vu1nZwS8O9w/3x/s3xvt3nKtX
63tFt9603eH+/pf7hw6eK+/x+9y7i3vF02VXrZdVN36E47pp2d0r2m7mps2y
rZbtpqXHK3nuuJpu1nV36eD7Wb08u1ds2nHZTuvarep7rii6ZnqvuKxa+Gvb
rLt1ddr6f18uwj9dSevER8ZFvYRPH02Kb8r1rINPiqJZn5VL2QR4a322fLqc
vFif0Ze8D4/q6TvzRLUo6znsDnw6OcdP//0MP5lMmwV9P202y259ea94s6y7
alYcd7BXbXj90aR4yXtq3nFUruEQ7OfymhK/+Hc5BP+OeNYv3nUlfQw7dq84
77pVe++LL+jJ9MGrJvd6UnzbzGbVuoVvOzPB1w1+tOx9K9Ps+Ot/n4evJ3DW
mcnCmdBs3LJZL+Cz9xUezasnDw8PDr7Uv94+uB3+ekf/evfgrvz1xu1D/e2N
L+/qb2/ePtTf3vzypv7g1uHhbf/XGzflr7cPDm/pX+/4396+c2tf/nr35s3w
2F399M6tL/Wxu4e3DvGvT8ePJnXVncoNaYVwx12zqqct/uLN8dHxw6dP79Fu
yF3cedjMYP8fAgWVU7gYQPBdMR4Xd8YndVccLap1PS2XeD7LGRBZgT8vTps1
XKNT3jigF7pS0/NyeVaNiqPnx0+L/3ljcnOH3hPIPhzijh/3OQ1Qzv0LWhis
hbltuoqf5xt+ALsL//zuxsPJq8cPx+fdYn5z/2B88OWXXx4cHtJm6ncfFvMx
XP27Bwe4367WefoDvgMnoft815/17cPbt8LmHujm3tm/4w/i4Gb4693sb/0I
hzf2w1/9p7dv3M6c1Lpc5z6t2maznlbjeglXvETC1l+drMvZvLqUH/5w0Y2r
5RSPcdziNcoM1jXvqiWc6JJYWP/7k3Vz0Vbr8UnZwijlCi6ug1+9WFXLp48i
euGPgAyWy2rawX/XVXEw2eeflOuzqgs3v4Hf1o/w/n3RrqppKx+Mp/ww/Hdd
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
4xLmihUCVAoQDNjKFTGsWQ+SY5XN6O8p/56hA2FWTaLIRAzYwzmREI5LLrvF
Di8vLU78CLKqlUs/tSRdmgKY6Fq+2YdL0N6mQl1UX8sfljtqGvYqllJ2eJVT
yyXRr2N1JrZoXqwoErLezkhknWjhNWsfZegKDQFO+DAO7KnMJ6JrBmWy5xt1
5vPWD4HOzqpKyr7rbNX+B7I3xtOo6QaWCmtZN5STpu/CVjkecUXLMUe7yKRd
Lhj3TCiLY0XMh6EWtwNMhiguVAGPIyVe+Zjat5ImAztKO16RMtgCMGW2gZAH
Smm9chToW+nE0sgvDBlW39QQq/0/Dk8lvYs7J3jaeYV8m4/VZdQ4BWkZtkeY
La1Bl/OZByo58cJDIXRvpmYwQnlECScoWlgAAXYjMNomaracmFALhwLOeExL
JmNbwhidAXUQYmm12JwWosyw0+uUkLacx3ktuZa1nFBpsqkcV4kPy9oo1O15
0ryOEys4II0A9Z3m9/KgSfjOhhFobtnBRnDmCsn4RgN+N0Nc9TKs24SDL49f
Y8JvkqnOTw0H3GCenhKdRrb3SQLUwsJvHVipDwO4KJV7iYJOlXtQc9P3BnzC
wQzmz/g+jDmqPJ4L1GiE+MuCSSCSOnet4881zBPJ6BBU4lupLf5eaovvs0N3
z8iTL7/rqA7vHNKvOWyAOdLoAplAS5zcbQHS4aQA6gzH3Uhg47rJk1SaRi30
UI5+lbIMyJlUo+r77M/LsaCoQJ7KDgovovzxtfDLjaCP8uhKz+EIaFVB1xIj
VjohghTiaZYg1U1mRN0Rte6yo257VFckKyW4zsekNRST0ivJp9xidotbq5yX
dghfd3G351vgGtVN+01VUb5dtyQyiUwxT/PiiCUxRSdi6dhWjWvGNFKOeEdJ
+3EyHp2hBM2TDuUcS/sSzLTUHjMGEMG1GgaxM08FLtnSa8VUygcMyNG/P55H
x76XQvNK0skdYWTmhB4naDO8gHMNarIKoFmo94aPQwbqowdPHnCGVcdQ0P5M
inDL+cl+P26IqJ+mtQdkUuga9o04cJqc2lrdorNRTi8+qE7CPLqICnmfmFK+
FRMoz+s4bqYdtRRik7ZrSHZj8979IYlxSXgO7ZlWiwMNlwQ+FkMWS+eB7abG
92XqEKWXaQiCmL1TRIM4Jz1Tl76qAAdnlzQK/ahNM0cFeVhELRsH7zNjPYm8
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

-->

</rfc>
