<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.14 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std" consensus="true" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.40.1 -->
  <front>
    <title>The OAuth 2.1 Authorization Framework</title>
    <seriesInfo name="Internet-Draft" value="draft-parecki-oauth-v2-1-00"/>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization>SignIn.Org</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>
    <date year="2020" month="March" day="07"/>
    <area>Security</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>
      <ul spacing="normal">
        <li>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</li>
        <li>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</li>
        <li>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</li>
        <li>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</li>
        <li>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</li>
      </ul>
      <t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>
      <t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token - a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>
      <t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>
      <t>This specification is designed for use with HTTP (<xref target="RFC2616" format="default"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>
      <t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749" format="default"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252" format="default"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics" format="default"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps" format="default"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750" format="default"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics" format="default"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="roles" numbered="true" toc="default">
        <name>Roles</name>
        <t>OAuth defines four roles:</t>
        <dl newline="false" spacing="normal">
          <dt>"resource owner":</dt>
          <dd>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</dd>
          <dt>"resource server":</dt>
          <dd>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</dd>
          <dt>"client":</dt>
          <dd>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</dd>
          <dt>"authorization server":</dt>
          <dd>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</dd>
        </dl>
        <t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>
      </section>
      <section anchor="protocol-flow" numbered="true" toc="default">
        <name>Protocol Flow</name>
        <figure anchor="fig-protocol-flow">
          <name>Abstract Protocol Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork>
        </figure>
        <t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow" format="default"/> describes the
interaction between the four roles and includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</li>
          <li>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</li>
          <li>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</li>
          <li>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
        </ol>
        <t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow" format="default"/> in <xref target="authorization-code-grant" format="default"/>.</t>
      </section>
      <section anchor="authorization-grant" numbered="true" toc="default">
        <name>Authorization Grant</name>
        <t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types - authorization code
and client credentials - as well as an extensibility
mechanism for defining additional types.</t>
        <section anchor="authorization-code" numbered="true" toc="default">
          <name>Authorization Code</name>
          <t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616" format="default"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>
          <t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>
          <t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>
        </section>
        <section anchor="client-credentials" numbered="true" toc="default">
          <name>Client Credentials</name>
          <t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>
        </section>
      </section>
      <section anchor="access-token" numbered="true" toc="default">
        <name>Access Token</name>
        <t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>
        <t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>
        <t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>
        <t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>
      </section>
      <section anchor="refresh-token" numbered="true" toc="default">
        <name>Refresh Token</name>
        <t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow" format="default"/>).</t>
        <t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>
        <figure anchor="fig-refresh-token-flow">
          <name>Refreshing an Expired Access Token</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-refresh-token-flow" format="default"/> includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</li>
          <li>The client makes a protected resource request to the resource
server by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
          <li>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</li>
          <li>Since the access token is invalid, the resource server returns
an invalid token error.</li>
          <li>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</li>
          <li>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</li>
        </ol>
        <t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources" format="default"/>.</t>
      </section>
      <section anchor="tls-version" numbered="true" toc="default">
        <name>TLS Version</name>
        <t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446" format="default"/> is the most recent version.</t>
        <t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>
      </section>
      <section anchor="http-redirections" numbered="true" toc="default">
        <name>HTTP Redirections</name>
        <t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>
      </section>
      <section anchor="interoperability" numbered="true" toc="default">
        <name>Interoperability</name>
        <t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>
        <t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>
        <t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>
      </section>
      <section anchor="notational-conventions" numbered="true" toc="default">
        <name>Notational Conventions</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119" format="default"/>.</t>
        <t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234" format="default"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986" format="default"/>.</t>
        <t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949" format="default"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>
        <t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>
      </section>
    </section>
    <section anchor="client-registration" numbered="true" toc="default">
      <name>Client Registration</name>
      <t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>
      <t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>
      <t>When registering a client, the client developer SHALL:</t>
      <ul spacing="normal">
        <li>specify the client type as described in <xref target="client-types" format="default"/>,</li>
        <li>provide its client redirection URIs as described in <xref target="redirection-endpoint" format="default"/>,
and</li>
        <li>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</li>
      </ul>
      <section anchor="client-types" numbered="true" toc="default">
        <name>Client Types</name>
        <t>OAuth defines two client types, based on whether they can be issued
credentials that they can use to authenticate at the authorization server:</t>
        <dl newline="false" spacing="normal">
          <dt>"confidential":</dt>
          <dd>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</dd>
          <dt>"public":</dt>
          <dd>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</dd>
        </dl>
        <t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>
        <t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>
        <t>This specification has been designed around the following client
profiles:</t>
        <dl newline="false" spacing="normal">
          <dt>"web application":</dt>
          <dd>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</dd>
          <dt>"browser-based application":</dt>
          <dd>
  A browser-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</dd>
          <dt>"native application":</dt>
          <dd>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</dd>
        </dl>
      </section>
      <section anchor="client-identifier" numbered="true" toc="default">
        <name>Client Identifier</name>
        <t>The authorization server issues the registered client a client
identifier - a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>
        <t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>
        <t>Authorization servers SHOULD NOT allow clients to influence their
<tt>client_id</tt> or <tt>sub</tt> value or any other claim if that can cause
confusion with a genuine resource owner.</t>
      </section>
      <section anchor="client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>
        <t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or "private_key_jwt"
<xref target="OpenID" format="default"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>
        <t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>
        <t>The client MUST NOT use more than one authentication method in each
request.</t>
        <section anchor="client-password" numbered="true" toc="default">
          <name>Client Password</name>
          <t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617" format="default"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>
          <t>For example (with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork>
          <t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>
          <dl newline="false" spacing="normal">
            <dt>"client_id":</dt>
            <dd>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier" format="default"/>.</dd>
            <dt>"client_secret":</dt>
            <dd>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</dd>
          </dl>
          <t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>
          <t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token" format="default"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork>
          <t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests using password authentication.</t>
          <t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>
        </section>
        <section anchor="other-authorization-methods" numbered="true" toc="default">
          <name>Other Authorization Methods</name>
          <t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>
        </section>
      </section>
      <section anchor="unregistered-clients" numbered="true" toc="default">
        <name>Unregistered Clients</name>
        <t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>
      </section>
    </section>
    <section anchor="protocol-endpoints" numbered="true" toc="default">
      <name>Protocol Endpoints</name>
      <t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>
      <ul spacing="normal">
        <li>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</li>
        <li>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</li>
      </ul>
      <t>As well as one client endpoint:</t>
      <ul spacing="normal">
        <li>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</li>
      </ul>
      <t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>
      <section anchor="authorization-endpoint" numbered="true" toc="default">
        <name>Authorization Endpoint</name>
        <t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>
        <t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version" format="default"/> when sending requests to the
authorization endpoint.</t>
        <t>The authorization server MUST support the use of the HTTP <tt>GET</tt>
method <xref target="RFC2616" format="default"/> for the authorization endpoint and MAY support the
use of the <tt>POST</tt> method as well.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="response-type" numbered="true" toc="default">
          <name>Response Type</name>
          <t>The authorization endpoint is used by the authorization code flow.
The client informs the authorization server of the desired grant type
using the following parameter:</t>
          <dl newline="false" spacing="normal">
            <dt>"response_type":</dt>
            <dd>
  REQUIRED.  The value MUST be <tt>code</tt> for requesting an
authorization code as described by <xref target="authorization-request" format="default"/>, or a registered
extension value as described by <xref target="new-response-types" format="default"/>.</dd>
          </dl>
          <t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type <tt>a b</tt> is the same as <tt>b a</tt>).  The meaning of such composite
response types is defined by their respective specifications.</t>
          <t>For example, OpenID Connect defines <tt>response_type=id_token</tt> as well as a few
other combinations which include additional security features for those flows.</t>
          <t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response" format="default"/>.</t>
        </section>
        <section anchor="redirection-endpoint" numbered="true" toc="default">
          <name>Redirection Endpoint</name>
          <t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>
          <t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986" format="default"/>, Section 6.2.1.</t>
          <t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986" format="default"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986" format="default"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>
          <section anchor="endpoint-request-confidentiality" numbered="true" toc="default">
            <name>Endpoint Request Confidentiality</name>
            <t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version" format="default"/> when the requested response type is <tt>code</tt>,
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>
            <t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>
          </section>
          <section anchor="registration-requirements" numbered="true" toc="default">
            <name>Registration Requirements</name>
            <t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>
            <t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the <tt>state</tt> request
parameter to achieve per-request customization).</t>
            <t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>
            <t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors" format="default"/>.</t>
          </section>
          <section anchor="dynamic-configuration" numbered="true" toc="default">
            <name>Dynamic Configuration</name>
            <t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
<tt>redirect_uri</tt> request parameter.</t>
            <t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986" format="default"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986" format="default"/> Section 6.2.1.</t>
          </section>
          <section anchor="invalid-endpoint" numbered="true" toc="default">
            <name>Invalid Endpoint</name>
            <t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>
          </section>
          <section anchor="endpoint-content" numbered="true" toc="default">
            <name>Endpoint Content</name>
            <t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>
            <t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>
          </section>
        </section>
      </section>
      <section anchor="token-endpoint" numbered="true" toc="default">
        <name>Token Endpoint</name>
        <t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>
        <t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an <tt>application/x-www-form-urlencoded</tt>
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests to the token endpoint.</t>
        <t>The client MUST use the HTTP <tt>POST</tt> method when making access token
requests.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="token-endpoint-client-authentication" numbered="true" toc="default">
          <name>Client Authentication</name>
          <t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication" format="default"/> when making requests to the token endpoint.  Client
authentication is used for:</t>
          <ul spacing="normal">
            <li>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</li>
            <li>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</li>
            <li>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</li>
          </ul>
          <t>A client MAY use the <tt>client_id</tt> request parameter to identify itself
when sending requests to the token endpoint.  In the
<tt>authorization_code</tt> <tt>grant_type</tt> request to the token endpoint, an
unauthenticated client MUST send its <tt>client_id</tt> to prevent itself
from inadvertently accepting a code intended for a client with a
different <tt>client_id</tt>.  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>
        </section>
      </section>
      <section anchor="access-token-scope" numbered="true" toc="default">
        <name>Access Token Scope</name>
        <t>The authorization and token endpoints allow the client to specify the
scope of the access request using the <tt>scope</tt> request parameter.  In
turn, the authorization server uses the <tt>scope</tt> response parameter to
inform the client of the scope of the access token issued.</t>
        <t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>
        <artwork type="abnf" name="" align="left" alt=""><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork>
        <t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the <tt>scope</tt> response parameter to inform the
client of the actual scope granted.</t>
        <t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>
      </section>
    </section>
    <section anchor="obtaining-authorization" numbered="true" toc="default">
      <name>Obtaining Authorization</name>
      <t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>
      <section anchor="authorization-code-grant" numbered="true" toc="default">
        <name>Authorization Code Grant</name>
        <t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>
        <t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>
        <figure anchor="fig-authorization-code-flow">
          <name>Authorization Code Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-authorization-code-flow" format="default"/> includes the following steps:</t>
        <t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, PKCE code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>
        <t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>
        <t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>
        <t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>
        <t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>
        <section anchor="authorization-request" numbered="true" toc="default">
          <name>Authorization Request</name>
          <t>To begin the authorization request, the client builds the authorization
request URI by adding parameters to the authorization server's
authorization endpoint URI.</t>
          <t>Without a client secret, public clients would be susceptible to an authorization code
interception attack, where an attacker is able to intercept the authorization
response through various means and use the authorization code to obtain an access token.
To protect against this attack, as well as to protect against CSRF attacks,
the client first generates a unique secret per authorization request, which it can
later use along with the authorization code to prove that the application using the
authorization code is the same application that requested it. This practice is known
as "Proof-Key for Code Exchange", or PKCE, after the OAuth 2.0 extension (<xref target="RFC7636" format="default"/>)
where it was originally developed.</t>
          <section anchor="client-creates-a-pkce-code-verifier" numbered="true" toc="default">
            <name>Client Creates a PKCE Code Verifier</name>
            <t>The client first creates a PKCE code verifier, <tt>code_verifier</tt>, for each
Authorization Request, in the following manner:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork>
            <t>ABNF for <tt>code_verifier</tt> is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
            <t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL-safe string to use as the code verifier.</t>
          </section>
          <section anchor="client-creates-the-pkce-code-challenge" numbered="true" toc="default">
            <name>Client Creates the PKCE Code Challenge</name>
            <t>The client then creates a PKCE code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork>
            <t>If the client is capable of using <tt>S256</tt>, it MUST use <tt>S256</tt>, as
<tt>S256</tt> is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use <tt>plain</tt> only if they cannot support <tt>S256</tt> for some
technical reason and know via out-of-band configuration that the
server supports <tt>plain</tt>.</t>
            <t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>
            <t>ABNF for <tt>code_challenge</tt> is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
          </section>
          <section anchor="client-initiates-the-authorization-request" numbered="true" toc="default">
            <name>Client Initiates the Authorization Request</name>
            <t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the <tt>application/x-www-form-urlencoded</tt> format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"response_type":</dt>
              <dd>
  REQUIRED.  Value MUST be set to <tt>code</tt>.</dd>
              <dt>"client_id":</dt>
              <dd>
  REQUIRED.  The client identifier as described in <xref target="client-identifier" format="default"/>.</dd>
              <dt>"code_challenge":</dt>
              <dd>
  REQUIRED.  Code challenge.</dd>
              <dt>"code_challenge_method":</dt>
              <dd>
  OPTIONAL, defaults to <tt>plain</tt> if not present in the request.  Code
    nverifier transformation method is <tt>S256</tt> or <tt>plain</tt>.</dd>
              <dt>"redirect_uri":</dt>
              <dd>
  OPTIONAL.  As described in <xref target="redirection-endpoint" format="default"/>.</dd>
              <dt>"scope":</dt>
              <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
              <dt>"state":</dt>
              <dd>
  OPTIONAL.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.</dd>
            </dl>
            <t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>
            <t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork>
            <t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>
            <t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>
          </section>
        </section>
        <section anchor="authorization-response" numbered="true" toc="default">
          <name>Authorization Response</name>
          <t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the <tt>application/x-www-form-urlencoded</tt> format,
per Appendix B:</t>
          <dl newline="false" spacing="normal">
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</dd>
            <dt>"state":</dt>
            <dd>
  REQUIRED if the <tt>state</tt> parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
          </dl>
          <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork>
          <t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>
          <t>When the server issues the authorization code in the authorization
response, it MUST associate the <tt>code_challenge</tt> and
<tt>code_challenge_method</tt> values with the authorization code so it can
be verified later.</t>
          <t>Typically, the <tt>code_challenge</tt> and <tt>code_challenge_method</tt> values
are stored in encrypted form in the <tt>code</tt> itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the <tt>code_challenge</tt> value in client requests
in a form that other entities can extract.</t>
          <t>The exact method that the server uses to associate the
<tt>code_challenge</tt> with the issued <tt>code</tt> is out of scope for this
specification.</t>
          <section anchor="authorization-code-error-response" numbered="true" toc="default">
            <name>Error Response</name>
            <t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>
            <t>If the client does not send the <tt>code_challenge</tt> in
the request, the authorization endpoint MUST return the authorization
error response with the <tt>error</tt> value set to <tt>invalid_request</tt>.  The
<tt>error_description</tt> or the response of <tt>error_uri</tt> SHOULD explain the
nature of error, e.g., code challenge required.</t>
            <t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with <tt>error</tt> value set to
<tt>invalid_request</tt>.  The <tt>error_description</tt> or the response of
<tt>error_uri</tt> SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>
            <t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
<tt>application/x-www-form-urlencoded</tt> format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"error":</dt>
              <dd>
                <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the
following:

                </t>
                <dl newline="false" spacing="normal">
                  <dt>"invalid_request":</dt>
                  <dd>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</dd>
                  <dt>"unauthorized_client":</dt>
                  <dd>
        The client is not authorized to request an authorization
code using this method.</dd>
                  <dt>"access_denied":</dt>
                  <dd>
        The resource owner or authorization server denied the
request.</dd>
                  <dt>"unsupported_response_type":</dt>
                  <dd>
        The authorization server does not support obtaining an
authorization code using this method.</dd>
                  <dt>"invalid_scope":</dt>
                  <dd>
        The requested scope is invalid, unknown, or malformed.</dd>
                  <dt>"server_error":</dt>
                  <dd>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</dd>
                  <dt>"temporarily_unavailable":</dt>
                  <dd>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</dd>
                </dl>
                <t>

Values for the <tt>error</tt> parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
              </dd>
              <dt>"error_description":</dt>
              <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the <tt>error_description</tt> parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
              <dt>"error_uri":</dt>
              <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the <tt>error_uri</tt> parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
              <dt>"state":</dt>
              <dd>
  REQUIRED if a <tt>state</tt> parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
            </dl>
            <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork>
          </section>
        </section>
        <section anchor="access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by sending the
following parameters using the <tt>application/x-www-form-urlencoded</tt>
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to <tt>authorization_code</tt>.</dd>
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code received from the
authorization server.</dd>
            <dt>"redirect_uri":</dt>
            <dd>
  REQUIRED, if the <tt>redirect_uri</tt> parameter was included in the
authorization request as described in <xref target="authorization-request" format="default"/>, and their
values MUST be identical.</dd>
            <dt>"client_id":</dt>
            <dd>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</dd>
            <dt>"code_verifier":</dt>
            <dd>
  REQUIRED.  Code verifier</dd>
          </dl>
          <t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork>
          <t>The authorization server MUST:</t>
          <ul spacing="normal">
            <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
            <li>authenticate the client if client authentication is included,</li>
            <li>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to <tt>client_id</tt> in the request,</li>
            <li>verify that the authorization code is valid,</li>
            <li>verify the <tt>code_verifier</tt> by calculating the code challenge from the received
<tt>code_verifier</tt> and comparing it with the previously associated
<tt>code_challenge</tt>, after first transforming it according to the
<tt>code_challenge_method</tt> method specified by the client, and</li>
            <li>ensure that the <tt>redirect_uri</tt> parameter is present if the
<tt>redirect_uri</tt> parameter was included in the initial authorization
request as described in <xref target="authorization-request" format="default"/>, and if included ensure that
their values are identical.</li>
          </ul>
        </section>
        <section anchor="authorization-code-access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="client-credentials-grant" numbered="true" toc="default">
        <name>Client Credentials Grant</name>
        <t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>
        <t>The client credentials grant type MUST only be used by confidential
clients.</t>
        <figure anchor="fig-client-credentials-flow">
          <name>Client Credentials Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-client-credentials-flow" format="default"/> includes the following steps:</t>
        <t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>
        <t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>
        <section anchor="authorization-request-and-response" numbered="true" toc="default">
          <name>Authorization Request and Response</name>
          <t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>
        </section>
        <section anchor="client-credentials-access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by adding the
following parameters using the <tt>application/x-www-form-urlencoded</tt>
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to <tt>client_credentials</tt>.</dd>
            <dt>"scope":</dt>
            <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
          </dl>
          <t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork>
          <t>The authorization server MUST authenticate the client.</t>
        </section>
        <section anchor="access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response" format="default"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="extension-grants" numbered="true" toc="default">
        <name>Extension Grants</name>
        <t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the <tt>grant_type</tt> parameter of the token endpoint, and by
adding any additional parameters necessary.</t>
        <t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522" format="default"/>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork>
        <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      </section>
    </section>
    <section anchor="issuing-an-access-token" numbered="true" toc="default">
      <name>Issuing an Access Token</name>
      <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <section anchor="access-token-successful-response" numbered="true" toc="default">
        <name>Successful Response</name>
        <t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>
        <dl newline="false" spacing="normal">
          <dt>"access_token":</dt>
          <dd>
  REQUIRED.  The access token issued by the authorization server.</dd>
          <dt>"token_type":</dt>
          <dd>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types" format="default"/>.  Value is case insensitive.</dd>
          <dt>"expires_in":</dt>
          <dd>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value <tt>3600</tt> denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</dd>
          <dt>"refresh_token":</dt>
          <dd>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token" format="default"/>.</dd>
          <dt>"scope":</dt>
          <dd>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope" format="default"/>.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the <tt>application/json</tt> media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>
        <t>The authorization server MUST include the HTTP <tt>Cache-Control</tt>
response header field <xref target="RFC2616" format="default"/> with a value of <tt>no-store</tt> in any
response containing tokens, credentials, or other sensitive
information, as well as the <tt>Pragma</tt> response header field <xref target="RFC2616" format="default"/>
with a value of <tt>no-cache</tt>.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork>
        <t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>
      </section>
      <section anchor="access-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <dl newline="false" spacing="normal">
          <dt>"error":</dt>
          <dd>
            <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the following:

            </t>
            <dl newline="false" spacing="normal">
              <dt>"invalid_request":</dt>
              <dd>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</dd>
              <dt>"invalid_client":</dt>
              <dd>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the <tt>Authorization</tt>
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the <tt>WWW-Authenticate</tt> response header field
matching the authentication scheme used by the client.</dd>
              <dt>"invalid_grant":</dt>
              <dd>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</dd>
              <dt>"unauthorized_client":</dt>
              <dd>
        The authenticated client is not authorized to use this
authorization grant type.</dd>
              <dt>"unsupported_grant_type":</dt>
              <dd>
        The authorization grant type is not supported by the
authorization server.</dd>
              <dt>"invalid_scope":</dt>
              <dd>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</dd>
            </dl>
            <t>

Values for the <tt>error</tt> parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
          </dd>
          <dt>"error_description":</dt>
          <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the <tt>error_description</tt> parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
          <dt>"error_uri":</dt>
          <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the <tt>error_uri</tt> parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the <tt>application/json</tt> media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork>
      </section>
    </section>
    <section anchor="refreshing-an-access-token" numbered="true" toc="default">
      <name>Refreshing an Access Token</name>
      <t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>
      <t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>
      <t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the <tt>application/x-www-form-urlencoded</tt>
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
      <dl newline="false" spacing="normal">
        <dt>"grant_type":</dt>
        <dd>
  REQUIRED.  Value MUST be set to <tt>refresh_token</tt>.</dd>
        <dt>"refresh_token":</dt>
        <dd>
  REQUIRED.  The refresh token issued to the client.</dd>
        <dt>"scope":</dt>
        <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</dd>
      </dl>
      <t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
      <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork>
      <t>The authorization server MUST:</t>
      <ul spacing="normal">
        <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
        <li>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</li>
        <li>validate the refresh token.</li>
      </ul>
      <t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>
      <ul spacing="normal">
        <li>
          <em>Sender-constrained refresh tokens:</em> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding" format="default"/> or <xref target="RFC8705" format="default"/>.</li>
        <li>
          <t><em>Refresh token rotation:</em> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  </t>
          <t>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
        </li>
      </ul>
      <t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>
      <t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>
      <ul spacing="normal">
        <li>password change</li>
        <li>logout at the authorization server</li>
      </ul>
      <t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>
    </section>
    <section anchor="accessing-protected-resources" numbered="true" toc="default">
      <name>Accessing Protected Resources</name>
      <t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>
      <t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP <tt>Authorization</tt> request header field <xref target="RFC2617" format="default"/> with an
authentication scheme defined by the specification of the access
token type used, such as <tt>Bearer</tt>, defined below.</t>
      <section anchor="access-token-types" numbered="true" toc="default">
        <name>Access Token Types</name>
        <t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>
        <t>For example, the <tt>Bearer</tt> token type defined in this specification is utilized
by simply including the access token string in the request:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
        <t>The above example is provided for illustration purposes only.</t>
        <t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the <tt>access_token</tt> response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>
      </section>
      <section anchor="bearer-tokens" numbered="true" toc="default">
        <name>Bearer Tokens</name>
        <t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>
        <t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>
        <section anchor="authenticated-requests" numbered="true" toc="default">
          <name>Authenticated Requests</name>
          <t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>
          <section anchor="authorization-request-header-field" numbered="true" toc="default">
            <name>Authorization Request Header Field</name>
            <t>When sending the access token in the <tt>Authorization</tt> request header
field defined by HTTP/1.1 <xref target="RFC2617" format="default"/>, the client uses the <tt>Bearer</tt>
authentication scheme to transmit the access token.</t>
            <t>For example:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
            <t>The syntax of the <tt>Authorization</tt> header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617" format="default"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617" format="default"/> but is compatible
with the general authentication framework in HTTP 1.1 Authentication
<xref target="RFC7235" format="default"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork>
            <t>Clients SHOULD make authenticated requests with a bearer token using
the <tt>Authorization</tt> request header field with the <tt>Bearer</tt> HTTP
authorization scheme.  Resource servers MUST support this method.</t>
          </section>
          <section anchor="form-encoded-body-parameter" numbered="true" toc="default">
            <name>Form-Encoded Body Parameter</name>
            <t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
<tt>access_token</tt> parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>
            <ul spacing="normal">
              <li>The HTTP request entity-header includes the <tt>Content-Type</tt> header
field set to <tt>application/x-www-form-urlencoded</tt>.</li>
              <li>The entity-body follows the encoding requirements of the
<tt>application/x-www-form-urlencoded</tt> content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224" format="default"/>.</li>
              <li>The HTTP request entity-body is single-part.</li>
              <li>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII" format="default"/> characters.</li>
              <li>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the <tt>GET</tt>
method MUST NOT be used.</li>
            </ul>
            <t>The entity-body MAY include other request-specific parameters, in
which case the <tt>access_token</tt> parameter MUST be properly separated
from the request-specific parameters using <tt>&amp;</tt> character(s) (ASCII
code 38).</t>
            <t>For example, the client makes the following HTTP request using
transport-layer security:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork>
            <t>The <tt>application/x-www-form-urlencoded</tt> method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the <tt>Authorization</tt> request header field.  Resource
servers MAY support this method.</t>
          </section>
        </section>
        <section anchor="the-www-authenticate-response-header-field" numbered="true" toc="default">
          <name>The WWW-Authenticate Response Header Field</name>
          <t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
<tt>WWW-Authenticate</tt> response header field; it MAY include it in
response to other conditions as well.  The <tt>WWW-Authenticate</tt> header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617" format="default"/>.</t>
          <t>All challenges defined by this specification MUST use the auth-scheme
value <tt>Bearer</tt>.  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>
          <t>A <tt>realm</tt> attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617" format="default"/>.  The
<tt>realm</tt> attribute MUST NOT appear more than once.</t>
          <t>The <tt>scope</tt> attribute is defined in <xref target="access-token-scope" format="default"/>.  The
<tt>scope</tt> attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. <tt>scope</tt> values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of <tt>scope</tt> values
is not significant.  In some cases, the <tt>scope</tt> value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the <tt>scope</tt> attribute is
OPTIONAL.  The <tt>scope</tt> attribute MUST NOT appear more than once.  The
<tt>scope</tt> value is intended for programmatic use and is not meant to be
displayed to end-users.</t>
          <t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages" format="default"/> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP" format="default"/>
OAuth 2.0 use cases, respectively:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork>
          <t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the <tt>error</tt>
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes" format="default"/>.  In addition, the resource server MAY include the
<tt>error_description</tt> attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the <tt>error_uri</tt> attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
<tt>error</tt>, <tt>error_description</tt>, and <tt>error_uri</tt> attributes MUST NOT
appear more than once.</t>
          <t>Values for the <tt>scope</tt> attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the <tt>error</tt> and <tt>error_description</tt>
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the <tt>error_uri</tt> attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>
          <t>For example, in response to a protected resource request without
authentication:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
          <t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork>
        </section>
      </section>
      <section anchor="bearer-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry" format="default"/> for error values to be shared among
OAuth token authentication schemes.</t>
        <t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>
        <t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be <tt>error</tt>.</t>
        <t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>
        <t>New authentication schemes MAY choose to also specify the use of the
<tt>error_description</tt> and <tt>error_uri</tt> parameters to return error
information in a manner parallel to their usage in this
specification.</t>
        <section anchor="bearer-token-error-codes" numbered="true" toc="default">
          <name>Error Codes</name>
          <t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>
          <dl newline="false" spacing="normal">
            <dt>"invalid_request":</dt>
            <dd>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</dd>
            <dt>"invalid_token":</dt>
            <dd>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</dd>
            <dt>"insufficient_scope":</dt>
            <dd>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the <tt>scope</tt>
attribute with the scope necessary to access the protected
resource.</dd>
          </dl>
          <t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>
          <t>For example:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
        </section>
      </section>
      <section anchor="access-token-security-considerations" numbered="true" toc="default">
        <name>Access Token Security Considerations</name>
        <section anchor="security-threats" numbered="true" toc="default">
          <name>Security Threats</name>
          <t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63" format="default"/>.</t>
          <section anchor="token-manufacturemodification" numbered="true" toc="default">
            <name>Token manufacture/modification</name>
            <t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>
          </section>
          <section anchor="token-disclosure" numbered="true" toc="default">
            <name>Token disclosure</name>
            <t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>
          </section>
          <section anchor="token-redirect" numbered="true" toc="default">
            <name>Token redirect</name>
            <t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>
          </section>
          <section anchor="token-replay" numbered="true" toc="default">
            <name>Token replay</name>
            <t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>
          </section>
        </section>
        <section anchor="threat-mitigation" numbered="true" toc="default">
          <name>Threat Mitigation</name>
          <t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>
          <t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>
          <t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>
          <t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>
          <t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280" format="default"/>.</t>
          <t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265" format="default"/> for security
considerations about cookies.</t>
          <t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>
          <t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818" format="default"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>
        </section>
        <section anchor="summary-of-recommendations" numbered="true" toc="default">
          <name>Summary of Recommendations</name>
          <section anchor="safeguard-bearer-tokens" numbered="true" toc="default">
            <name>Safeguard bearer tokens</name>
            <t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>
          </section>
          <section anchor="validate-tls-certificate-chains" numbered="true" toc="default">
            <name>Validate TLS certificate chains</name>
            <t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>
          </section>
          <section anchor="always-use-tls-https" numbered="true" toc="default">
            <name>Always use TLS (https)</name>
            <t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>
          </section>
          <section anchor="dont-store-bearer-tokens-in-http-cookies" numbered="true" toc="default">
            <name>Don't store bearer tokens in HTTP cookies</name>
            <t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>
          </section>
          <section anchor="issue-short-lived-bearer-tokens" numbered="true" toc="default">
            <name>Issue short-lived bearer tokens</name>
            <t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>
          </section>
          <section anchor="issue-scoped-bearer-tokens" numbered="true" toc="default">
            <name>Issue scoped bearer tokens</name>
            <t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>
          </section>
          <section anchor="dont-pass-bearer-tokens-in-page-urls" numbered="true" toc="default">
            <name>Don't pass bearer tokens in page URLs</name>
            <t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>
          </section>
        </section>
        <section anchor="token-replay-prevention" numbered="true" toc="default">
          <name>Token Replay Prevention</name>
          <t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>
          <t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>.
The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
          <t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Section 4.11 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>
for further security advice.</t>
        </section>
        <section anchor="access-token-privilege-restriction" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters <tt>scope</tt> or <tt>resource</tt> as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators" format="default"/>, respectively, to
determine the resource server they want to access.</t>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter <tt>scope</tt> and
<tt>authorization_details</tt> as specified in <xref target="I-D.ietf-oauth-rar" format="default"/> to
determine those resources and/or actions.</t>
        </section>
      </section>
    </section>
    <section anchor="extensibility" numbered="true" toc="default">
      <name>Extensibility</name>
      <section anchor="defining-access-token-types" numbered="true" toc="default">
        <name>Defining Access Token Types</name>
        <t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry" format="default"/>), or by using a unique absolute URI as its name.</t>
        <t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>
        <t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617" format="default"/>).  The token type
<tt>example</tt> is reserved for use in examples.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="defining-new-endpoint-parameters" numbered="true" toc="default">
        <name>Defining New Endpoint Parameters</name>
        <t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry" format="default"/>.</t>
        <t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
        <t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>
      </section>
      <section anchor="defining-new-authorization-grant-types" numbered="true" toc="default">
        <name>Defining New Authorization Grant Types</name>
        <t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the <tt>grant_type</tt> parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry" format="default"/>.</t>
      </section>
      <section anchor="new-response-types" numbered="true" toc="default">
        <name>Defining New Authorization Endpoint Response Types</name>
        <t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry" format="default"/>.  Response type
names MUST conform to the response-type ABNF.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork>
        <t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>
        <t>For example, the response type <tt>token code</tt> is left undefined by this
specification.  However, an extension can define and register the
<tt>token code</tt> response type.  Once registered, the same combination
cannot be registered as <tt>code token</tt>, but both values can be used to
denote the same response type.</t>
      </section>
      <section anchor="defining-additional-error-codes" numbered="true" toc="default">
        <name>Defining Additional Error Codes</name>
        <t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response" format="default"/>), the token error response (<xref target="access-token-error-response" format="default"/>), or the
resource access error response (<xref target="bearer-token-error-response" format="default"/>), such error codes MAY be
defined.</t>
        <t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry" format="default"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>
        <t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter <tt>example</tt> SHOULD be
named <tt>example_invalid</tt>.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in <xref target="client-types" format="default"/>: web application,
browser-based application, and native application.</t>
      <t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819" format="default"/> and <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="security-client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or
<tt>private_key_jwt</tt> <xref target="OpenID" format="default"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>
        <t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>
        <t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity - for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>
        <t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>
        <t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>
        <section anchor="client-authentication-of-native-apps" numbered="true" toc="default">
          <name>Client Authentication of Native Apps</name>
          <t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <tt>client_id</tt> request parameter.</t>
          <t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types" format="default"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation" format="default"/>).</t>
        </section>
      </section>
      <section anchor="native-app-registration" numbered="true" toc="default">
        <name>Registration of Native App Clients</name>
        <t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591" format="default"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types" format="default"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>
        <t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>
        <t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme" format="default"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<tt>.</tt>)
SHOULD be rejected.</t>
        <t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <tt>com.example.app</tt>,
the owner of <tt>example.com</tt> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>
        <t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>
      </section>
      <section anchor="client-impersonation" numbered="true" toc="default">
        <name>Client Impersonation</name>
        <t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>
        <t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>
        <t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>
        <t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>
        <section anchor="native-app-client-impersonation" numbered="true" toc="default">
          <name>Impersonation of Native Apps</name>
          <t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id -
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>
          <t>Measures such as claimed <tt>https</tt> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>
        </section>
      </section>
      <section anchor="access-tokens" numbered="true" toc="default">
        <name>Access Tokens</name>
        <t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>
        <section anchor="access-token-privilege-restriction-1" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>
          <t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <tt>scope</tt> or <tt>resource</tt> as specified in
<xref target="RFC8707" format="default"/>, respectively, to determine the
resource server they want to access.</t>
        </section>
        <section anchor="access-token-replay-prevention" numbered="true" toc="default">
          <name>Access Token Replay Prevention</name>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <tt>scope</tt> and <tt>authorization_details</tt> as specified in
<xref target="I-D.ietf-oauth-rar" format="default"/> to determine those resources and/or actions.</t>
          <t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
        </section>
      </section>
      <section anchor="refresh-tokens" numbered="true" toc="default">
        <name>Refresh Tokens</name>
        <t>Authorization servers MAY issue refresh tokens to clients.</t>
        <t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>
        <t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>
      </section>
      <section anchor="protecting-redirect-based-flows" numbered="true" toc="default">
        <name>Protecting Redirect-Based Flows</name>
        <t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>
        <t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>
        <t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819" format="default"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <tt>nonce</tt> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <tt>state</tt> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>
        <t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>
        <t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>
        <section anchor="loopback-redirect-considerations-in-native-apps" numbered="true" toc="default">
          <name>Loopback Redirect Considerations in Native Apps</name>
          <t>Loopback interface redirect URIs use the <tt>http</tt> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>
          <t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>
          <t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>
          <t>While redirect URIs using localhost (i.e.,
<tt>http://localhost:{port}/{path}</tt>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection" format="default"/>, the use of <tt>localhost</tt> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <tt>localhost</tt> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>
        </section>
      </section>
      <section anchor="authorization-codes" numbered="true" toc="default">
        <name>Authorization Codes</name>
        <t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>
        <t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>
        <t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>
        <t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <tt>nonce</tt> parameter and
ID Token Claim <xref target="OpenID" format="default"/> MAY be used as well. The PKCE challenge or
OpenID Connect <tt>nonce</tt> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>
        <t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>
        <t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <tt>S256</tt> is the only such method.</t>
        <t>Authorization servers MUST support PKCE.</t>
        <t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<tt>code_challenge_methods_supported</tt> in their AS metadata (<xref target="RFC8418" format="default"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>
      </section>
      <section anchor="request-confidentiality" numbered="true" toc="default">
        <name>Request Confidentiality</name>
        <t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>
        <t>The <tt>state</tt> and <tt>scope</tt> parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>
      </section>
      <section anchor="ensuring-endpoint-authenticity" numbered="true" toc="default">
        <name>Ensuring Endpoint Authenticity</name>
        <t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818" format="default"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125" format="default"/> and in accordance with its
requirements for server identity authentication.</t>
      </section>
      <section anchor="credentials-guessing-attacks" numbered="true" toc="default">
        <name>Credentials-Guessing Attacks</name>
        <t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>
        <t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>
        <t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>
      </section>
      <section anchor="phishing-attacks" numbered="true" toc="default">
        <name>Phishing Attacks</name>
        <t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>
        <t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>
        <t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>
      </section>
      <section anchor="fake-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Fake External User-Agents in Native Apps</name>
        <t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>
        <t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>
        <t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>
        <t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>
      </section>
      <section anchor="malicious-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Malicious External User-Agents in Native Apps</name>
        <t>If a malicious app is able to configure itself as the default handler
for <tt>https</tt> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>
        <t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <tt>http</tt> and <tt>https</tt> scheme URIs.</t>
      </section>
      <section anchor="csrf_countermeasures" numbered="true" toc="default">
        <name>Cross-Site Request Forgery</name>
        <t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>
        <t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <tt>state</tt> parameter to the authorization
server as described in <xref target="RFC6819" format="default"/>. The same protection is provided by
PKCE or the OpenID Connect <tt>nonce</tt> value.</t>
        <t>When using PKCE instead of <tt>state</tt> or <tt>nonce</tt> for CSRF protection, it is
important to note that:</t>
        <ul spacing="normal">
          <li>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<tt>state</tt> or <tt>nonce</tt> MUST be used for CSRF protection.</li>
          <li>If <tt>state</tt> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <tt>state</tt> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state" format="default"/>.</li>
        </ul>
        <t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414" format="default"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>
      </section>
      <section anchor="clickjacking" numbered="true" toc="default">
        <name>Clickjacking</name>
        <t>As described in Section 4.4.1.9 of <xref target="RFC6819" format="default"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>
        <t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819" format="default"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2" format="default"/> or greater.</t>
        <t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>
        <t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2" format="default"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <tt>frame-ancestors</tt>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <tt>script-src</tt>). A non-normative
example of such a policy is shown in the following listing:</t>
        <t><tt>
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</tt></t>
        <t>Because some user agents do not support <xref target="CSP-2" format="default"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819" format="default"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>
      </section>
      <section anchor="code-injection-and-input-validation" numbered="true" toc="default">
        <name>Code Injection and Input Validation</name>
        <t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>
        <t>The authorization server and client MUST sanitize (and validate when
possible) any value received - in particular, the value of the
<tt>state</tt> and <tt>redirect_uri</tt> parameters.</t>
      </section>
      <section anchor="open-redirectors" numbered="true" toc="default">
        <name>Open Redirectors</name>
        <t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>
        <section anchor="open_redirector_on_client" numbered="true" toc="default">
          <name>Client as Open Redirector</name>
          <t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>
          <t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir" format="default"/>.</t>
        </section>
        <section anchor="authorization-server-as-open-redirector" numbered="true" toc="default">
          <name>Authorization Server as Open Redirector</name>
          <t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>
          <t><xref target="authorization-code-error-response" format="default"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <tt>client_id</tt> and <tt>redirect_uri</tt>.</t>
          <t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591" format="default"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>
          <t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>
        </section>
      </section>
      <section anchor="authorization-server-mix-up-mitigation-in-native-apps" numbered="true" toc="default">
        <name>Authorization Server Mix-Up Mitigation in Native Apps</name>
        <t>(TODO: merge this with the regular mix-up section when it is brought in)</t>
        <t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>
        <t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with <tt>state</tt>
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>
        <t>The requirement of <xref target="native-app-registration" format="default"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>
      </section>
      <section anchor="native-apps-embedded-user-agents" numbered="true" toc="default">
        <name>Embedded User Agents in Native Apps</name>
        <t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>
        <t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>
        <t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>
        <t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>
        <t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>
      </section>
      <section anchor="other-recommendations" numbered="true" toc="default">
        <name>Other Recommendations</name>
        <t>Authorization servers SHOULD NOT allow clients to influence their
<tt>client_id</tt> or <tt>sub</tt> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>
      </section>
    </section>
    <section anchor="native-applications" numbered="true" toc="default">
      <name>Native Applications</name>
      <t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>
      <t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>
      <t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
      <t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See <xref target="native-apps-embedded-user-agents" format="default"/>
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>
      <t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>
      <t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>
      <section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" numbered="true" toc="default">
        <name>Using Inter-App URI Communication for OAuth in Native Apps</name>
        <t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>
        <t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>
        <t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app" format="default"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app" format="default"/>).</t>
      </section>
      <section anchor="authorization-request-native-app" numbered="true" toc="default">
        <name>Initiating the Authorization Request from a Native App</name>
        <t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant" format="default"/>
using a redirect URI capable of being received by the native app.</t>
        <t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app" format="default"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>
        <t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling <tt>http</tt> and <tt>https</tt> scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>
        <t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>
        <t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>
      </section>
      <section anchor="authorization-response-native-app" numbered="true" toc="default">
        <name>Receiving the Authorization Response in a Native App</name>
        <t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>
        <t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>
        <section anchor="private-use-uri-scheme" numbered="true" toc="default">
          <name>Private-Use URI Scheme Redirection</name>
          <t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <tt>com.example.app</tt>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>
          <t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>
          <t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595" format="default"/> for
private-use URI schemes.</t>
          <t>For example, an app that controls the domain name <tt>app.example.com</tt>
can use <tt>com.example.app</tt> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<tt>client1234.usercontent.example.net</tt>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <tt>myapp</tt>, however, would not meet this requirement, as
it is not based on a domain name.</t>
          <t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>
          <t>Following the requirements of Section 3.2 of <xref target="RFC3986" format="default"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<tt>/</tt>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork>
          <t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>
        </section>
        <section anchor="claimed-https-scheme-uri-redirection" numbered="true" toc="default">
          <name>Claimed "https" Scheme URI Redirection</name>
          <t>Some operating systems allow apps to claim <tt>https</tt> scheme <xref target="RFC7230" format="default"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>
          <t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork>
          <t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
<xref target="native-app-registration" format="default"/> that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>
          <t>App-claimed <tt>https</tt> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>
        </section>
        <section anchor="loopback-interface-redirection" numbered="true" toc="default">
          <name>Loopback Interface Redirection</name>
          <t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>
          <t>Loopback redirect URIs use the <tt>http</tt> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>
          <t>That is, <tt>http://127.0.0.1:{port}/{path}</tt> for IPv4, and
<tt>http://[::1]:{port}/{path}</tt> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork>
          <t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork>
          <t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>
          <t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>
        </section>
      </section>
    </section>
    <section anchor="browser-based-apps" numbered="true" toc="default">
      <name>Browser-Based Apps</name>
      <t>Browser-based apps are are clients that run in a web browser, typically
written in JavaScript, also known as "single-page apps". These types of apps
have particular security considerations similar to native apps.</t>
      <t>TODO: Bring in the normative text of the browser-based apps BCP when it is finalized.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="access-token-registry" numbered="true" toc="default">
        <name>OAuth Access Token Types Registry</name>
        <t>This specification establishes the OAuth Access Token Types registry.</t>
        <t>Access token types are registered with a Specification Required
(<xref target="RFC5226" format="default"/>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Additional Token Endpoint Response Parameters:</dt>
            <dd>
  Additional response parameters returned together with the
<tt>access_token</tt> parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry" format="default"/>.</dd>
            <dt>HTTP Authentication Scheme(s):</dt>
            <dd>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Access Token Types registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Type name: Bearer</li>
            <li>Additional Token Endpoint Response Parameters: (none)</li>
            <li>HTTP Authentication Scheme(s): Bearer</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
      <section anchor="parameters-registry" numbered="true" toc="default">
        <name>OAuth Parameters Registry</name>
        <t>This specification establishes the OAuth Parameters registry.</t>
        <t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226" format="default"/>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Parameter name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Parameter usage location:</dt>
            <dd>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-1" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Parameters registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Parameter name: client_id</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: client_secret</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: response_type</li>
            <li>Parameter usage location: authorization request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: redirect_uri</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: scope</li>
            <li>Parameter usage location: authorization request, authorization
response, token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: state</li>
            <li>Parameter usage location: authorization request, authorization
response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: code</li>
            <li>Parameter usage location: authorization response, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_description</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_uri</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: grant_type</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: access_token</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: token_type</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: expires_in</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: username</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: password</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: refresh_token</li>
            <li>Parameter usage location: token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="response-types-registry" numbered="true" toc="default">
        <name>OAuth Authorization Endpoint Response Types Registry</name>
        <t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>
        <t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226" format="default"/>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-2" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Response type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>
          <ul spacing="normal">
            <li>Response type name: code</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="error-registry" numbered="true" toc="default">
        <name>OAuth Extensions Error Registry</name>
        <t>This specification establishes the OAuth Extensions Error registry.</t>
        <t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226" format="default"/>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-3" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Error name:</dt>
            <dd>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</dd>
            <dt>Error usage location:</dt>
            <dd>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response" format="default"/>), token error response (<xref target="access-token-error-response" format="default"/>), or resource
access error response (<xref target="bearer-token-error-response" format="default"/>).</dd>
            <dt>Related protocol extension:</dt>
            <dd>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-3" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Error registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Error name: invalid_request</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: invalid_token</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: insufficient_scope</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <seriesInfo name="DOI" value="10.17487/RFC2119"/>
            <seriesInfo name="RFC" value="2119"/>
            <seriesInfo name="BCP" value="14"/>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2616" target="https://www.rfc-editor.org/info/rfc2616" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
          <front>
            <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
            <seriesInfo name="DOI" value="10.17487/RFC2616"/>
            <seriesInfo name="RFC" value="2616"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="J." surname="Gettys" fullname="J. Gettys">
              <organization/>
            </author>
            <author initials="J." surname="Mogul" fullname="J. Mogul">
              <organization/>
            </author>
            <author initials="H." surname="Frystyk" fullname="H. Frystyk">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as "HTTP/1.1", and is an update to RFC 2068.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2617" target="https://www.rfc-editor.org/info/rfc2617" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
          <front>
            <title>HTTP Authentication: Basic and Digest Access Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC2617"/>
            <seriesInfo name="RFC" value="2617"/>
            <author initials="J." surname="Franks" fullname="J. Franks">
              <organization/>
            </author>
            <author initials="P." surname="Hallam-Baker" fullname="P. Hallam-Baker">
              <organization/>
            </author>
            <author initials="J." surname="Hostetler" fullname="J. Hostetler">
              <organization/>
            </author>
            <author initials="S." surname="Lawrence" fullname="S. Lawrence">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="A." surname="Luotonen" fullname="A. Luotonen">
              <organization/>
            </author>
            <author initials="L." surname="Stewart" fullname="L. Stewart">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>This document provides the specification for HTTP's authentication framework, the original Basic authentication scheme and a scheme based on cryptographic hashes, referred to as "Digest Access Authentication". [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2818" target="https://www.rfc-editor.org/info/rfc2818" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
          <front>
            <title>HTTP Over TLS</title>
            <seriesInfo name="DOI" value="10.17487/RFC2818"/>
            <seriesInfo name="RFC" value="2818"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2000" month="May"/>
            <abstract>
              <t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3629" target="https://www.rfc-editor.org/info/rfc3629" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <seriesInfo name="DOI" value="10.17487/RFC3629"/>
            <seriesInfo name="RFC" value="3629"/>
            <seriesInfo name="STD" value="63"/>
            <author initials="F." surname="Yergeau" fullname="F. Yergeau">
              <organization/>
            </author>
            <date year="2003" month="November"/>
            <abstract>
              <t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <seriesInfo name="DOI" value="10.17487/RFC3986"/>
            <seriesInfo name="RFC" value="3986"/>
            <seriesInfo name="STD" value="66"/>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <date year="2005" month="January"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4627" target="https://www.rfc-editor.org/info/rfc4627" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
          <front>
            <title>The application/json Media Type for JavaScript Object Notation (JSON)</title>
            <seriesInfo name="DOI" value="10.17487/RFC4627"/>
            <seriesInfo name="RFC" value="4627"/>
            <author initials="D." surname="Crockford" fullname="D. Crockford">
              <organization/>
            </author>
            <date year="2006" month="July"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <seriesInfo name="DOI" value="10.17487/RFC4949"/>
            <seriesInfo name="RFC" value="4949"/>
            <seriesInfo name="FYI" value="36"/>
            <author initials="R." surname="Shirey" fullname="R. Shirey">
              <organization/>
            </author>
            <date year="2007" month="August"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5226" target="https://www.rfc-editor.org/info/rfc5226" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <seriesInfo name="DOI" value="10.17487/RFC5226"/>
            <seriesInfo name="RFC" value="5226"/>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization/>
            </author>
            <author initials="H." surname="Alvestrand" fullname="H. Alvestrand">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t>
              <t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t>
              <t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <seriesInfo name="DOI" value="10.17487/RFC5234"/>
            <seriesInfo name="RFC" value="5234"/>
            <seriesInfo name="STD" value="68"/>
            <author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
              <organization/>
            </author>
            <author initials="P." surname="Overell" fullname="P. Overell">
              <organization/>
            </author>
            <date year="2008" month="January"/>
            <abstract>
              <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6125" target="https://www.rfc-editor.org/info/rfc6125" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
          <front>
            <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC6125"/>
            <seriesInfo name="RFC" value="6125"/>
            <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre">
              <organization/>
            </author>
            <author initials="J." surname="Hodges" fullname="J. Hodges">
              <organization/>
            </author>
            <date year="2011" month="March"/>
            <abstract>
              <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6749" target="https://www.rfc-editor.org/info/rfc6749" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework</title>
            <seriesInfo name="DOI" value="10.17487/RFC6749"/>
            <seriesInfo name="RFC" value="6749"/>
            <author initials="D." surname="Hardt" fullname="D. Hardt" role="editor">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6750" target="https://www.rfc-editor.org/info/rfc6750" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
            <seriesInfo name="DOI" value="10.17487/RFC6750"/>
            <seriesInfo name="RFC" value="6750"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="D." surname="Hardt" fullname="D. Hardt">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <seriesInfo name="DOI" value="10.17487/RFC8446"/>
            <seriesInfo name="RFC" value="8446"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <seriesInfo name="DOI" value="10.17487/RFC5280"/>
            <seriesInfo name="RFC" value="5280"/>
            <author initials="D." surname="Cooper" fullname="D. Cooper">
              <organization/>
            </author>
            <author initials="S." surname="Santesson" fullname="S. Santesson">
              <organization/>
            </author>
            <author initials="S." surname="Farrell" fullname="S. Farrell">
              <organization/>
            </author>
            <author initials="S." surname="Boeyen" fullname="S. Boeyen">
              <organization/>
            </author>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <author initials="W." surname="Polk" fullname="W. Polk">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7595" target="https://www.rfc-editor.org/info/rfc7595" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
          <front>
            <title>Guidelines and Registration Procedures for URI Schemes</title>
            <seriesInfo name="DOI" value="10.17487/RFC7595"/>
            <seriesInfo name="RFC" value="7595"/>
            <seriesInfo name="BCP" value="35"/>
            <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
              <organization/>
            </author>
            <author initials="T." surname="Hansen" fullname="T. Hansen">
              <organization/>
            </author>
            <author initials="T." surname="Hardie" fullname="T. Hardie">
              <organization/>
            </author>
            <date year="2015" month="June"/>
            <abstract>
              <t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8252" target="https://www.rfc-editor.org/info/rfc8252" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
          <front>
            <title>OAuth 2.0 for Native Apps</title>
            <seriesInfo name="DOI" value="10.17487/RFC8252"/>
            <seriesInfo name="RFC" value="8252"/>
            <seriesInfo name="BCP" value="212"/>
            <author initials="W." surname="Denniss" fullname="W. Denniss">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2017" month="October"/>
            <abstract>
              <t>OAuth 2.0 authorization requests from native apps should only be made through external user-agents, primarily the user's browser.  This specification details the security and usability reasons why this is the case and how native apps and authorization servers can implement this best practice.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-security-topics" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-security-topics-14.txt">
          <front>
            <title>OAuth 2.0 Security Best Current Practice</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-security-topics-14"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="A" surname="Labunets" fullname="Andrey Labunets">
              <organization/>
            </author>
            <author initials="D" surname="Fett" fullname="Daniel Fett">
              <organization/>
            </author>
            <date month="February" day="10" year="2020"/>
            <abstract>
              <t>This document describes best current security practice for OAuth 2.0. It updates and extends the OAuth 2.0 Security Threat Model to incorporate practical experiences gathered since OAuth 2.0 was published and covers new threats relevant due to the broader application of OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="USASCII">
          <front>
            <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
            <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
              <organization/>
            </author>
            <date year="1986"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-html401-19991224" target="http://www.w3.org/TR/1999/REC-html401-19991224" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
          <front>
            <title>HTML 4.01 Specification</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-html401-19991224"/>
            <author initials="D." surname="Raggett" fullname="Dave Raggett">
              <organization/>
            </author>
            <author initials="A." surname="Hors" fullname="Arnaud Le Hors">
              <organization/>
            </author>
            <author initials="I." surname="Jacobs" fullname="Ian Jacobs">
              <organization/>
            </author>
            <date month="December" day="24" year="1999"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-xml-20081126" target="http://www.w3.org/TR/2008/REC-xml-20081126" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xml-20081126"/>
            <author initials="T." surname="Bray" fullname="Tim Bray">
              <organization/>
            </author>
            <author initials="J." surname="Paoli" fullname="Jean Paoli">
              <organization/>
            </author>
            <author initials="M." surname="Sperberg-McQueen" fullname="Michael Sperberg-McQueen">
              <organization/>
            </author>
            <author initials="E." surname="Maler" fullname="Eve Maler">
              <organization/>
            </author>
            <author initials="F." surname="Yergeau" fullname="FranÃ§ois Yergeau">
              <organization/>
            </author>
            <date month="November" day="26" year="2008"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC7522" target="https://www.rfc-editor.org/info/rfc7522" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
          <front>
            <title>Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</title>
            <seriesInfo name="DOI" value="10.17487/RFC7522"/>
            <seriesInfo name="RFC" value="7522"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore" fullname="C. Mortimore">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t>This specification defines the use of a Security Assertion Markup Language (SAML) 2.0 Bearer Assertion as a means for requesting an OAuth 2.0 access token as well as for client authentication.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6819" target="https://www.rfc-editor.org/info/rfc6819" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
          <front>
            <title>OAuth 2.0 Threat Model and Security Considerations</title>
            <seriesInfo name="DOI" value="10.17487/RFC6819"/>
            <seriesInfo name="RFC" value="6819"/>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="McGloin" fullname="M. McGloin">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2013" month="January"/>
            <abstract>
              <t>This document gives additional security considerations for OAuth, beyond those in the OAuth 2.0 specification, based on a comprehensive threat model for the OAuth 2.0 protocol.  This document is not an  Internet Standards Track specification; it is published for  informational purposes.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6265" target="https://www.rfc-editor.org/info/rfc6265" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
          <front>
            <title>HTTP State Management Mechanism</title>
            <seriesInfo name="DOI" value="10.17487/RFC6265"/>
            <seriesInfo name="RFC" value="6265"/>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization/>
            </author>
            <date year="2011" month="April"/>
            <abstract>
              <t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7591" target="https://www.rfc-editor.org/info/rfc7591" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
          <front>
            <title>OAuth 2.0 Dynamic Client Registration Protocol</title>
            <seriesInfo name="DOI" value="10.17487/RFC7591"/>
            <seriesInfo name="RFC" value="7591"/>
            <author initials="J." surname="Richer" fullname="J. Richer" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Machulak" fullname="M. Machulak">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2015" month="July"/>
            <abstract>
              <t>This specification defines mechanisms for dynamically registering OAuth 2.0 clients with authorization servers.  Registration requests send a set of desired client metadata values to the authorization server.  The resulting registration responses return a client identifier to use at the authorization server and the client metadata values registered for the client.  The client can then use this registration information to communicate with the authorization server using the OAuth 2.0 protocol.  This specification also defines a set of common client metadata fields and values for clients to use during registration.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8707" target="https://www.rfc-editor.org/info/rfc8707" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="DOI" value="10.17487/RFC8707"/>
            <seriesInfo name="RFC" value="8707"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8414" target="https://www.rfc-editor.org/info/rfc8414" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
          <front>
            <title>OAuth 2.0 Authorization Server Metadata</title>
            <seriesInfo name="DOI" value="10.17487/RFC8414"/>
            <seriesInfo name="RFC" value="8414"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2018" month="June"/>
            <abstract>
              <t>This specification defines a metadata format that an OAuth 2.0 client can use to obtain the information needed to interact with an OAuth 2.0 authorization server, including its endpoint locations and authorization server capabilities.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8418" target="https://www.rfc-editor.org/info/rfc8418" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
          <front>
            <title>Use of the Elliptic Curve Diffie-Hellman Key Agreement Algorithm with X25519 and X448 in the Cryptographic Message Syntax (CMS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC8418"/>
            <seriesInfo name="RFC" value="8418"/>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document describes the conventions for using the Elliptic Curve Diffie-Hellman (ECDH) key agreement algorithm with curve25519 and curve448 in the Cryptographic Message Syntax (CMS).</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8705" target="https://www.rfc-editor.org/info/rfc8705" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
          <front>
            <title>OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens</title>
            <seriesInfo name="DOI" value="10.17487/RFC8705"/>
            <seriesInfo name="RFC" value="8705"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document describes OAuth client authentication and certificate-bound access and refresh tokens using mutual Transport Layer Security (TLS) authentication with X.509 certificates.  OAuth clients are provided a mechanism for authentication to the authorization server using mutual TLS, based on either self-signed certificates or public key infrastructure (PKI). OAuth authorization servers are provided a mechanism for binding access tokens to a client's mutual-TLS certificate, and OAuth protected resources are provided a method for ensuring that such an access token presented to it was issued to the client presenting the token.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
            <seriesInfo name="DOI" value="10.17487/RFC7230"/>
            <seriesInfo name="RFC" value="7230"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7235" target="https://www.rfc-editor.org/info/rfc7235" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7235.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC7235"/>
            <seriesInfo name="RFC" value="7235"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7636" target="https://www.rfc-editor.org/info/rfc7636" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
          <front>
            <title>Proof Key for Code Exchange by OAuth Public Clients</title>
            <seriesInfo name="DOI" value="10.17487/RFC7636"/>
            <seriesInfo name="RFC" value="7636"/>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Agarwal" fullname="N. Agarwal">
              <organization/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t>OAuth 2.0 public clients utilizing the Authorization Code Grant are susceptible to the authorization code interception attack.  This specification describes the attack as well as a technique to mitigate against the threat through the use of Proof Key for Code Exchange (PKCE, pronounced "pixy").</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-rar" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-rar-01.txt">
          <front>
            <title>OAuth 2.0 Rich Authorization Requests</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-rar-01"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Richer" fullname="Justin Richer">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <date month="February" day="19" year="2020"/>
            <abstract>
              <t>This document specifies a new parameter "authorization_details" that is used to carry fine grained authorization data in the OAuth authorization request.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-resource-indicators" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-resource-indicators-08.txt">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-resource-indicators-08"/>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="H" surname="Tschofenig" fullname="Hannes Tschofenig">
              <organization/>
            </author>
            <date month="September" day="11" year="2019"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.bradley-oauth-jwt-encoded-state" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml" target="http://www.ietf.org/internet-drafts/draft-bradley-oauth-jwt-encoded-state-09.txt">
          <front>
            <title>Encoding claims in the OAuth 2 state parameter using a JWT</title>
            <seriesInfo name="Internet-Draft" value="draft-bradley-oauth-jwt-encoded-state-09"/>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="H" surname="Zandbelt" fullname="Hans Zandbelt">
              <organization/>
            </author>
            <date month="November" day="4" year="2018"/>
            <abstract>
              <t>This draft provides a method for a client to encode one or more elements encoding information about the session into the OAuth 2 "state" parameter.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-token-binding" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-token-binding-08.txt">
          <front>
            <title>OAuth 2.0 Token Binding</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-token-binding-08"/>
            <author initials="M" surname="Jones" fullname="Michael Jones">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="W" surname="Denniss" fullname="William Denniss">
              <organization/>
            </author>
            <date month="October" day="19" year="2018"/>
            <abstract>
              <t>This specification enables OAuth 2.0 implementations to apply Token Binding to Access Tokens, Authorization Codes, Refresh Tokens, JWT Authorization Grants, and JWT Client Authentication.  This cryptographically binds these tokens to a client's Token Binding key pair, possession of which is proven on the TLS connections over which the tokens are intended to be used.  This use of Token Binding protects these tokens from man-in-the-middle and token export and replay attacks.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-browser-based-apps" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-browser-based-apps-05.txt">
          <front>
            <title>OAuth 2.0 for Browser-Based Apps</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-browser-based-apps-05"/>
            <author initials="A" surname="Parecki" fullname="Aaron Parecki">
              <organization/>
            </author>
            <author initials="D" surname="Waite" fullname="David Waite">
              <organization/>
            </author>
            <date month="February" day="28" year="2020"/>
            <abstract>
              <t>This specification details the security considerations and best practices that must be taken into account when developing browser- based applications that use OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="OpenID" target="https://openiD.net/specs/openiD-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0</title>
            <author initials="N." surname="Sakimora">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="OMAP" target="https://www.oatc.us/Standards/Download-Standards">
          <front>
            <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
            <author initials="J." surname="Huff">
              <organization/>
            </author>
            <author initials="D." surname="Schlacht">
              <organization/>
            </author>
            <author initials="A." surname="Nadalin">
              <organization/>
            </author>
            <author initials="J." surname="Simmons">
              <organization/>
            </author>
            <author initials="P." surname="Rosenberg">
              <organization/>
            </author>
            <author initials="P." surname="Madsen">
              <organization/>
            </author>
            <author initials="T." surname="Ace">
              <organization/>
            </author>
            <author initials="C." surname="Rickelton-Abdi">
              <organization/>
            </author>
            <author initials="B." surname="Boyer">
              <organization/>
            </author>
            <date year="2012" month="April"/>
          </front>
        </reference>
        <reference anchor="NIST800-63" target="http://csrc.nist.gov/publications/">
          <front>
            <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
            <author initials="W." surname="Burr">
              <organization/>
            </author>
            <author initials="D." surname="Dodson">
              <organization/>
            </author>
            <author initials="E." surname="Newton">
              <organization/>
            </author>
            <author initials="R." surname="Perlner">
              <organization/>
            </author>
            <author initials="T." surname="Polk">
              <organization/>
            </author>
            <author initials="S." surname="Gupta">
              <organization/>
            </author>
            <author initials="E." surname="Nabbus">
              <organization/>
            </author>
            <date year="2011" month="December"/>
          </front>
        </reference>
        <reference anchor="OpenID.Messages" target="http://openid.net/specs/openid-connect-messages-1_0.html">
          <front>
            <title>OpenID Connect Messages 1.0</title>
            <author initials="N." surname="Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <author initials="E." surname="Jay">
              <organization/>
            </author>
            <date year="2012" month="June"/>
          </front>
        </reference>
        <reference anchor="owasp_redir" target="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">
          <front>
            <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CSP-2" target="https://www.w3.org/TR/CSP2">
          <front>
            <title>Content Security Policy Level 2</title>
            <author>
              <organization/>
            </author>
            <date year="2016" month="December"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="augmented-backus-naur-form-abnf-syntax" numbered="true" toc="default">
      <name>Augmented Backus-Naur Form (ABNF) Syntax</name>
      <t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234" format="default"/>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126" format="default"/>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>
      <t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986" format="default"/>.</t>
      <t>Some of the definitions that follow use these common definitions:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork>
      <t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126" format="default"/>, but omitting the Carriage
Return and Linefeed characters.)</t>
      <section anchor="clientid-syntax" numbered="true" toc="default">
        <name>"client_id" Syntax</name>
        <t>The <tt>client_id</tt> element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-id     = *VSCHAR
]]></artwork>
      </section>
      <section anchor="clientsecret-syntax" numbered="true" toc="default">
        <name>"client_secret" Syntax</name>
        <t>The <tt>client_secret</tt> element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-secret = *VSCHAR
]]></artwork>
      </section>
      <section anchor="responsetype-syntax" numbered="true" toc="default">
        <name>"response_type" Syntax</name>
        <t>The <tt>response_type</tt> element is defined in <xref target="response-type" format="default"/> and <xref target="new-response-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="scope-syntax" numbered="true" toc="default">
        <name>"scope" Syntax</name>
        <t>The <tt>scope</tt> element is defined in <xref target="access-token-scope" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork>
      </section>
      <section anchor="state-syntax" numbered="true" toc="default">
        <name>"state" Syntax</name>
        <t>The <tt>state</tt> element is defined in <xref target="authorization-request" format="default"/>, <xref target="authorization-response" format="default"/>, and <xref target="authorization-code-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 state      = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="redirecturi-syntax" numbered="true" toc="default">
        <name>"redirect_uri" Syntax</name>
        <t>The <tt>redirect_uri</tt> element is defined in <xref target="authorization-request" format="default"/>, and <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 redirect-uri      = URI-reference
]]></artwork>
      </section>
      <section anchor="error-syntax" numbered="true" toc="default">
        <name>"error" Syntax</name>
        <t>The <tt>error</tt> element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
7.2, and 8.5:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error             = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="errordescription-syntax" numbered="true" toc="default">
        <name>"error_description" Syntax</name>
        <t>The <tt>error_description</tt> element is defined in Sections <xref target="authorization-code-error-response" format="default"/>,
<xref target="access-token-error-response" format="default"/>, and <xref target="bearer-token-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="erroruri-syntax" numbered="true" toc="default">
        <name>"error_uri" Syntax</name>
        <t>The <tt>error_uri</tt> element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
and 7.2:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-uri         = URI-reference
]]></artwork>
      </section>
      <section anchor="granttype-syntax" numbered="true" toc="default">
        <name>"grant_type" Syntax</name>
        <t>The <tt>grant_type</tt> element is defined in Sections <xref target="access-token-request" format="default"/>, <xref target="access-token-response" format="default"/>, <xref target="client-credentials-access-token-request" format="default"/>,
<xref target="extension-grants" format="default"/>, and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="code-syntax" numbered="true" toc="default">
        <name>"code" Syntax</name>
        <t>The <tt>code</tt> element is defined in <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 code       = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="accesstoken-syntax" numbered="true" toc="default">
        <name>"access_token" Syntax</name>
        <t>The <tt>access_token</tt> element is defined in <xref target="access-token-response" format="default"/> and <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 access-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="tokentype-syntax" numbered="true" toc="default">
        <name>"token_type" Syntax</name>
        <t>The <tt>token_type</tt> element is defined in <xref target="access-token-successful-response" format="default"/>, and <xref target="defining-access-token-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="expiresin-syntax" numbered="true" toc="default">
        <name>"expires_in" Syntax</name>
        <t>The <tt>expires_in</tt> element is defined in <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 expires-in = 1*DIGIT
]]></artwork>
      </section>
      <section anchor="refreshtoken-syntax" numbered="true" toc="default">
        <name>"refresh_token" Syntax</name>
        <t>The <tt>refresh_token</tt> element is defined in <xref target="access-token-successful-response" format="default"/> and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="endpoint-parameter-syntax" numbered="true" toc="default">
        <name>Endpoint Parameter Syntax</name>
        <t>The syntax for new endpoint parameters is defined in <xref target="defining-new-endpoint-parameters" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="codeverifier-syntax" numbered="true" toc="default">
        <name>"code_verifier" Syntax</name>
        <t>ABNF for <tt>code_verifier</tt> is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
      <section anchor="codechallenge-syntax" numbered="true" toc="default">
        <name>"code_challenge" Syntax</name>
        <t>ABNF for <tt>code_challenge</tt> is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
    </section>
    <section anchor="use-of-applicationx-www-form-urlencoded-media-type" numbered="true" toc="default">
      <name>Use of application/x-www-form-urlencoded Media Type</name>
      <t>At the time of publication of this specification, the
<tt>application/x-www-form-urlencoded</tt> media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224" format="default"/> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>
      <t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629" format="default"/> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224" format="default"/>.</t>
      <t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>
      <t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork>
      <t>and then represented in the payload as:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork>
    </section>
    <section anchor="acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>TBD</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAII1ZF4AA+y9+3Ybx5Uv/H89RS95JSYzAExSV8ujOUPdbCXWJaIcnyQr
R2wCTbItAI1BN0Qxjs76XuN7ve9Jvn2t2lVdDVK2JzkzJ1ozsQSgq+uya9/3
b4/HY9fV3by6X7w5r4qXh5vuvDiY7Bf4l2Zd/7Xs6mZZPF2Xi+qiWb9zs2a6
hL/fL2br8rQbr8p1NX1Xj5sSfj9+fzDeH+/tuVnZwS8O9g72xns3x3t3natX
6/tFt9603cHe3pd7Bw6eK+/z+9y7i/vFs2VXrZdVN36M47pp2d0v2m7mps2y
rZbtpqXHK3nuqJpu1nV36eD7Wb08u19s2nHZTuvarer7rii6Znq/uKxa+Gvb
rLt1ddr6f18uwj9dSevER8ZFvYRPH0+Kb8r1rINPiqJZn5VL2QR4a322fLac
vFyf0Ze8D4/r6TvzRLUo6znsDnw6OcdP//0MP5lMmwV9P202y259eb/4bll3
1aw46mCv2vD6w0nxivfUvOOwXMMh2M/lNSV+8e9yCP4d8axfvutK+hh27H5x
3nWr9v4XX9CT6YNXTe7NpPi2mc2qdQvfdmaCbxr8aNn7VqbZ8df/Pg9fT+Cs
M5OFM6HZuGWzXsBn7ys8mtdPHx3s73+pf72zfyf89a7+9d7+PfnrzTsH+tub
X97T3966c6C/vfXlLf3B7YODO/6vN2/JX+/sH9zWv971v71z9/ae/PXerVvh
sXv66d3bX+pj9w5uH+Bfn40fT+qqO5Ub0grhjrtmVU9b/MV3R4dHj549u0+7
IXfxxqNmBvv/CCionMLFAILvivG4uDs+qbvicFGt62m5xPNZzoDICvx5cdqs
4Rqd8sYBvdCVmp6Xy7NqVBy+OHpW/M+bk1s36D2B7MMh3vDjvqAByrl/QQuD
tTC3TVfx83zD92F34Z/f33w0ef3k0fi8W8xv7e2P97/88sv9gwPaTP3uw2I+
hqt/b38f99vVOk9/wHfhJHSf7/mzvnNw53bY3H3d3Lt7d/1B7N8Kf72X/a0f
4eDmXvir//TOzTuZk1qX69ynVdts1tNqXC/hipdI2Pqrk3U5m1eX8sMfLrpx
tZziMY5bvEaZwbrmXbWEE10SC+t/f7JuLtpqPT4pWxilXMHFdfCrl6tq+exx
RC/8EZDBcllNO/jvuir2J3v8k3J9VnXh5jfw2/ox3r8v2lU1beWD8ZQfhv+u
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
rm2JFt1omY1j72y1MkJLGm2MF256qOXaoOuCVTFaFfaR9Ggv4o++mfSfK9ZF
vPzrrIuIXmnKjnDhl4xDEAT8tuGEZwIN0RPQoDBaR6C59kuacYtdKvfkl02I
Q0WoiG0w25BMbVtdRLBDSm6ctD0sENL99IFhfCA2DL/9yhLhI2pbTipzusM8
pR4cJDccIAW/FqOM0tJVDAz1Fv/hB/e/29h8spqRVbkgVni6Kf7p70ADTIPa
TV37f2t4jO8kw+rBxvDhFgykRxvDx1u4ys/T1fvrw/tPTZf8IEyn1eyk6uxT
uOOKToV7/ra9clTNohIuAQ033fsyvLi4GILZc7WYqo3/2mtzJQKjvscpR4SJ
VbG53fRdML3TwbUfOSjO8BUIq4vSLmanhubG49HG/dGDxNg8XZ5NH6xvDDee
Pn26sbn54EfYm+wONFmwiKMhHPJ69/WO6VEM9bre/xISEN+80aSclRTEusdk
IXBs3EMTWcj+b3JdvlwtyI9LEUAh5E5t6MlMKdEGQmxGRW7ROuVo8H/Mhh/2
h1v727u7zli/oODUEoY8rl6NWvoXoogHUS+cVDPltzkvL4ldqw6uIn8/WuvY
Yx5rX0q0UROHdY4jiwrcOdEOZ08POHQ4ixdulkebT39kZ8736uMmDkJipvEP
kdv2v0O5vJkLlavHxM6PMct82Cui5TkY/ldUCcgsgO7ZVi5EL8PwHpTkFWIu
GZPWkEgQQR31GBZNpIv9wEuYvzCyw51V97jIXxgUVAWlvi6nl06L1PhuLlE3
Aexj6YgwgcuY3FLZkY9roGiMfJOskx7h1mAxcTEV8XnVky/q7SuMt8/1NvrF
h39ZX99cL3r777a2d/qDorcpvz0seu929rZ33rwv9nf/9KY/cL37culR0dt6
7S/ub715QY88kN+f+0defdgP9z/k37fu+9/ffnjzQi5g5fUe0cXN9a3torfz
Ye8tXxOuv7gUHZiG4TJMlxK7Nns8Xqd+GCjsSux66hTty4nmO+f74tvsm7e9
WfjG7GwWT/w/tp1W6aN4bstFqQumVPffv9zZfHhn89Gdzed3tjfvbN2/s7N5
54n/xza7jg+JsmVaHZ2w39Pv2Ocvgof5eLo6Pnb/HyGD8NWOdQIA

-->

</rfc>
