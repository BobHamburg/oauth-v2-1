<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7595 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
<!ENTITY I-D.ietf-oauth-browser-based-apps SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="March" day="04"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on whether they can be issued
credentials that they can use to authenticate at the authorization server:</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;browser-based application&quot;:'>
  A browser-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in <xref target="csrf_countermeasures"/>.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="authorization-code-access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="client-credentials-access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2 of <xref target="I-D.ietf-oauth-security-topics"/>.
The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Section 4.11 of <xref target="I-D.ietf-oauth-security-topics"/>
for further security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (<xref target="bearer-token-error-response"/>), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See <xref target="native-apps-embedded-user-agents"/>
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<section anchor="authorization-flow-for-native-apps-using-the-browser" title="Authorization Flow for Native Apps Using the Browser">

<figure title="Native App Authorization via an External User-Agent" anchor="fig-native-app-authorization-flow"><artwork><![CDATA[
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
  |          User Device          |
  |                               |
  | +--------------------------+  | (5) Authorization  +---------------+
  | |                          |  |     Code           |               |
  | |        Client App        |---------------------->|     Token     |
  | |                          |<----------------------|    Endpoint   |
  | +--------------------------+  | (6) Access Token,  |               |
  |   |             ^             |     Refresh Token  +---------------+
  |   |             |             |
  |   |             |             |
  |   | (1)         | (4)         |
  |   | Authorizat- | Authoriza-  |
  |   | ion Request | tion Code   |
  |   |             |             |
  |   |             |             |
  |   v             |             |
  | +---------------------------+ | (2) Authorization  +---------------+
  | |                           | |     Request        |               |
  | |          Browser          |--------------------->| Authorization |
  | |                           |<---------------------|    Endpoint   |
  | +---------------------------+ | (3) Authorization  |               |
  |                               |     Code           +---------------+
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
]]></artwork></figure>

<t><xref target="fig-native-app-authorization-flow"/> illustrates the interaction between a native app and the
browser to authorize the user.</t>

<t><list style="numbers">
  <t>Client app opens a browser tab with the authorization request.</t>
  <t>Authorization endpoint receives the authorization request,
authenticates the user, and obtains authorization.
Authenticating the user may involve chaining to other
authentication systems.</t>
  <t>Authorization server issues an authorization code to the
redirect URI.</t>
  <t>Client receives the authorization code from the redirect URI.</t>
  <t>Client app presents the authorization code at the token
endpoint.</t>
  <t>Token endpoint validates the authorization code and issues the
tokens requested.</t>
</list></t>

</section>
<section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" title="Using Inter-App URI Communication for OAuth in Native Apps">

<t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>

<t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>

<t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app"/>).</t>

</section>
<section anchor="authorization-request-native-app" title="Initiating the Authorization Request from a Native App">

<t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant"/>
using a redirect URI capable of being received by the native app.</t>

<t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>

<t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>

<t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>

<t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>

</section>
<section anchor="authorization-response-native-app" title="Receiving the Authorization Response in a Native App">

<t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>

<t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>

<section anchor="private-use-uri-scheme" title="Private-Use URI Scheme Redirection">

<t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <spanx style="verb">com.example.app</spanx>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>

<t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>

<t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595"/> for
private-use URI schemes.</t>

<t>For example, an app that controls the domain name <spanx style="verb">app.example.com</spanx>
can use <spanx style="verb">com.example.app</spanx> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<spanx style="verb">client1234.usercontent.example.net</spanx>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <spanx style="verb">myapp</spanx>, however, would not meet this requirement, as
it is not based on a domain name.</t>

<t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>

<t>Following the requirements of Section 3.2 of <xref target="RFC3986"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<spanx style="verb">/</spanx>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>

<figure><artwork><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork></figure>

<t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>

</section>
<section anchor="claimed-https-scheme-uri-redirection" title="Claimed &quot;https&quot; Scheme URI Redirection">

<t>Some operating systems allow apps to claim <spanx style="verb">https</spanx> scheme <xref target="RFC7230"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>

<t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>

<figure><artwork><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork></figure>

<t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
<xref target="native-app-registration"/> that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>

<t>App-claimed <spanx style="verb">https</spanx> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>

</section>
<section anchor="loopback-interface-redirection" title="Loopback Interface Redirection">

<t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>

<t>Loopback redirect URIs use the <spanx style="verb">http</spanx> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>

<t>That is, <spanx style="verb">http://127.0.0.1:{port}/{path}</spanx> for IPv4, and
<spanx style="verb">http://[::1]:{port}/{path}</spanx> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>

<figure><artwork><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork></figure>

<t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>

<figure><artwork><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork></figure>

<t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>

<t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in <xref target="client-types"/>: web application,
browser-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

<section anchor="client-authentication-of-native-apps" title="Client Authentication of Native Apps">

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <spanx style="verb">client_id</spanx> request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation"/>).</t>

</section>
</section>
<section anchor="native-app-registration" title="Registration of Native App Clients">

<t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>

<t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>

<t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<spanx style="verb">.</spanx>)
SHOULD be rejected.</t>

<t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <spanx style="verb">com.example.app</spanx>,
the owner of <spanx style="verb">example.com</spanx> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>

<t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

<section anchor="native-app-client-impersonation" title="Impersonation of Native Apps">

<t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id &#8211;
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>

<t>Measures such as claimed <spanx style="verb">https</spanx> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>

</section>
</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in <xref target="tls-version"/> with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in <xref target="tls-version"/> with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

<section anchor="loopback-redirect-considerations-in-native-apps" title="Loopback Redirect Considerations in Native Apps">

<t>Loopback interface redirect URIs use the <spanx style="verb">http</spanx> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>

<t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>

<t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>

<t>While redirect URIs using localhost (i.e.,
<spanx style="verb">http://localhost:{port}/{path}</spanx>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection"/>, the use of <spanx style="verb">localhost</spanx> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <spanx style="verb">localhost</spanx> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>

</section>
</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="fake-external-user-agents-in-native-apps" title="Fake External User-Agents in Native Apps">

<t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>

<t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>

<t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>

<t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>

</section>
<section anchor="malicious-external-user-agents-in-native-apps" title="Malicious External User-Agents in Native Apps">

<t>If a malicious app is able to configure itself as the default handler
for <spanx style="verb">https</spanx> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>

<t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <spanx style="verb">http</spanx> and <spanx style="verb">https</spanx> scheme URIs.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="authorization-server-mix-up-mitigation-in-native-apps" title="Authorization Server Mix-Up Mitigation in Native Apps">

<t>(TODO: merge this with the regular mix-up section when it is brought in)</t>

<t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>

<t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>

<t>The requirement of <xref target="native-app-registration"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>

</section>
<section anchor="native-apps-embedded-user-agents" title="Embedded User Agents in Native Apps">

<t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>

<t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>

<t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>

<t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>

<t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>

</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (<xref target="bearer-token-error-response"/>).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC6749;
&RFC6750;
&RFC8446;
&RFC5280;
&RFC7595;
&RFC8252;
&I-D.ietf-oauth-security-topics;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&RFC7230;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
&I-D.ietf-oauth-browser-based-apps;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in <xref target="response-type"/> and <xref target="new-response-types"/>:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in <xref target="authorization-request"/>, <xref target="authorization-response"/>, and <xref target="authorization-code-error-response"/>:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in <xref target="authorization-request"/>, and <xref target="access-token-request"/>:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, <xref target="access-token-error-response"/>,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
<xref target="access-token-error-response"/>, and <xref target="bearer-token-error-response"/>:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, <xref target="access-token-error-response"/>,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections <xref target="access-token-request"/>, <xref target="access-token-response"/>, <xref target="client-credentials-access-token-request"/>,
<xref target="extension-grants"/>, and <xref target="refreshing-an-access-token"/>:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in <xref target="access-token-request"/>:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in <xref target="access-token-response"/> and <xref target="access-token-successful-response"/>:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in <xref target="access-token-successful-response"/>, and <xref target="defining-access-token-types"/>:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in <xref target="access-token-successful-response"/>:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in <xref target="access-token-successful-response"/> and <xref target="refreshing-an-access-token"/>:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in <xref target="defining-new-endpoint-parameters"/>:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>TBD</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAGzGYV4AA+x9aXcbx5Xo9/oVfeiTmEwAmIs2y6N5Q8mSrcRaIkrxS3Iy
ShNokh0BaAy6IYpxNL/93bXqVnU1SNmezJv3wpPIJNBdy61bd1/G47Hr6m5e
3S9eX1TFi+NNd1EcTg4K/KVZ138ru7pZFk/W5aK6bNbv3KyZLuH3+8VsXZ51
41W5rqbv6nFTwvPj94fjg/H+vpuVHTxxuH+4P94/Gu/fcq5ere8X3XrTdof7
+1/uHzp4r7zP87l3l/eLp8uuWi+rbvw1juumZXe/aLuZc9NmVi/P7xebdly2
07p2q/q+K4qumd4vrqoWfm2bdbeuzlr/99Ui/OlK2gi+Mi7qJXx6PCle8qrh
s6Lg3RyXa9im/bxalPX8flHiF/8m25xMmwV9uVnX94uLrlu197/4gh6Jn5Cp
vp4U35brWWcm+rqevjMfyiwz+HRygZ/+2zl+Eg/zelJ818xm1brtqmiw1w1+
tOx9K6N2/PW/zcPXEwCxc8tmvYCDfV8hWF49eXR4cPCl/nrn4E749a7+eu/g
nvx6dOdQnz368p4+e+vOoT5768tb+sDtw8M7/tejW/LrnYPD2/rrXf/snbu3
9+XXe7duhdfu6ad3b3+pr907vH2Ivz4dfz2pq+5M0K+tpnAw3dW4a1b1tMUn
3pwcnzx6+vQ+gUUQfedRM6tmxSOAdzkFrCtOqq4Yj4u749O6K44X1bqelsvi
pCuXMziSAh8vzpo14OgZAw5QhfB1elEuz6tRcfz85Gnxv48mt3ZonoBy4ah2
/LjPaYBy7idoYbAW1rbpKn6fr88BQBf+/P7o0eTV40fji24xv7V/MD748ssv
Dw4PCZj63YfFfAz36t7BAcLb1bpOf8B34SQUzvf8Wd++F6B/eOd2gPOBwvnu
/l1/Jge3wq/3ss/6EQ6P9jPHsy7XuU+rttmsp9W4XsItKBFn9anTdTmbV1fy
4F8vu3G1nOLZjdsOQdQfrGveVUs4xiXRjP73p+vmsq3W49OyhVHK1YrmuqxO
8dtljCXfV6dEBatlh+uCMwMysSyOXz4lZCin06ptYZri5eZ0Xk+L31ZXxaN1
NcPny3lbfFe9r+bFQQ4lAnl4WM7PyuXf4s+BQj36W9W+q9v4898AOWlm51X/
4980y/TTZ9lPYejfbhbluvfpd3XZxB++wg+XM6Aly2X8zWP4ZrOcnVbrc4Ov
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
2i4jojwZfSRqPh9HQ5ckSuy++O2ejedCBSbm9Xlvfb8i+jaeh8qMlQiyYxLL
iBieFsFOBMScOqMdxlXDopIoLfdDlaLqFK5kBI9c3j6uw+cAUnfOKZWtyhSC
h6efNOLTjxQZ5us7KNbsYCRq09lKXBHkqDuVjIALwymxLM1Fs1kbMwQuJsIF
dJD45EoJX4JbJxR/yzUSIdl24gzTS2UVnC3JEKZqeDZBKqpgzcEXkak5q7JG
8rqWf5beFkn1tWV1KUEMBlxWyedu7X2TRuy6Z0sLF4ugual29jKyS2wpGUFR
F975o7aJUNQ7U2z9Kwnn6iTMepRi+XBjgbLVGLagum/X2pPs9NRldh0dGCqR
gtoD+gBnmFbdk+O4EtitO4d36bq9xlYT8ToA17AT9d9oJRS9+pvyfXnCXf1e
nP4Vc3Gea+OS3d+cvHi+55jkoRcu0DnqNRBkYblAWB0N2Up4Y45Bf5PQJapY
wn+5bo/kG1pfngIJNoVT+1YL7jmg95oOetvjXFhLMwq5U0JzZkGQ9E2Q6h1L
GJXk8O16uk1b425ZkdK2E9osXlTljJy9FcjPdCaHdw6wC5pQd69e7Kiet8Nt
Ua/CGNIZgp3CeMNGcT+f4GVRIuqikNYSG5DO52pi3GEl0rQPGFqkyy2S9M6d
WFX5v1L9/STtd6vyu81d92O8dQOqcmriy+Xx8lHw1fExE777JF5zSqUlShJq
yzN6yIXpBezlCyOUdGdt5u+1Ob6un+P7Sem9LpfeW+TTe10/lXKLQJltHrm9
BibjvsTB30Ih7GE5U0M6ksIQXb+7Wc6RQ4RIDM9Z9kyV1dRiasmRLc2vFqX/
CWv8WdK2/jsytkxaUZq1VeyaDLxgKNkb2ffX1aoquyivy8zle/hYQh1NTy3c
8UlTaqJK+lkkgaNdnChlA7G2p4wpMHPZYo/y4W+sDUrHXMlY8jMum/46en4t
30IW1meAnWZcmVfYi763jU48O/5DfAiUWBpuwEGx+8bkx0VKE/fGoa4xERxZ
wqUBkgW1wGIWImKEpE9VnXMw6DADSIotRsZ8KX5TxNXed+LNMEZbbnxNDZH4
dSIKKU3YChHvZeWfKBv/+++/HxvXfDUgL9j3fdNuXXQPlpkSaz0spRvXv/C+
SFFOnxBE3ZrPOEpjP8zd3Os1+fXVZBQ0YvtguWA2kuos8IuVJKdKIKOekfrj
qzbnqk2EhPRmHQdKRldmaVuEflpSaBTXuTVFlOvjxBDIgR3JYjZRM/KuZpaR
G0iXEuiyrUeUW4Q3W8QI9FNyMj3xHBVNlLdYfZhW1cx2xtIeAKdaxSdqv/Tf
lC/3z3S5f6bL/U9Ml/vvM5T8Sewkf76xmUTsEVlLiLuxJQS02UFTiLuJKaQo
ttpC3HZbSHG9LcS97/kkU0UfdQ6jcvyDNX5VPnragnc+v/IGxdSfAwrjFmvj
kLeHHD7HGSbU+gpVCNIFIJdpOllyjTt0FLYt6rfY9l46uDTM54ukmTBh2rRa
k53V13kVwXOgmsJUGs52Q6Nal67Dnpr6dWy/xdrrpJ5QTBUt03TRG2H8w4W6
x3P1BINoQK2D+XEy9G+pw7godVY0eDXvarkQK2xu3yJC+fKODXlmFvgkDocJ
qg5LHqzriju0P+13FvetwkcSEpw8oLFevvpd4PPSLZ6Zu552STlymCoxLAG8
ltZ9poXxal2/B80KeANwsnLOUJPX4WOg6wvUFlSdAPEcWOJGAgjrxQpTfdPO
01Q4sTyvQjWaYUfXLG3VEef+R+l4IeiPn///O/gvNvsNOlMSP0KqUtg0Ky/C
/0MiCPMycI+Fo7GNO9jSYEhMAJPOa2r0sl3k9QG0GtKg+kNHPSCIgcH0qYtm
cHiN/03E6odSCCNzw0PnynkDRH1ecu6AjaoXWcsjRr8rsiWV6fF58mDvie8v
VtscwOBh355a68wj12cQxqm1qZu+n1p7fchonpn8hATkf4aM/oRApIim/DL6
60He0XCTXNefI9X1J2S6bk90/dVPSnMVE1aa4hhf3OtTXG3K5K98BfL+UJO8
9CfNW0R8CS1rWk0NIiEARcNp5+K1rSvCXCB5C5h1Su3ZgLM1a8ZszqjVI6HT
/NVJhYr02HY6iYnh/V8Nx8QWca8qopan9XLWZuCWEUJdQa3QsZBRLCf+8MPT
8dcTDKEbU9ycsB8cGr7++BGxiVyL9+7u3yZCATt5FYNCvM1blu/DdST2IDln
ohDvqYtBHI2lEkzkKStCQ7weoReNgstib7q8pk0LYCEO1IgVp6x15XWxpVJP
urd8Yg6L1Rr4Z8uYDbLzKTd4onJUYjulBtI8Pehr5fSdqGxZIXJk0HHBnS5D
fXxXRBvNhn7QK6a+Z2pjlYMRCQWJ8vRimwlfSlF5PcmpBR6brF7hjrVfEYq8
vuRhtDI6kU4Dc6RONgtI6P5O7iwuBhPvumYlSTYEtcInp0+blsRq2ONURdS+
NB7iXsqC48GyRlGy/PkOTfzFkhrR4rCiHKnIkErjpxVKLig3oT50WhXaw4ts
DxmRhKr06g6p8i3XLKOzzcIfGymcnQGlYaTy55BdXg9HZYEa3BxiskdUlzzV
YjlXGxOTcFAqP0ZW80nCYL1exYXklZpXhKBddU4SgC9AaRfkiwR3FxJNJo3+
RARxhegdKDhRnU/yHms3xFxg5s0CBf8Loi+dbVf5I4Iu2fIXAkc+Pehym+NN
TApEetMLCYNroFhbWZGWK93XoOyu+UY38+Q2i34NXHBa2YoKrjfNNY5BSwdg
loTPSiMCDe7tbyJRy4RG9x/zjQxyKoLRqk4rlwSllV0ehb0sE7cekvJGoR7m
wI0JO09VoqjAMrJwPByMqAhSNZklvEmH5Atsb33ZrKk/Jfb0+xVoU+fI8bJl
OESscK/iuUOVXQqYjDShi7LlbGtQ+5heh0Zz9QKLpk6qSQ66+CKXMaQMiCgW
kSlybMjSYSla0pdLi2Mosacb8wHEUrhLdPWG7Sjc7HFRn19QOcWyOJ83p2qB
ddRxWQhqaMZgN79qQJ670ppKGg0ZFU13/Z3vkmoNMrmGeMHZYe44/LBRk0o3
+6z4Vz4rXsNi0Mjps+bHPmt+m6GTbJ2vw8p5oKrNZt8D6opY4f2/lkp65hWZ
0bxRIvqUr4+VwV0vNNvK+3XnEUOcsyIN0XetmDOmDd0WQ3TN+mUhKqtbJ7U+
4gL7jNSDaGm7JtQOLSlxEHy7RwX4uTKAtYDkKgOQjMPRw3x73zfz98TXkSFS
N1LmEdOGCsbIS1FfshisIiJmFX4h/dr8bWk6pmsSlgas9DbdNS5rWegtYFah
Gc9369RI8ghRbhClDmcVOiFgSBiDpjX+H47JjEMtsvEV5P05vHNw988aN5Ha
VCRuIUkZi48qss4pxuPuEJGCvdzHGIbRQJq6nPhLLJ4JNB60aUAbh85nkhuE
aUcngnOLNzFuZO2bGAR1JrTRAtQO4so8mOMzJ86pYGUgBc4ftoJ5t0RJUaaE
BY0VZih+g0iCLXv2opBCF/XnSTMyuGW4d1UFZ3KwRjuJR+iZoBTyFj56Bio6
xkeKafm8/ZnDFMMaBuu1XbfLkxjmuI6Vbf2mAPriIGeFus78ROsvFk/efjl5
ePtsfGty8Jv/eCZHf9q8r3xyKtVwkkgZ5H++pAPuKkq5A0A9xtjtPuoQaLhY
tIYLyr031lJ/iG63piDNvaKtQk8xrzSds6MrdEeIonSD99Y7CpjDlvO2kTNq
w53ORox5o66NX4ozOEwP+zLDv4ogZAmk6Sa2Lrlpx4X9mmSHIEoZG0TH8Uqr
CjVabsIE3IAUXCxUiL2ckCcH0qHso9jhpMKdPVLmtE+Vyok0zGV55fyY7J5j
1bk3MjeTAXi+kfhIHlwui79Kah403xMOVclwcZPzdxWarDpyj7tdeL45wy7A
4ZW9AE2Rx1SnRZ1RGlPrkWXeL7jrMB6M863lolva2kIcIbLplfaJYQ9cK80K
PDJdNp7TY98WKfEaL7VeBs5PyNFx9aHUETjxzZYj4pVGdeJslPiF1u1F3cWn
SikUAQU/G64t8i3zricUecctjmxF3phgSj+frWzQMRs07M379jUR4C4WY7OS
QCs3UqnqAMtMt5tUUOlHFcR0MqaS2431n0IuJYpFM7oT6ETCgTbzkR2JV1PL
ImOEj4zC3oFEVAD4nwjqHWLyiYEnxm40HcuvnJ+BVINGGUVcLgnKIXkQZ+I9
ZGY6mOBc9uzYWNb6RtrzynkaJfJlzyOAlBhUwHdwWxG1NACJIMKNURlB8Nfx
8ZvX31K9vjlAcnN+EW2AQSYEESOJQNBwKxJf0ae36ea0A7zbMBVl1lGACl21
szkmIWm778K0+57Yo8RjkhO3foioW7eg2OmdW3w54OdBcfCr3bQZtw35Cz/Z
Dt3476/p3y92ir3iVzsPOO7EruFBED0OfnXy0s+vddm8oszyVETGfOUj8Xlb
4q3Osmvvt2By4L66HHKPJ/I14S/g5qs02oFoW+gFZNthELF6gm6tx2KqfIgB
Wj626YZUKvIEGm99FJEA4kdW/7AiF8eH2aY0kbhhpQyj2yadIf0GC86acGjb
lLsevJe+pQZ7n+ENsp+8HtiOHEiUZ7FjHYZKfQCL+NR8ne5royUmOrENkrPk
yodJWO+bNucqbtRvdCpLzRSNwIiwZ98Vtyb7B8Wfvj96NHn1+NH4olvMb+0f
jA++/PLLg8PDW3+ebIMOrRhJLWWNjFGi8c/LzGJCDiZx2Vl4XwMZKRYVv1hX
c1wd7JODXH/4QaJcgS6GaMX8wkIndOThSGSCUhwh2wXlhCo42mpR4h1uOfoJ
N1Jj3dn1SBGrXJpM4x1gekg3ZDaPiJJtqx3s7CbRFCtik9Y05NV4DSsE3aBp
1gXTbE4CT+JAT1V0nWP5e/wS1TtTHXdwLrl1O7/cCbDdbfeKXYK4o+Cwo3t7
/3UxApHDPy9H/PxlRCwwH2QljptcLjn+uDwSIoDDwPMVWYPNMHwlPiBzQM4p
WFavOFFIHfizBnmwo/KWcQHNmzANwwicNTbn+QDJ4bjbNG8kpOjFwqt4QIaV
sSBE+OCkSEyJSo0260hoYjddYkGgO8f+sTYYawZWofbnjGkyzf51N82V+Yr6
iJrrS9ar4K9BazZdaMtZ2KKo/e76M0VyvJfNgwh3jWiPfgVgbr66dFskfV4T
wwhHOpj+yWMRjqWggsgX3unKMrFSFr7WPDj5pbkZGgkiY6IkEspsfD3yeTA4
sL5PpvYtHWmJJwcBEAZ80Wk7gv6QeCqn1Jt85kGO+v7Ouirni53wqDwZnDYm
qyyy6TrBKU6Go6+AMXB3QOOTy56JtIbsz+17Z65WAOe0T7WQGw4nNK/VrVUV
tgUIuuzLJeBAOa3G2AodtDkYZl6zxxx5ytinnYupXYLRBSq2oRiZGYdrK6B2
4d0Vg6Z6XaKNeY/c7U42+xWrFZxXVEzh67VE8q+rc9jA+krzIhZfofeaENN0
yr1BmbA0qD5em9OMpvp8SXjJfsUlO6UQdhJnGL3GERdK/sl0ZQshk+cyqU8C
wn27Uad+ALB/yllTbp/WkYUoFDnLoIBLolL7z1yDmjF2vdfqL9QVTU2VsLBz
uJbkshQT8EyTwlBqEgHQSbQf3z14fYwR4CjEvb5sQpE+AsJ7TX/B0yV8wGFx
ZeU7W0P2xapaPv3agQCwRJXzT/z35BnWZQOa+GcfX4NfpBWLX6Odqpk351cw
wIKiV6pi98Xx60d7xYslxSo+w3xgTkGJDTvos2umzRymfHb88s/uBX5NtdoQ
AIIiyCCqKXdeFhmHtvdgB/5ZYtvJdXNWw6ZB9KznO/aBzXp5X60s6M9dVvMH
3z588Uv7+Zou6YNvRi+/GR8c7dyENZvwu37dJAlmiLl1np/69sEm8ZSTOlxA
rWxqlHUzYdtUEISurBdGV3pJmsp0bgoYpOneda+0JavaUZgEymlcugjur9rB
B4QEw+G7gRa/2d35RK+2l1TmqF+tePnYtdm7GMXAxfD2dJesLEoHCyvSDGJb
NNHdLONNuupG+X1Ro+OdUS6Xj8OJsqsJhlU3xPTSHLcebdoNRQ+A//lsguPJ
rT23JYntmvw15/PXpHuvcYBH1Af3hhmHHKosPHTdOnXW2ocngymjBkIWdM5A
Kr9P+OJ4cpfeP57c2+PE8ZvveDhRcktu4Q1g/yXwGwF/bOW8Ydah++QDixIO
IxWUrf1eCN/mIqLbAfMk5K2fGHdQ2Lx7+jYV3r2hmgS9B1oWZgerzc4+eVEZ
57XUIyh8HVQfIGFo9s+69FHegMqU4IFP1GPTw9aHLZY/2Hmdyoqyk51cJZgM
+R6uBINhXgGgSYYNNee+hnVRh3DDmESMUtr3/QVy5s4EDbDbCYMCkviQTwgP
EWOSL5gDiwVKXLcXOAra+hcUaS9iLkn9Cgj+7ONHDpOkFQihYi7Swn1CFIER
zkUeEd6erY4Bd+k5SqT50hlwiJywslrXC2rKS9OaYVOc9XmUKHxjA/SoJIpP
Sw/hjkmJj3ASJizRH4inySLuw1Ydg4TaJ6tNUc5FwBeAO6AVT6ha5YXfNfJZ
IvOeEjUabxrK30iSJ4V44wMS9uXX4hnCU4NQvu2Vb5OslYAxh3jmTDGaLhJ1
8GuF7annKrBw1op15dNyRRwd1su+H9KIkyNLDnvk0MWEwkg4ZH/uZ5rgL7EH
I1aga223KIcYMDBAgRGXIIiLZ+15O7rh2NOLphGSiTEEUh1anHaq5eSFskQI
MaZN8kdRsRler80HoIhw0e3xlfm80hw32B87CiXKxKVoQ2YzJmCPCCey1IuF
T3GllDehTr5EVPCEgPi0buCE0FDRaxC924WYqlv7+/jPAf5zROVIbu3fpiJR
zjsvQlKBMdVa3E6Kk2HWZb+mEyU8vr4wesUnV3PK13Fq1qmUj1oUV2xShOL3
zdhkPMt57jmQxsf+hBBwTm/kEOjhMkz5KEcpeaZJjqF2j3eH9Qp62RObGIBG
Gag9TunDgbC1eK96TabgiSZdnPnCgqxitelOhJzY1QtIwha21R9KfHBa28nn
ZvZNHRwrjpQhr6BGAzCIgmHkbZRna9FOMK3lYg3rkKbdMip4ENrM1KTM7PAZ
54+XB4EbVuyCLHpaz0DB6lVnSnVJVW5kBbHKFkQGX1GeqKCs0wIszq0NmeMK
kHk5fcchrL2yXoHuSdGlwHAdKtubZXlZamxuP3EvLA1TC329LJVQnb3P+fpg
W8Uxqxj4tg8ETY/M/JnZyHUlLn6SJJ/Edvp6/Y/QSzmrODCvHezGFsuqyCz8
CK8vMK9aeooEIkymWVFFMfjpPUV4iETY8TtFeV5iGh8hBJqfWhcy+cg4SfqY
LyKp1nw1++owmBGtMe7Pn4JaeYLsDaZ7SWmLfGz39vfHd46KP+ED/PufNW6A
YQKsc3NWUm2ULxbNzLNHarrhM9wweEyrKWM0RHO+0Vhb8iLMlMnzZ+IzRqU4
lKvoNxIxZibqLs5ZqVx2MkSeCInHxPNgme7FhXMwf720jDZ2u/ncEqt9YkfF
aJe9vaA1h2Lm6DMizogAWPGimX1VlC6kjnpHajRM6PuAyyTfmDcN2xutXukr
re7J2RYFiYQY+V5Xl/HZYdLEvMFgfMDDEOXnXXCJPorJVgpwFwAuFi25t8Gf
EF9SM60WWItRhBuFCNB85W1NcNbSpE58TykF6YEGhgIIkh2i6583rhhkFTIk
U2c+gPx78b75YzvlwIG6S5ePdrp48UILaWIyfluvJSY4lHO0t125kP0iVL/s
ensR6WtVakChUIviGQD2XG8XkPk1yKbU59Bea6n2veBnme2pN8s3z+Xr5aIA
1tMrr47M6vO6A0rg0+4m7ngOYhaaMNGOPUojmnBSjzZFsP9IekEwmUf1x+CE
falOH+OCC7IR7owr8yu4eKSm+cFNg/flGcg4GB0nOe/hYGAB58AU26/83sLi
ENd9+OxSqhPYBA218ZUuzsLwyWTtRqPdWkrwYNoSNs+i+xAAfOIK6cjGslAu
o2WgmstZt1t8uxMJmPVGBe9RtzpUKLiyjjBBFSva2FfFBa4fMx06LiWKNYwX
MOqsFL+2L1emHUEByiUVAKk8yTXJn8abitJFZOmzZhJfQ1j7FQyP40u8BNcZ
nLWW6gmHRF4i1oaZPXFYDoanA4LzJYyoEqeltOiWBEEGmYLaSLOlj0wYNGHu
jKN9VL/yPjIYul5xZMcuY8WMKh6hROQrn5RadzclCVQ+xHPwhJxhuRChGSrP
vqowpSHc+KA7B/JWen021FQkpdv2a7i2mLo6b4vX352wwQwQGBcFT2L8EAaV
do6pqX+YyN98TvXai4bAiOl85VI+52QjyTVyl5gJs0L6aaJI6WGubOuD+N9v
5sg2TkEY6qgElSACjI2kLnY0MxYIRnmZqksY4yiqrpHBQYccFmN7vByMLZS0
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
du99uvDSvTws/p5nUmPhv//W0zj879+TpIjKLbrzayyZhuqSPVL3btWid9qH
PgJnt4nf/cKQXmNHXaWjzd6o4PbhYJ+iZVqAVzG7cT52Nw0KrnQSuaag4C2d
RK4xKHhLJ5FrCgre0knkjJMou62TyNWdRNk/ipMo2UV/OIr+qRxFb+za3tZZ
9IfHpd3jQvNpK8n6Ln2ds0UCo7/I2UJMs9k3jDPd6O6sO2Jc3RHTsP+CsfaN
bnqikJqWmI9dJMmbS13zT254l9/i2q69tfmG5rR9TiiTPWCD4gxzUkJQpH9y
o06A0eETRZDS1PfqOI4SPtPwtCmT270VBshe9+5GGKAb3larMUBN1727HQSo
+bZ3NwkJrbjt3U1DQv8wt33ckX9c9f94V/2qu57l0K3u+Izy1pdiOtBbx6EN
f6GErDud6eFZTsSpKD29XAAUy3jYRXbn09ZGf2szW6e/3e3ff5qt+xbufLr/
rP+QKPq5czcNOsWufHXQCSn4LDTHIqDFyMyIdv8GyYpdNU/T3+PXFurZ8DtD
GU8QIJbW9WaOAZdoawZShFNf6jdEssRKzttwWTTcFdQ90qDC05Wyf2byQWNQ
hlwff1W/FzpH3wAq2v2hJa7SEuM0/mMF5m6uK6bKz6qgnBFPmkV6GN1SjfKB
1EcpON90hL4Fzqi5X+rI+nvplalyq9Gl36trjpToDFX4KBXglB7y++ip/2BZ
9l/myzmd6fOss/305V43O7iaLvJPTaD6xj+qgadlUsvs+heV/CITZTG32kSK
OmhFiIIL1Vb0uKUm2FDt2XCcWCG+e+9nuX/odcgoumS65tjieH6OzKx3Xrsh
GwfiU9jC/vbXuzuDN7s7/U/nk/7WxsajzU2vY/9IbyuTixX1yzgJzFuVQgdI
zb97u9d/5Puwq4MB+TDztUY8LLM3IHFF+0YibRZviZgbF+oYQ7lW1to1L4/6
cxVzay4+z4oOzcfdx48e/Hy7dkswBJ3T1ooPEtel//PvBzt/3n5Df8t+Yk3i
4S6+ePlv6ReJfqHahTwZ2vipSRlJHn73cn/n1bNd+sHLVztvnu/hNxuPs3V5
OZ5/tNF/9nBvD4pM8587n3Y3Njb6e3t7z/CLzQ365+aG/2CPUqgpK7X2KjOf
lCqN9L7lhVhH/njOzRPOMCRuDUDs1byRmJ5hRpVmNElsh2r8eunglQgCZEOR
fu73wwmxlccNN+hyss9awEis6aHlAjrmczlHlX3/+bNULdSAxJcvsq7yeTGS
FfyBFzp9IUMeml+q333li/nntRcn4IbKiyvftb04iRYQr4Wf3M+fp+PLfhpH
CD1KPvY9Cv+GAvdDJzt4Xfmsm/4On/2Ubf4QPqE1TJ+hT/wza4drfjs+2//T
/lv/3+3nr/+8zQOX+kfJgOWztoEmmi6eDUMSDohMFhf/4gdlPPaTrvmJfESD
4QMuvWOupbR3/Flr7xItXrQJSsmuf6VqdU/W6gYGQBgnVFYZ5mbYS7yVLCdU
ZSfZr249AullmlMm32rH9BV9/wrtXyK9uZMYV6V38llztw5UabzRNPWq/aw9
4B4OtnhEjwb3tfOsmtg/vCHM7NaAE02DSL//JgNy1w1IVmel/ZaMs2862TbO
+hYyn/9GC0Xj8ouV9j3srrYNFgEZlQHYL64fQeNer3U6HY9IepPR229pxy9q
MHn76FgZV1Ii2P7u7OfTpIW4kPiNym/+B4TyemVKzMNBaNNfosDOwj9pQtf6
JK7XBvj/NtFNC1q9I/HRjQR3TXJANW0WaWmGVvLG9KsbvjlyP9UlWvS2NRwc
+2StlxHQUumj/eJml1pTH3RfsCpGu8L+JL3as/ih7yb9Z8W+iF9/m30RMTNV
2WG++Pp5CIKAW+sXvBLoiN6ABvtRuwKT776+G7c4pfJM87YJsawIULEdZhsS
ZqNX5SJgwmT9VPseNgjpfvqDfvxB7Bg++8YS4VCrv8aJh3lKI6g+UMD1zUYZ
UcSoGOiHCrI/Zffu/rC59Wg5Jaty/pFp67P4T/8EOmA6VO/q2v9ew8/4STKs
7m3272/DQHqw2X+4jW/59/Tt3Y3+3cdmSKHOaeuYzBOtg4rVUn/XUVGtIKmf
pDGp9U/9y8vLPnGb+Jt1ohb+C6/L5Qit3thZkvhNttlxuyjYIjdBsEgHbb0d
iOu4tWs7tpado2cQb5e53f5OTdPNh4PNu4N7iXl6tjif3NvY7G8+fvx4c2vr
3s+wUNnPaJJ4EaBDnOXF/otdMwsxwOw6/43YjJ+sr/vuDYp8mlN0bN3bfMXp
FK6QdXSRxfJ/J5/o3nJODmIKLXIlNJda3cVUqx+BH6hYxOIXocAesUW/O+hv
H+zs7ztjL4PRTNlReF6pnLtvENWfiY5ECmXSvy/yq8ksH5XBuUR0ntRbx674
SKsjYUzNe9Z9EZxS7ACKljv7hsCdx0nIcMw82Hr8M7t/flTnOXGS+6dm/kfk
D/7PwMQxdYEU75iKR2HOGl7sVdf8AvV/lpNxsgHaV1vrpHiph3bA9iV8sjIn
tSmR6IRGADAtmvAXx4FGiPVqHjpIT68zf0iYFBAO0VgXkyunFdpQL3jMREJl
ZUbKnjwxGjfOfNwDWWXm/Vj3LAcc/YR7g83EHK3iJSuLT+ofzIx/0HU2u9m7
f9nY2NrIOgevt3d2u72ssyWf3c86r3ff7Oy+fJsd7P/pZbfnOnflqwdZZ/uF
//Jg++Uz+sk9+fyp/8nzdwfh+fv8+fZd//mrdy+fyRfYeZ0H9OXWxvZO1tl9
9+YVfycVoeJWdEw6S07GdCuxM1To3s/8NFA89zyfZOpG7cod6Afnx+L77Lu3
s5X5zuxuZY/8X3acEOMBDFpzauqGydVh+C93tu7f2XpwZ+vpnZ2tO9t37+xu
3Xnk/7JDPulhqIwH4VATp/4AP30WPNknk+XJifv/y8vdPwZ+AgA=

-->

</rfc>

