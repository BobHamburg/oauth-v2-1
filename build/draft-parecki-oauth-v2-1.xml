<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.14 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std" consensus="true" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.40.1 -->
  <front>
    <title>The OAuth 2.1 Authorization Framework</title>
    <seriesInfo name="Internet-Draft" value="draft-parecki-oauth-v2-1-00"/>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization>SignIn.Org</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>
    <date year="2020" month="March" day="07"/>
    <area>Security</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>
      <ul spacing="normal">
        <li>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</li>
        <li>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</li>
        <li>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</li>
        <li>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</li>
        <li>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</li>
      </ul>
      <t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>
      <t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token - a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>
      <t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>
      <t>This specification is designed for use with HTTP (<xref target="RFC2616" format="default"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>
      <t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749" format="default"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252" format="default"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics" format="default"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps" format="default"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750" format="default"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics" format="default"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="roles" numbered="true" toc="default">
        <name>Roles</name>
        <t>OAuth defines four roles:</t>
        <dl newline="false" spacing="normal">
          <dt>"resource owner":</dt>
          <dd>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</dd>
          <dt>"resource server":</dt>
          <dd>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</dd>
          <dt>"client":</dt>
          <dd>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</dd>
          <dt>"authorization server":</dt>
          <dd>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</dd>
        </dl>
        <t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>
      </section>
      <section anchor="protocol-flow" numbered="true" toc="default">
        <name>Protocol Flow</name>
        <figure anchor="fig-protocol-flow">
          <name>Abstract Protocol Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork>
        </figure>
        <t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow" format="default"/> describes the
interaction between the four roles and includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</li>
          <li>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</li>
          <li>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</li>
          <li>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
        </ol>
        <t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow" format="default"/> in <xref target="authorization-code-grant" format="default"/>.</t>
      </section>
      <section anchor="authorization-grant" numbered="true" toc="default">
        <name>Authorization Grant</name>
        <t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types - authorization code
and client credentials - as well as an extensibility
mechanism for defining additional types.</t>
        <section anchor="authorization-code" numbered="true" toc="default">
          <name>Authorization Code</name>
          <t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616" format="default"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>
          <t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>
          <t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>
        </section>
        <section anchor="client-credentials" numbered="true" toc="default">
          <name>Client Credentials</name>
          <t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>
        </section>
      </section>
      <section anchor="access-token" numbered="true" toc="default">
        <name>Access Token</name>
        <t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>
        <t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>
        <t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>
        <t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>
      </section>
      <section anchor="refresh-token" numbered="true" toc="default">
        <name>Refresh Token</name>
        <t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow" format="default"/>).</t>
        <t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>
        <figure anchor="fig-refresh-token-flow">
          <name>Refreshing an Expired Access Token</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-refresh-token-flow" format="default"/> includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</li>
          <li>The client makes a protected resource request to the resource
server by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
          <li>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</li>
          <li>Since the access token is invalid, the resource server returns
an invalid token error.</li>
          <li>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</li>
          <li>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</li>
        </ol>
        <t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources" format="default"/>.</t>
      </section>
      <section anchor="tls-version" numbered="true" toc="default">
        <name>TLS Version</name>
        <t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446" format="default"/> is the most recent version.</t>
        <t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>
      </section>
      <section anchor="http-redirections" numbered="true" toc="default">
        <name>HTTP Redirections</name>
        <t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>
      </section>
      <section anchor="interoperability" numbered="true" toc="default">
        <name>Interoperability</name>
        <t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>
        <t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>
        <t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>
      </section>
      <section anchor="notational-conventions" numbered="true" toc="default">
        <name>Notational Conventions</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119" format="default"/>.</t>
        <t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234" format="default"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986" format="default"/>.</t>
        <t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949" format="default"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>
        <t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>
      </section>
    </section>
    <section anchor="client-registration" numbered="true" toc="default">
      <name>Client Registration</name>
      <t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>
      <t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>
      <t>When registering a client, the client developer SHALL:</t>
      <ul spacing="normal">
        <li>specify the client type as described in <xref target="client-types" format="default"/>,</li>
        <li>provide its client redirection URIs as described in <xref target="redirection-endpoint" format="default"/>,
and</li>
        <li>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</li>
      </ul>
      <section anchor="client-types" numbered="true" toc="default">
        <name>Client Types</name>
        <t>OAuth defines two client types, based on whether they can be issued
credentials that they can use to authenticate at the authorization server:</t>
        <dl newline="false" spacing="normal">
          <dt>"confidential":</dt>
          <dd>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</dd>
          <dt>"public":</dt>
          <dd>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</dd>
        </dl>
        <t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>
        <t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>
        <t>This specification has been designed around the following client
profiles:</t>
        <dl newline="false" spacing="normal">
          <dt>"web application":</dt>
          <dd>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</dd>
          <dt>"browser-based application":</dt>
          <dd>
  A browser-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</dd>
          <dt>"native application":</dt>
          <dd>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</dd>
        </dl>
      </section>
      <section anchor="client-identifier" numbered="true" toc="default">
        <name>Client Identifier</name>
        <t>The authorization server issues the registered client a client
identifier - a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>
        <t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>
        <t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>
      </section>
      <section anchor="client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>
        <t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or "private_key_jwt"
<xref target="OpenID" format="default"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>
        <t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>
        <t>The client MUST NOT use more than one authentication method in each
request.</t>
        <section anchor="client-password" numbered="true" toc="default">
          <name>Client Password</name>
          <t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617" format="default"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>
          <t>For example (with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork>
          <t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>
          <dl newline="false" spacing="normal">
            <dt>"client_id":</dt>
            <dd>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier" format="default"/>.</dd>
            <dt>"client_secret":</dt>
            <dd>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</dd>
          </dl>
          <t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>
          <t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token" format="default"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork>
          <t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests using password authentication.</t>
          <t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>
        </section>
        <section anchor="other-authorization-methods" numbered="true" toc="default">
          <name>Other Authorization Methods</name>
          <t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>
        </section>
      </section>
      <section anchor="unregistered-clients" numbered="true" toc="default">
        <name>Unregistered Clients</name>
        <t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>
      </section>
    </section>
    <section anchor="protocol-endpoints" numbered="true" toc="default">
      <name>Protocol Endpoints</name>
      <t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>
      <ul spacing="normal">
        <li>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</li>
        <li>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</li>
      </ul>
      <t>As well as one client endpoint:</t>
      <ul spacing="normal">
        <li>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</li>
      </ul>
      <t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>
      <section anchor="authorization-endpoint" numbered="true" toc="default">
        <name>Authorization Endpoint</name>
        <t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>
        <t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version" format="default"/> when sending requests to the
authorization endpoint.</t>
        <t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616" format="default"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="response-type" numbered="true" toc="default">
          <name>Response Type</name>
          <t>The authorization endpoint is used by the authorization code flow.
The client informs the authorization server of the desired grant type
using the following parameter:</t>
          <dl newline="false" spacing="normal">
            <dt>"response_type":</dt>
            <dd>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request" format="default"/>, or a registered
extension value as described by <xref target="new-response-types" format="default"/>.</dd>
          </dl>
          <t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>
          <t>For example, OpenID Connect defines <tt>response_type=id_token</tt> as well as a few
other combinations which include additional security features for those flows.</t>
          <t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response" format="default"/>.</t>
        </section>
        <section anchor="redirection-endpoint" numbered="true" toc="default">
          <name>Redirection Endpoint</name>
          <t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>
          <t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986" format="default"/>, Section 6.2.1.</t>
          <t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986" format="default"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986" format="default"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>
          <section anchor="endpoint-request-confidentiality" numbered="true" toc="default">
            <name>Endpoint Request Confidentiality</name>
            <t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version" format="default"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>
            <t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>
          </section>
          <section anchor="registration-requirements" numbered="true" toc="default">
            <name>Registration Requirements</name>
            <t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>
            <t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>
            <t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>
            <t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors" format="default"/>.</t>
          </section>
          <section anchor="dynamic-configuration" numbered="true" toc="default">
            <name>Dynamic Configuration</name>
            <t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>
            <t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986" format="default"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986" format="default"/> Section 6.2.1.</t>
          </section>
          <section anchor="invalid-endpoint" numbered="true" toc="default">
            <name>Invalid Endpoint</name>
            <t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>
          </section>
          <section anchor="endpoint-content" numbered="true" toc="default">
            <name>Endpoint Content</name>
            <t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>
            <t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>
          </section>
        </section>
      </section>
      <section anchor="token-endpoint" numbered="true" toc="default">
        <name>Token Endpoint</name>
        <t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>
        <t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests to the token endpoint.</t>
        <t>The client MUST use the HTTP "POST" method when making access token
requests.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="token-endpoint-client-authentication" numbered="true" toc="default">
          <name>Client Authentication</name>
          <t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication" format="default"/> when making requests to the token endpoint.  Client
authentication is used for:</t>
          <ul spacing="normal">
            <li>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</li>
            <li>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</li>
            <li>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</li>
          </ul>
          <t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>
        </section>
      </section>
      <section anchor="access-token-scope" numbered="true" toc="default">
        <name>Access Token Scope</name>
        <t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>
        <t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>
        <artwork type="abnf" name="" align="left" alt=""><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork>
        <t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>
        <t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>
      </section>
    </section>
    <section anchor="obtaining-authorization" numbered="true" toc="default">
      <name>Obtaining Authorization</name>
      <t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>
      <section anchor="authorization-code-grant" numbered="true" toc="default">
        <name>Authorization Code Grant</name>
        <t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>
        <t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>
        <figure anchor="fig-authorization-code-flow">
          <name>Authorization Code Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-authorization-code-flow" format="default"/> includes the following steps:</t>
        <t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, PKCE code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>
        <t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>
        <t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>
        <t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>
        <t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>
        <section anchor="authorization-request" numbered="true" toc="default">
          <name>Authorization Request</name>
          <t>To begin the authorization request, the client builds the authorization
request URI by adding parameters to the authorization server's
authorization endpoint URI.</t>
          <t>Without a client secret, public clients would be susceptible to an authorization code
interception attack, where an attacker is able to intercept the authorization
response through various means and use the authorization code to obtain an access token.
To protect against this attack, as well as to protect against CSRF attacks,
the client first generates a unique secret per authorization request, which it can
later use along with the authorization code to prove that the application using the
authorization code is the same application that requested it. This practice is known
as "Proof-Key for Code Exchange", or PKCE, after the OAuth 2.0 extension (<xref target="RFC7636" format="default"/>)
where it was originally developed.</t>
          <section anchor="client-creates-a-pkce-code-verifier" numbered="true" toc="default">
            <name>Client Creates a PKCE Code Verifier</name>
            <t>The client first creates a PKCE code verifier, <tt>code_verifier</tt>, for each
Authorization Request, in the following manner:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork>
            <t>ABNF for <tt>code_verifier</tt> is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
            <t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL-safe string to use as the code verifier.</t>
          </section>
          <section anchor="client-creates-the-pkce-code-challenge" numbered="true" toc="default">
            <name>Client Creates the PKCE Code Challenge</name>
            <t>The client then creates a PKCE code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork>
            <t>If the client is capable of using <tt>S256</tt>, it MUST use <tt>S256</tt>, as
<tt>S256</tt> is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use <tt>plain</tt> only if they cannot support <tt>S256</tt> for some
technical reason and know via out-of-band configuration that the
server supports <tt>plain</tt>.</t>
            <t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>
            <t>ABNF for "code_challenge" is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
          </section>
          <section anchor="client-initiates-the-authorization-request" numbered="true" toc="default">
            <name>Client Initiates the Authorization Request</name>
            <t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"response_type":</dt>
              <dd>
  REQUIRED.  Value MUST be set to <tt>code</tt>.</dd>
              <dt>"client_id":</dt>
              <dd>
  REQUIRED.  The client identifier as described in <xref target="client-identifier" format="default"/>.</dd>
              <dt>"code_challenge":</dt>
              <dd>
  REQUIRED.  Code challenge.</dd>
              <dt>"code_challenge_method":</dt>
              <dd>
  OPTIONAL, defaults to <tt>plain</tt> if not present in the request.  Code
    nverifier transformation method is <tt>S256</tt> or <tt>plain</tt>.</dd>
              <dt>"redirect_uri":</dt>
              <dd>
  OPTIONAL.  As described in <xref target="redirection-endpoint" format="default"/>.</dd>
              <dt>"scope":</dt>
              <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
              <dt>"state":</dt>
              <dd>
  OPTIONAL.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.</dd>
            </dl>
            <t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>
            <t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork>
            <t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>
            <t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>
          </section>
        </section>
        <section anchor="authorization-response" numbered="true" toc="default">
          <name>Authorization Response</name>
          <t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>
          <dl newline="false" spacing="normal">
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</dd>
            <dt>"state":</dt>
            <dd>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
          </dl>
          <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork>
          <t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>
          <t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>
          <t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>
          <t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>
          <section anchor="authorization-code-error-response" numbered="true" toc="default">
            <name>Error Response</name>
            <t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>
            <t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>
            <t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>
            <t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"error":</dt>
              <dd>
                <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the
following:

                </t>
                <dl newline="false" spacing="normal">
                  <dt>"invalid_request":</dt>
                  <dd>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</dd>
                  <dt>"unauthorized_client":</dt>
                  <dd>
        The client is not authorized to request an authorization
code using this method.</dd>
                  <dt>"access_denied":</dt>
                  <dd>
        The resource owner or authorization server denied the
request.</dd>
                  <dt>"unsupported_response_type":</dt>
                  <dd>
        The authorization server does not support obtaining an
authorization code using this method.</dd>
                  <dt>"invalid_scope":</dt>
                  <dd>
        The requested scope is invalid, unknown, or malformed.</dd>
                  <dt>"server_error":</dt>
                  <dd>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</dd>
                  <dt>"temporarily_unavailable":</dt>
                  <dd>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</dd>
                </dl>
                <t>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
              </dd>
              <dt>"error_description":</dt>
              <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
              <dt>"error_uri":</dt>
              <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
              <dt>"state":</dt>
              <dd>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
            </dl>
            <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork>
          </section>
        </section>
        <section anchor="access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to "authorization_code".</dd>
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code received from the
authorization server.</dd>
            <dt>"redirect_uri":</dt>
            <dd>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request" format="default"/>, and their
values MUST be identical.</dd>
            <dt>"client_id":</dt>
            <dd>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</dd>
            <dt>"code_verifier":</dt>
            <dd>
  REQUIRED.  Code verifier</dd>
          </dl>
          <t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork>
          <t>The authorization server MUST:</t>
          <ul spacing="normal">
            <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
            <li>authenticate the client if client authentication is included,</li>
            <li>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</li>
            <li>verify that the authorization code is valid,</li>
            <li>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</li>
            <li>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request" format="default"/>, and if included ensure that
their values are identical.</li>
          </ul>
        </section>
        <section anchor="authorization-code-access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="client-credentials-grant" numbered="true" toc="default">
        <name>Client Credentials Grant</name>
        <t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>
        <t>The client credentials grant type MUST only be used by confidential
clients.</t>
        <figure anchor="fig-client-credentials-flow">
          <name>Client Credentials Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-client-credentials-flow" format="default"/> includes the following steps:</t>
        <t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>
        <t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>
        <section anchor="authorization-request-and-response" numbered="true" toc="default">
          <name>Authorization Request and Response</name>
          <t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>
        </section>
        <section anchor="client-credentials-access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to "client_credentials".</dd>
            <dt>"scope":</dt>
            <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
          </dl>
          <t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork>
          <t>The authorization server MUST authenticate the client.</t>
        </section>
        <section anchor="access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response" format="default"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="extension-grants" numbered="true" toc="default">
        <name>Extension Grants</name>
        <t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>
        <t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522" format="default"/>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork>
        <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      </section>
    </section>
    <section anchor="issuing-an-access-token" numbered="true" toc="default">
      <name>Issuing an Access Token</name>
      <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <section anchor="access-token-successful-response" numbered="true" toc="default">
        <name>Successful Response</name>
        <t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>
        <dl newline="false" spacing="normal">
          <dt>"access_token":</dt>
          <dd>
  REQUIRED.  The access token issued by the authorization server.</dd>
          <dt>"token_type":</dt>
          <dd>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types" format="default"/>.  Value is case insensitive.</dd>
          <dt>"expires_in":</dt>
          <dd>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</dd>
          <dt>"refresh_token":</dt>
          <dd>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token" format="default"/>.</dd>
          <dt>"scope":</dt>
          <dd>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope" format="default"/>.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>
        <t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616" format="default"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616" format="default"/>
with a value of "no-cache".</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork>
        <t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>
      </section>
      <section anchor="access-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <dl newline="false" spacing="normal">
          <dt>"error":</dt>
          <dd>
            <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the following:

            </t>
            <dl newline="false" spacing="normal">
              <dt>"invalid_request":</dt>
              <dd>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</dd>
              <dt>"invalid_client":</dt>
              <dd>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</dd>
              <dt>"invalid_grant":</dt>
              <dd>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</dd>
              <dt>"unauthorized_client":</dt>
              <dd>
        The authenticated client is not authorized to use this
authorization grant type.</dd>
              <dt>"unsupported_grant_type":</dt>
              <dd>
        The authorization grant type is not supported by the
authorization server.</dd>
              <dt>"invalid_scope":</dt>
              <dd>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</dd>
            </dl>
            <t>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
          </dd>
          <dt>"error_description":</dt>
          <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
          <dt>"error_uri":</dt>
          <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork>
      </section>
    </section>
    <section anchor="refreshing-an-access-token" numbered="true" toc="default">
      <name>Refreshing an Access Token</name>
      <t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>
      <t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>
      <t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
      <dl newline="false" spacing="normal">
        <dt>"grant_type":</dt>
        <dd>
  REQUIRED.  Value MUST be set to "refresh_token".</dd>
        <dt>"refresh_token":</dt>
        <dd>
  REQUIRED.  The refresh token issued to the client.</dd>
        <dt>"scope":</dt>
        <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</dd>
      </dl>
      <t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
      <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork>
      <t>The authorization server MUST:</t>
      <ul spacing="normal">
        <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
        <li>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</li>
        <li>validate the refresh token.</li>
      </ul>
      <t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>
      <ul spacing="normal">
        <li>
          <em>Sender-constrained refresh tokens:</em> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding" format="default"/> or <xref target="RFC8705" format="default"/>.</li>
        <li>
          <t><em>Refresh token rotation:</em> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  </t>
          <t>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
        </li>
      </ul>
      <t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>
      <t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>
      <ul spacing="normal">
        <li>password change</li>
        <li>logout at the authorization server</li>
      </ul>
      <t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>
    </section>
    <section anchor="accessing-protected-resources" numbered="true" toc="default">
      <name>Accessing Protected Resources</name>
      <t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>
      <t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617" format="default"/> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>
      <section anchor="access-token-types" numbered="true" toc="default">
        <name>Access Token Types</name>
        <t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>
        <t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
        <t>The above example is provided for illustration purposes only.</t>
        <t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>
      </section>
      <section anchor="bearer-tokens" numbered="true" toc="default">
        <name>Bearer Tokens</name>
        <t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>
        <t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>
        <section anchor="authenticated-requests" numbered="true" toc="default">
          <name>Authenticated Requests</name>
          <t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>
          <section anchor="authorization-request-header-field" numbered="true" toc="default">
            <name>Authorization Request Header Field</name>
            <t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617" format="default"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>
            <t>For example:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
            <t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617" format="default"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617" format="default"/> but is compatible
with the general authentication framework in HTTP 1.1 Authentication
<xref target="RFC7235" format="default"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork>
            <t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>
          </section>
          <section anchor="form-encoded-body-parameter" numbered="true" toc="default">
            <name>Form-Encoded Body Parameter</name>
            <t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>
            <ul spacing="normal">
              <li>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</li>
              <li>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224" format="default"/>.</li>
              <li>The HTTP request entity-body is single-part.</li>
              <li>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII" format="default"/> characters.</li>
              <li>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</li>
            </ul>
            <t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>
            <t>For example, the client makes the following HTTP request using
transport-layer security:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork>
            <t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>
          </section>
        </section>
        <section anchor="the-www-authenticate-response-header-field" numbered="true" toc="default">
          <name>The WWW-Authenticate Response Header Field</name>
          <t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617" format="default"/>.</t>
          <t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>
          <t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617" format="default"/>.  The
"realm" attribute MUST NOT appear more than once.</t>
          <t>The "scope" attribute is defined in <xref target="access-token-scope" format="default"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>
          <t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages" format="default"/> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP" format="default"/>
OAuth 2.0 use cases, respectively:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork>
          <t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes" format="default"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>
          <t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>
          <t>For example, in response to a protected resource request without
authentication:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
          <t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork>
        </section>
      </section>
      <section anchor="bearer-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry" format="default"/> for error values to be shared among
OAuth token authentication schemes.</t>
        <t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>
        <t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>
        <t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>
        <t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>
        <section anchor="bearer-token-error-codes" numbered="true" toc="default">
          <name>Error Codes</name>
          <t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>
          <dl newline="false" spacing="normal">
            <dt>"invalid_request":</dt>
            <dd>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</dd>
            <dt>"invalid_token":</dt>
            <dd>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</dd>
            <dt>"insufficient_scope":</dt>
            <dd>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</dd>
          </dl>
          <t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>
          <t>For example:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
        </section>
      </section>
      <section anchor="access-token-security-considerations" numbered="true" toc="default">
        <name>Access Token Security Considerations</name>
        <section anchor="security-threats" numbered="true" toc="default">
          <name>Security Threats</name>
          <t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63" format="default"/>.</t>
          <section anchor="token-manufacturemodification" numbered="true" toc="default">
            <name>Token manufacture/modification</name>
            <t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>
          </section>
          <section anchor="token-disclosure" numbered="true" toc="default">
            <name>Token disclosure</name>
            <t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>
          </section>
          <section anchor="token-redirect" numbered="true" toc="default">
            <name>Token redirect</name>
            <t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>
          </section>
          <section anchor="token-replay" numbered="true" toc="default">
            <name>Token replay</name>
            <t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>
          </section>
        </section>
        <section anchor="threat-mitigation" numbered="true" toc="default">
          <name>Threat Mitigation</name>
          <t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>
          <t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>
          <t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>
          <t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>
          <t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280" format="default"/>.</t>
          <t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265" format="default"/> for security
considerations about cookies.</t>
          <t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>
          <t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818" format="default"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>
        </section>
        <section anchor="summary-of-recommendations" numbered="true" toc="default">
          <name>Summary of Recommendations</name>
          <section anchor="safeguard-bearer-tokens" numbered="true" toc="default">
            <name>Safeguard bearer tokens</name>
            <t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>
          </section>
          <section anchor="validate-tls-certificate-chains" numbered="true" toc="default">
            <name>Validate TLS certificate chains</name>
            <t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>
          </section>
          <section anchor="always-use-tls-https" numbered="true" toc="default">
            <name>Always use TLS (https)</name>
            <t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>
          </section>
          <section anchor="dont-store-bearer-tokens-in-http-cookies" numbered="true" toc="default">
            <name>Don't store bearer tokens in HTTP cookies</name>
            <t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>
          </section>
          <section anchor="issue-short-lived-bearer-tokens" numbered="true" toc="default">
            <name>Issue short-lived bearer tokens</name>
            <t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>
          </section>
          <section anchor="issue-scoped-bearer-tokens" numbered="true" toc="default">
            <name>Issue scoped bearer tokens</name>
            <t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>
          </section>
          <section anchor="dont-pass-bearer-tokens-in-page-urls" numbered="true" toc="default">
            <name>Don't pass bearer tokens in page URLs</name>
            <t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>
          </section>
        </section>
        <section anchor="token-replay-prevention" numbered="true" toc="default">
          <name>Token Replay Prevention</name>
          <t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>
          <t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>.
The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
          <t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Section 4.11 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>
for further security advice.</t>
        </section>
        <section anchor="access-token-privilege-restriction" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators" format="default"/>, respectively, to
determine the resource server they want to access.</t>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar" format="default"/> to
determine those resources and/or actions.</t>
        </section>
      </section>
    </section>
    <section anchor="extensibility" numbered="true" toc="default">
      <name>Extensibility</name>
      <section anchor="defining-access-token-types" numbered="true" toc="default">
        <name>Defining Access Token Types</name>
        <t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry" format="default"/>), or by using a unique absolute URI as its name.</t>
        <t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>
        <t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617" format="default"/>).  The token type
"example" is reserved for use in examples.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="defining-new-endpoint-parameters" numbered="true" toc="default">
        <name>Defining New Endpoint Parameters</name>
        <t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry" format="default"/>.</t>
        <t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
        <t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>
      </section>
      <section anchor="defining-new-authorization-grant-types" numbered="true" toc="default">
        <name>Defining New Authorization Grant Types</name>
        <t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry" format="default"/>.</t>
      </section>
      <section anchor="new-response-types" numbered="true" toc="default">
        <name>Defining New Authorization Endpoint Response Types</name>
        <t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry" format="default"/>.  Response type
names MUST conform to the response-type ABNF.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork>
        <t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>
        <t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>
      </section>
      <section anchor="defining-additional-error-codes" numbered="true" toc="default">
        <name>Defining Additional Error Codes</name>
        <t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response" format="default"/>), the token error response (<xref target="access-token-error-response" format="default"/>), or the
resource access error response (<xref target="bearer-token-error-response" format="default"/>), such error codes MAY be
defined.</t>
        <t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry" format="default"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>
        <t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in <xref target="client-types" format="default"/>: web application,
browser-based application, and native application.</t>
      <t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819" format="default"/> and <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="security-client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or
<tt>private_key_jwt</tt> <xref target="OpenID" format="default"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>
        <t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>
        <t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity - for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>
        <t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>
        <t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>
        <section anchor="client-authentication-of-native-apps" numbered="true" toc="default">
          <name>Client Authentication of Native Apps</name>
          <t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <tt>client_id</tt> request parameter.</t>
          <t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types" format="default"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation" format="default"/>).</t>
        </section>
      </section>
      <section anchor="native-app-registration" numbered="true" toc="default">
        <name>Registration of Native App Clients</name>
        <t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591" format="default"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types" format="default"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>
        <t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>
        <t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme" format="default"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<tt>.</tt>)
SHOULD be rejected.</t>
        <t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <tt>com.example.app</tt>,
the owner of <tt>example.com</tt> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>
        <t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>
      </section>
      <section anchor="client-impersonation" numbered="true" toc="default">
        <name>Client Impersonation</name>
        <t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>
        <t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>
        <t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>
        <t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>
        <section anchor="native-app-client-impersonation" numbered="true" toc="default">
          <name>Impersonation of Native Apps</name>
          <t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id -
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>
          <t>Measures such as claimed <tt>https</tt> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>
        </section>
      </section>
      <section anchor="access-tokens" numbered="true" toc="default">
        <name>Access Tokens</name>
        <t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>
        <section anchor="access-token-privilege-restriction-1" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>
          <t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <tt>scope</tt> or <tt>resource</tt> as specified in
<xref target="RFC8707" format="default"/>, respectively, to determine the
resource server they want to access.</t>
        </section>
        <section anchor="access-token-replay-prevention" numbered="true" toc="default">
          <name>Access Token Replay Prevention</name>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <tt>scope</tt> and <tt>authorization_details</tt> as specified in
<xref target="I-D.ietf-oauth-rar" format="default"/> to determine those resources and/or actions.</t>
          <t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
        </section>
      </section>
      <section anchor="refresh-tokens" numbered="true" toc="default">
        <name>Refresh Tokens</name>
        <t>Authorization servers MAY issue refresh tokens to clients.</t>
        <t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>
        <t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>
      </section>
      <section anchor="protecting-redirect-based-flows" numbered="true" toc="default">
        <name>Protecting Redirect-Based Flows</name>
        <t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>
        <t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>
        <t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819" format="default"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <tt>nonce</tt> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <tt>state</tt> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>
        <t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>
        <t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>
        <section anchor="loopback-redirect-considerations-in-native-apps" numbered="true" toc="default">
          <name>Loopback Redirect Considerations in Native Apps</name>
          <t>Loopback interface redirect URIs use the <tt>http</tt> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>
          <t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>
          <t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>
          <t>While redirect URIs using localhost (i.e.,
<tt>http://localhost:{port}/{path}</tt>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection" format="default"/>, the use of <tt>localhost</tt> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <tt>localhost</tt> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>
        </section>
      </section>
      <section anchor="authorization-codes" numbered="true" toc="default">
        <name>Authorization Codes</name>
        <t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>
        <t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>
        <t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>
        <t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <tt>nonce</tt> parameter and
ID Token Claim <xref target="OpenID" format="default"/> MAY be used as well. The PKCE challenge or
OpenID Connect <tt>nonce</tt> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>
        <t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>
        <t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <tt>S256</tt> is the only such method.</t>
        <t>Authorization servers MUST support PKCE.</t>
        <t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<tt>code_challenge_methods_supported</tt> in their AS metadata (<xref target="RFC8418" format="default"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>
      </section>
      <section anchor="request-confidentiality" numbered="true" toc="default">
        <name>Request Confidentiality</name>
        <t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>
        <t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>
      </section>
      <section anchor="ensuring-endpoint-authenticity" numbered="true" toc="default">
        <name>Ensuring Endpoint Authenticity</name>
        <t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818" format="default"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125" format="default"/> and in accordance with its
requirements for server identity authentication.</t>
      </section>
      <section anchor="credentials-guessing-attacks" numbered="true" toc="default">
        <name>Credentials-Guessing Attacks</name>
        <t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>
        <t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>
        <t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>
      </section>
      <section anchor="phishing-attacks" numbered="true" toc="default">
        <name>Phishing Attacks</name>
        <t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>
        <t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>
        <t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>
      </section>
      <section anchor="fake-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Fake External User-Agents in Native Apps</name>
        <t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>
        <t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>
        <t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>
        <t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>
      </section>
      <section anchor="malicious-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Malicious External User-Agents in Native Apps</name>
        <t>If a malicious app is able to configure itself as the default handler
for <tt>https</tt> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>
        <t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <tt>http</tt> and <tt>https</tt> scheme URIs.</t>
      </section>
      <section anchor="csrf_countermeasures" numbered="true" toc="default">
        <name>Cross-Site Request Forgery</name>
        <t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>
        <t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <tt>state</tt> parameter to the authorization
server as described in <xref target="RFC6819" format="default"/>. The same protection is provided by
PKCE or the OpenID Connect <tt>nonce</tt> value.</t>
        <t>When using PKCE instead of <tt>state</tt> or <tt>nonce</tt> for CSRF protection, it is
important to note that:</t>
        <ul spacing="normal">
          <li>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<tt>state</tt> or <tt>nonce</tt> MUST be used for CSRF protection.</li>
          <li>If <tt>state</tt> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <tt>state</tt> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state" format="default"/>.</li>
        </ul>
        <t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414" format="default"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>
      </section>
      <section anchor="clickjacking" numbered="true" toc="default">
        <name>Clickjacking</name>
        <t>As described in Section 4.4.1.9 of <xref target="RFC6819" format="default"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>
        <t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819" format="default"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2" format="default"/> or greater.</t>
        <t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>
        <t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2" format="default"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <tt>frame-ancestors</tt>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <tt>script-src</tt>). A non-normative
example of such a policy is shown in the following listing:</t>
        <t><tt>
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</tt></t>
        <t>Because some user agents do not support <xref target="CSP-2" format="default"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819" format="default"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>
      </section>
      <section anchor="code-injection-and-input-validation" numbered="true" toc="default">
        <name>Code Injection and Input Validation</name>
        <t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>
        <t>The authorization server and client MUST sanitize (and validate when
possible) any value received - in particular, the value of the
"state" and "redirect_uri" parameters.</t>
      </section>
      <section anchor="open-redirectors" numbered="true" toc="default">
        <name>Open Redirectors</name>
        <t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>
        <section anchor="open_redirector_on_client" numbered="true" toc="default">
          <name>Client as Open Redirector</name>
          <t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>
          <t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir" format="default"/>.</t>
        </section>
        <section anchor="authorization-server-as-open-redirector" numbered="true" toc="default">
          <name>Authorization Server as Open Redirector</name>
          <t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>
          <t><xref target="authorization-code-error-response" format="default"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <tt>client_id</tt> and <tt>redirect_uri</tt>.</t>
          <t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591" format="default"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>
          <t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>
        </section>
      </section>
      <section anchor="authorization-server-mix-up-mitigation-in-native-apps" numbered="true" toc="default">
        <name>Authorization Server Mix-Up Mitigation in Native Apps</name>
        <t>(TODO: merge this with the regular mix-up section when it is brought in)</t>
        <t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>
        <t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>
        <t>The requirement of <xref target="native-app-registration" format="default"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>
      </section>
      <section anchor="native-apps-embedded-user-agents" numbered="true" toc="default">
        <name>Embedded User Agents in Native Apps</name>
        <t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>
        <t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>
        <t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>
        <t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>
        <t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>
      </section>
      <section anchor="other-recommendations" numbered="true" toc="default">
        <name>Other Recommendations</name>
        <t>Authorization servers SHOULD NOT allow clients to influence their
<tt>client_id</tt> or <tt>sub</tt> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>
      </section>
    </section>
    <section anchor="native-applications" numbered="true" toc="default">
      <name>Native Applications</name>
      <t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>
      <t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>
      <t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
      <t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See <xref target="native-apps-embedded-user-agents" format="default"/>
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>
      <t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>
      <t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>
      <section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" numbered="true" toc="default">
        <name>Using Inter-App URI Communication for OAuth in Native Apps</name>
        <t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>
        <t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>
        <t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app" format="default"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app" format="default"/>).</t>
      </section>
      <section anchor="authorization-request-native-app" numbered="true" toc="default">
        <name>Initiating the Authorization Request from a Native App</name>
        <t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant" format="default"/>
using a redirect URI capable of being received by the native app.</t>
        <t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app" format="default"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>
        <t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>
        <t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>
        <t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>
      </section>
      <section anchor="authorization-response-native-app" numbered="true" toc="default">
        <name>Receiving the Authorization Response in a Native App</name>
        <t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>
        <t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>
        <section anchor="private-use-uri-scheme" numbered="true" toc="default">
          <name>Private-Use URI Scheme Redirection</name>
          <t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <tt>com.example.app</tt>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>
          <t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>
          <t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595" format="default"/> for
private-use URI schemes.</t>
          <t>For example, an app that controls the domain name <tt>app.example.com</tt>
can use <tt>com.example.app</tt> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<tt>client1234.usercontent.example.net</tt>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <tt>myapp</tt>, however, would not meet this requirement, as
it is not based on a domain name.</t>
          <t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>
          <t>Following the requirements of Section 3.2 of <xref target="RFC3986" format="default"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<tt>/</tt>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork>
          <t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>
        </section>
        <section anchor="claimed-https-scheme-uri-redirection" numbered="true" toc="default">
          <name>Claimed "https" Scheme URI Redirection</name>
          <t>Some operating systems allow apps to claim <tt>https</tt> scheme <xref target="RFC7230" format="default"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>
          <t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork>
          <t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
<xref target="native-app-registration" format="default"/> that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>
          <t>App-claimed <tt>https</tt> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>
        </section>
        <section anchor="loopback-interface-redirection" numbered="true" toc="default">
          <name>Loopback Interface Redirection</name>
          <t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>
          <t>Loopback redirect URIs use the <tt>http</tt> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>
          <t>That is, <tt>http://127.0.0.1:{port}/{path}</tt> for IPv4, and
<tt>http://[::1]:{port}/{path}</tt> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork>
          <t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork>
          <t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>
          <t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>
        </section>
      </section>
    </section>
    <section anchor="browser-based-apps" numbered="true" toc="default">
      <name>Browser-Based Apps</name>
      <t>Browser-based apps are are clients that run in a web browser, typically
written in JavaScript, also known as "single-page apps". These types of apps
have particular security considerations similar to native apps.</t>
      <t>TODO: Bring in the normative text of the browser-based apps BCP when it is finalized.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="access-token-registry" numbered="true" toc="default">
        <name>OAuth Access Token Types Registry</name>
        <t>This specification establishes the OAuth Access Token Types registry.</t>
        <t>Access token types are registered with a Specification Required
(<xref target="RFC5226" format="default"/>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Additional Token Endpoint Response Parameters:</dt>
            <dd>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry" format="default"/>.</dd>
            <dt>HTTP Authentication Scheme(s):</dt>
            <dd>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Access Token Types registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Type name: Bearer</li>
            <li>Additional Token Endpoint Response Parameters: (none)</li>
            <li>HTTP Authentication Scheme(s): Bearer</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
      <section anchor="parameters-registry" numbered="true" toc="default">
        <name>OAuth Parameters Registry</name>
        <t>This specification establishes the OAuth Parameters registry.</t>
        <t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226" format="default"/>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Parameter name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Parameter usage location:</dt>
            <dd>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-1" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Parameters registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Parameter name: client_id</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: client_secret</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: response_type</li>
            <li>Parameter usage location: authorization request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: redirect_uri</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: scope</li>
            <li>Parameter usage location: authorization request, authorization
response, token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: state</li>
            <li>Parameter usage location: authorization request, authorization
response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: code</li>
            <li>Parameter usage location: authorization response, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_description</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_uri</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: grant_type</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: access_token</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: token_type</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: expires_in</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: username</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: password</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: refresh_token</li>
            <li>Parameter usage location: token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="response-types-registry" numbered="true" toc="default">
        <name>OAuth Authorization Endpoint Response Types Registry</name>
        <t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>
        <t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226" format="default"/>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-2" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Response type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>
          <ul spacing="normal">
            <li>Response type name: code</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="error-registry" numbered="true" toc="default">
        <name>OAuth Extensions Error Registry</name>
        <t>This specification establishes the OAuth Extensions Error registry.</t>
        <t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226" format="default"/>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-3" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Error name:</dt>
            <dd>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</dd>
            <dt>Error usage location:</dt>
            <dd>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response" format="default"/>), token error response (<xref target="access-token-error-response" format="default"/>), or resource
access error response (<xref target="bearer-token-error-response" format="default"/>).</dd>
            <dt>Related protocol extension:</dt>
            <dd>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-3" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Error registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Error name: invalid_request</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: invalid_token</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: insufficient_scope</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <seriesInfo name="DOI" value="10.17487/RFC2119"/>
            <seriesInfo name="RFC" value="2119"/>
            <seriesInfo name="BCP" value="14"/>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2616" target="https://www.rfc-editor.org/info/rfc2616" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
          <front>
            <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
            <seriesInfo name="DOI" value="10.17487/RFC2616"/>
            <seriesInfo name="RFC" value="2616"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="J." surname="Gettys" fullname="J. Gettys">
              <organization/>
            </author>
            <author initials="J." surname="Mogul" fullname="J. Mogul">
              <organization/>
            </author>
            <author initials="H." surname="Frystyk" fullname="H. Frystyk">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as "HTTP/1.1", and is an update to RFC 2068.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2617" target="https://www.rfc-editor.org/info/rfc2617" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
          <front>
            <title>HTTP Authentication: Basic and Digest Access Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC2617"/>
            <seriesInfo name="RFC" value="2617"/>
            <author initials="J." surname="Franks" fullname="J. Franks">
              <organization/>
            </author>
            <author initials="P." surname="Hallam-Baker" fullname="P. Hallam-Baker">
              <organization/>
            </author>
            <author initials="J." surname="Hostetler" fullname="J. Hostetler">
              <organization/>
            </author>
            <author initials="S." surname="Lawrence" fullname="S. Lawrence">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="A." surname="Luotonen" fullname="A. Luotonen">
              <organization/>
            </author>
            <author initials="L." surname="Stewart" fullname="L. Stewart">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>This document provides the specification for HTTP's authentication framework, the original Basic authentication scheme and a scheme based on cryptographic hashes, referred to as "Digest Access Authentication". [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2818" target="https://www.rfc-editor.org/info/rfc2818" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
          <front>
            <title>HTTP Over TLS</title>
            <seriesInfo name="DOI" value="10.17487/RFC2818"/>
            <seriesInfo name="RFC" value="2818"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2000" month="May"/>
            <abstract>
              <t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3629" target="https://www.rfc-editor.org/info/rfc3629" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <seriesInfo name="DOI" value="10.17487/RFC3629"/>
            <seriesInfo name="RFC" value="3629"/>
            <seriesInfo name="STD" value="63"/>
            <author initials="F." surname="Yergeau" fullname="F. Yergeau">
              <organization/>
            </author>
            <date year="2003" month="November"/>
            <abstract>
              <t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <seriesInfo name="DOI" value="10.17487/RFC3986"/>
            <seriesInfo name="RFC" value="3986"/>
            <seriesInfo name="STD" value="66"/>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <date year="2005" month="January"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4627" target="https://www.rfc-editor.org/info/rfc4627" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
          <front>
            <title>The application/json Media Type for JavaScript Object Notation (JSON)</title>
            <seriesInfo name="DOI" value="10.17487/RFC4627"/>
            <seriesInfo name="RFC" value="4627"/>
            <author initials="D." surname="Crockford" fullname="D. Crockford">
              <organization/>
            </author>
            <date year="2006" month="July"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <seriesInfo name="DOI" value="10.17487/RFC4949"/>
            <seriesInfo name="RFC" value="4949"/>
            <seriesInfo name="FYI" value="36"/>
            <author initials="R." surname="Shirey" fullname="R. Shirey">
              <organization/>
            </author>
            <date year="2007" month="August"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5226" target="https://www.rfc-editor.org/info/rfc5226" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <seriesInfo name="DOI" value="10.17487/RFC5226"/>
            <seriesInfo name="RFC" value="5226"/>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization/>
            </author>
            <author initials="H." surname="Alvestrand" fullname="H. Alvestrand">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t>
              <t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t>
              <t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <seriesInfo name="DOI" value="10.17487/RFC5234"/>
            <seriesInfo name="RFC" value="5234"/>
            <seriesInfo name="STD" value="68"/>
            <author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
              <organization/>
            </author>
            <author initials="P." surname="Overell" fullname="P. Overell">
              <organization/>
            </author>
            <date year="2008" month="January"/>
            <abstract>
              <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6125" target="https://www.rfc-editor.org/info/rfc6125" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
          <front>
            <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC6125"/>
            <seriesInfo name="RFC" value="6125"/>
            <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre">
              <organization/>
            </author>
            <author initials="J." surname="Hodges" fullname="J. Hodges">
              <organization/>
            </author>
            <date year="2011" month="March"/>
            <abstract>
              <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6749" target="https://www.rfc-editor.org/info/rfc6749" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework</title>
            <seriesInfo name="DOI" value="10.17487/RFC6749"/>
            <seriesInfo name="RFC" value="6749"/>
            <author initials="D." surname="Hardt" fullname="D. Hardt" role="editor">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6750" target="https://www.rfc-editor.org/info/rfc6750" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
            <seriesInfo name="DOI" value="10.17487/RFC6750"/>
            <seriesInfo name="RFC" value="6750"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="D." surname="Hardt" fullname="D. Hardt">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <seriesInfo name="DOI" value="10.17487/RFC8446"/>
            <seriesInfo name="RFC" value="8446"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <seriesInfo name="DOI" value="10.17487/RFC5280"/>
            <seriesInfo name="RFC" value="5280"/>
            <author initials="D." surname="Cooper" fullname="D. Cooper">
              <organization/>
            </author>
            <author initials="S." surname="Santesson" fullname="S. Santesson">
              <organization/>
            </author>
            <author initials="S." surname="Farrell" fullname="S. Farrell">
              <organization/>
            </author>
            <author initials="S." surname="Boeyen" fullname="S. Boeyen">
              <organization/>
            </author>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <author initials="W." surname="Polk" fullname="W. Polk">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7595" target="https://www.rfc-editor.org/info/rfc7595" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
          <front>
            <title>Guidelines and Registration Procedures for URI Schemes</title>
            <seriesInfo name="DOI" value="10.17487/RFC7595"/>
            <seriesInfo name="RFC" value="7595"/>
            <seriesInfo name="BCP" value="35"/>
            <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
              <organization/>
            </author>
            <author initials="T." surname="Hansen" fullname="T. Hansen">
              <organization/>
            </author>
            <author initials="T." surname="Hardie" fullname="T. Hardie">
              <organization/>
            </author>
            <date year="2015" month="June"/>
            <abstract>
              <t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8252" target="https://www.rfc-editor.org/info/rfc8252" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
          <front>
            <title>OAuth 2.0 for Native Apps</title>
            <seriesInfo name="DOI" value="10.17487/RFC8252"/>
            <seriesInfo name="RFC" value="8252"/>
            <seriesInfo name="BCP" value="212"/>
            <author initials="W." surname="Denniss" fullname="W. Denniss">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2017" month="October"/>
            <abstract>
              <t>OAuth 2.0 authorization requests from native apps should only be made through external user-agents, primarily the user's browser.  This specification details the security and usability reasons why this is the case and how native apps and authorization servers can implement this best practice.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-security-topics" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-security-topics-14.txt">
          <front>
            <title>OAuth 2.0 Security Best Current Practice</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-security-topics-14"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="A" surname="Labunets" fullname="Andrey Labunets">
              <organization/>
            </author>
            <author initials="D" surname="Fett" fullname="Daniel Fett">
              <organization/>
            </author>
            <date month="February" day="10" year="2020"/>
            <abstract>
              <t>This document describes best current security practice for OAuth 2.0. It updates and extends the OAuth 2.0 Security Threat Model to incorporate practical experiences gathered since OAuth 2.0 was published and covers new threats relevant due to the broader application of OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="USASCII">
          <front>
            <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
            <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
              <organization/>
            </author>
            <date year="1986"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-html401-19991224" target="http://www.w3.org/TR/1999/REC-html401-19991224" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
          <front>
            <title>HTML 4.01 Specification</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-html401-19991224"/>
            <author initials="D." surname="Raggett" fullname="Dave Raggett">
              <organization/>
            </author>
            <author initials="A." surname="Hors" fullname="Arnaud Le Hors">
              <organization/>
            </author>
            <author initials="I." surname="Jacobs" fullname="Ian Jacobs">
              <organization/>
            </author>
            <date month="December" day="24" year="1999"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-xml-20081126" target="http://www.w3.org/TR/2008/REC-xml-20081126" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xml-20081126"/>
            <author initials="T." surname="Bray" fullname="Tim Bray">
              <organization/>
            </author>
            <author initials="J." surname="Paoli" fullname="Jean Paoli">
              <organization/>
            </author>
            <author initials="M." surname="Sperberg-McQueen" fullname="Michael Sperberg-McQueen">
              <organization/>
            </author>
            <author initials="E." surname="Maler" fullname="Eve Maler">
              <organization/>
            </author>
            <author initials="F." surname="Yergeau" fullname="FranÃ§ois Yergeau">
              <organization/>
            </author>
            <date month="November" day="26" year="2008"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC7522" target="https://www.rfc-editor.org/info/rfc7522" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
          <front>
            <title>Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</title>
            <seriesInfo name="DOI" value="10.17487/RFC7522"/>
            <seriesInfo name="RFC" value="7522"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore" fullname="C. Mortimore">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t>This specification defines the use of a Security Assertion Markup Language (SAML) 2.0 Bearer Assertion as a means for requesting an OAuth 2.0 access token as well as for client authentication.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6819" target="https://www.rfc-editor.org/info/rfc6819" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
          <front>
            <title>OAuth 2.0 Threat Model and Security Considerations</title>
            <seriesInfo name="DOI" value="10.17487/RFC6819"/>
            <seriesInfo name="RFC" value="6819"/>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="McGloin" fullname="M. McGloin">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2013" month="January"/>
            <abstract>
              <t>This document gives additional security considerations for OAuth, beyond those in the OAuth 2.0 specification, based on a comprehensive threat model for the OAuth 2.0 protocol.  This document is not an  Internet Standards Track specification; it is published for  informational purposes.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6265" target="https://www.rfc-editor.org/info/rfc6265" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
          <front>
            <title>HTTP State Management Mechanism</title>
            <seriesInfo name="DOI" value="10.17487/RFC6265"/>
            <seriesInfo name="RFC" value="6265"/>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization/>
            </author>
            <date year="2011" month="April"/>
            <abstract>
              <t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7591" target="https://www.rfc-editor.org/info/rfc7591" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
          <front>
            <title>OAuth 2.0 Dynamic Client Registration Protocol</title>
            <seriesInfo name="DOI" value="10.17487/RFC7591"/>
            <seriesInfo name="RFC" value="7591"/>
            <author initials="J." surname="Richer" fullname="J. Richer" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Machulak" fullname="M. Machulak">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2015" month="July"/>
            <abstract>
              <t>This specification defines mechanisms for dynamically registering OAuth 2.0 clients with authorization servers.  Registration requests send a set of desired client metadata values to the authorization server.  The resulting registration responses return a client identifier to use at the authorization server and the client metadata values registered for the client.  The client can then use this registration information to communicate with the authorization server using the OAuth 2.0 protocol.  This specification also defines a set of common client metadata fields and values for clients to use during registration.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8707" target="https://www.rfc-editor.org/info/rfc8707" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="DOI" value="10.17487/RFC8707"/>
            <seriesInfo name="RFC" value="8707"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8414" target="https://www.rfc-editor.org/info/rfc8414" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
          <front>
            <title>OAuth 2.0 Authorization Server Metadata</title>
            <seriesInfo name="DOI" value="10.17487/RFC8414"/>
            <seriesInfo name="RFC" value="8414"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2018" month="June"/>
            <abstract>
              <t>This specification defines a metadata format that an OAuth 2.0 client can use to obtain the information needed to interact with an OAuth 2.0 authorization server, including its endpoint locations and authorization server capabilities.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8418" target="https://www.rfc-editor.org/info/rfc8418" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
          <front>
            <title>Use of the Elliptic Curve Diffie-Hellman Key Agreement Algorithm with X25519 and X448 in the Cryptographic Message Syntax (CMS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC8418"/>
            <seriesInfo name="RFC" value="8418"/>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document describes the conventions for using the Elliptic Curve Diffie-Hellman (ECDH) key agreement algorithm with curve25519 and curve448 in the Cryptographic Message Syntax (CMS).</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8705" target="https://www.rfc-editor.org/info/rfc8705" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
          <front>
            <title>OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens</title>
            <seriesInfo name="DOI" value="10.17487/RFC8705"/>
            <seriesInfo name="RFC" value="8705"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document describes OAuth client authentication and certificate-bound access and refresh tokens using mutual Transport Layer Security (TLS) authentication with X.509 certificates.  OAuth clients are provided a mechanism for authentication to the authorization server using mutual TLS, based on either self-signed certificates or public key infrastructure (PKI). OAuth authorization servers are provided a mechanism for binding access tokens to a client's mutual-TLS certificate, and OAuth protected resources are provided a method for ensuring that such an access token presented to it was issued to the client presenting the token.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
            <seriesInfo name="DOI" value="10.17487/RFC7230"/>
            <seriesInfo name="RFC" value="7230"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7235" target="https://www.rfc-editor.org/info/rfc7235" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7235.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC7235"/>
            <seriesInfo name="RFC" value="7235"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7636" target="https://www.rfc-editor.org/info/rfc7636" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
          <front>
            <title>Proof Key for Code Exchange by OAuth Public Clients</title>
            <seriesInfo name="DOI" value="10.17487/RFC7636"/>
            <seriesInfo name="RFC" value="7636"/>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Agarwal" fullname="N. Agarwal">
              <organization/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t>OAuth 2.0 public clients utilizing the Authorization Code Grant are susceptible to the authorization code interception attack.  This specification describes the attack as well as a technique to mitigate against the threat through the use of Proof Key for Code Exchange (PKCE, pronounced "pixy").</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-rar" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-rar-01.txt">
          <front>
            <title>OAuth 2.0 Rich Authorization Requests</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-rar-01"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Richer" fullname="Justin Richer">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <date month="February" day="19" year="2020"/>
            <abstract>
              <t>This document specifies a new parameter "authorization_details" that is used to carry fine grained authorization data in the OAuth authorization request.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-resource-indicators" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-resource-indicators-08.txt">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-resource-indicators-08"/>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="H" surname="Tschofenig" fullname="Hannes Tschofenig">
              <organization/>
            </author>
            <date month="September" day="11" year="2019"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.bradley-oauth-jwt-encoded-state" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml" target="http://www.ietf.org/internet-drafts/draft-bradley-oauth-jwt-encoded-state-09.txt">
          <front>
            <title>Encoding claims in the OAuth 2 state parameter using a JWT</title>
            <seriesInfo name="Internet-Draft" value="draft-bradley-oauth-jwt-encoded-state-09"/>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="H" surname="Zandbelt" fullname="Hans Zandbelt">
              <organization/>
            </author>
            <date month="November" day="4" year="2018"/>
            <abstract>
              <t>This draft provides a method for a client to encode one or more elements encoding information about the session into the OAuth 2 "state" parameter.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-token-binding" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-token-binding-08.txt">
          <front>
            <title>OAuth 2.0 Token Binding</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-token-binding-08"/>
            <author initials="M" surname="Jones" fullname="Michael Jones">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="W" surname="Denniss" fullname="William Denniss">
              <organization/>
            </author>
            <date month="October" day="19" year="2018"/>
            <abstract>
              <t>This specification enables OAuth 2.0 implementations to apply Token Binding to Access Tokens, Authorization Codes, Refresh Tokens, JWT Authorization Grants, and JWT Client Authentication.  This cryptographically binds these tokens to a client's Token Binding key pair, possession of which is proven on the TLS connections over which the tokens are intended to be used.  This use of Token Binding protects these tokens from man-in-the-middle and token export and replay attacks.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-browser-based-apps" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-browser-based-apps-05.txt">
          <front>
            <title>OAuth 2.0 for Browser-Based Apps</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-browser-based-apps-05"/>
            <author initials="A" surname="Parecki" fullname="Aaron Parecki">
              <organization/>
            </author>
            <author initials="D" surname="Waite" fullname="David Waite">
              <organization/>
            </author>
            <date month="February" day="28" year="2020"/>
            <abstract>
              <t>This specification details the security considerations and best practices that must be taken into account when developing browser- based applications that use OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="OpenID" target="https://openiD.net/specs/openiD-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0</title>
            <author initials="N." surname="Sakimora">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="OMAP" target="https://www.oatc.us/Standards/Download-Standards">
          <front>
            <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
            <author initials="J." surname="Huff">
              <organization/>
            </author>
            <author initials="D." surname="Schlacht">
              <organization/>
            </author>
            <author initials="A." surname="Nadalin">
              <organization/>
            </author>
            <author initials="J." surname="Simmons">
              <organization/>
            </author>
            <author initials="P." surname="Rosenberg">
              <organization/>
            </author>
            <author initials="P." surname="Madsen">
              <organization/>
            </author>
            <author initials="T." surname="Ace">
              <organization/>
            </author>
            <author initials="C." surname="Rickelton-Abdi">
              <organization/>
            </author>
            <author initials="B." surname="Boyer">
              <organization/>
            </author>
            <date year="2012" month="April"/>
          </front>
        </reference>
        <reference anchor="NIST800-63" target="http://csrc.nist.gov/publications/">
          <front>
            <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
            <author initials="W." surname="Burr">
              <organization/>
            </author>
            <author initials="D." surname="Dodson">
              <organization/>
            </author>
            <author initials="E." surname="Newton">
              <organization/>
            </author>
            <author initials="R." surname="Perlner">
              <organization/>
            </author>
            <author initials="T." surname="Polk">
              <organization/>
            </author>
            <author initials="S." surname="Gupta">
              <organization/>
            </author>
            <author initials="E." surname="Nabbus">
              <organization/>
            </author>
            <date year="2011" month="December"/>
          </front>
        </reference>
        <reference anchor="OpenID.Messages" target="http://openid.net/specs/openid-connect-messages-1_0.html">
          <front>
            <title>OpenID Connect Messages 1.0</title>
            <author initials="N." surname="Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <author initials="E." surname="Jay">
              <organization/>
            </author>
            <date year="2012" month="June"/>
          </front>
        </reference>
        <reference anchor="owasp_redir" target="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">
          <front>
            <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CSP-2" target="https://www.w3.org/TR/CSP2">
          <front>
            <title>Content Security Policy Level 2</title>
            <author>
              <organization/>
            </author>
            <date year="2016" month="December"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="augmented-backus-naur-form-abnf-syntax" numbered="true" toc="default">
      <name>Augmented Backus-Naur Form (ABNF) Syntax</name>
      <t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234" format="default"/>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126" format="default"/>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>
      <t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986" format="default"/>.</t>
      <t>Some of the definitions that follow use these common definitions:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork>
      <t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126" format="default"/>, but omitting the Carriage
Return and Linefeed characters.)</t>
      <section anchor="clientid-syntax" numbered="true" toc="default">
        <name>"client_id" Syntax</name>
        <t>The "client_id" element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-id     = *VSCHAR
]]></artwork>
      </section>
      <section anchor="clientsecret-syntax" numbered="true" toc="default">
        <name>"client_secret" Syntax</name>
        <t>The "client_secret" element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-secret = *VSCHAR
]]></artwork>
      </section>
      <section anchor="responsetype-syntax" numbered="true" toc="default">
        <name>"response_type" Syntax</name>
        <t>The "response_type" element is defined in <xref target="response-type" format="default"/> and <xref target="new-response-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="scope-syntax" numbered="true" toc="default">
        <name>"scope" Syntax</name>
        <t>The "scope" element is defined in <xref target="access-token-scope" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork>
      </section>
      <section anchor="state-syntax" numbered="true" toc="default">
        <name>"state" Syntax</name>
        <t>The "state" element is defined in <xref target="authorization-request" format="default"/>, <xref target="authorization-response" format="default"/>, and <xref target="authorization-code-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 state      = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="redirecturi-syntax" numbered="true" toc="default">
        <name>"redirect_uri" Syntax</name>
        <t>The "redirect_uri" element is defined in <xref target="authorization-request" format="default"/>, and <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 redirect-uri      = URI-reference
]]></artwork>
      </section>
      <section anchor="error-syntax" numbered="true" toc="default">
        <name>"error" Syntax</name>
        <t>The "error" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
7.2, and 8.5:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error             = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="errordescription-syntax" numbered="true" toc="default">
        <name>"error_description" Syntax</name>
        <t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>,
<xref target="access-token-error-response" format="default"/>, and <xref target="bearer-token-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="erroruri-syntax" numbered="true" toc="default">
        <name>"error_uri" Syntax</name>
        <t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
and 7.2:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-uri         = URI-reference
]]></artwork>
      </section>
      <section anchor="granttype-syntax" numbered="true" toc="default">
        <name>"grant_type" Syntax</name>
        <t>The "grant_type" element is defined in Sections <xref target="access-token-request" format="default"/>, <xref target="access-token-response" format="default"/>, <xref target="client-credentials-access-token-request" format="default"/>,
<xref target="extension-grants" format="default"/>, and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="code-syntax" numbered="true" toc="default">
        <name>"code" Syntax</name>
        <t>The "code" element is defined in <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 code       = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="accesstoken-syntax" numbered="true" toc="default">
        <name>"access_token" Syntax</name>
        <t>The "access_token" element is defined in <xref target="access-token-response" format="default"/> and <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 access-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="tokentype-syntax" numbered="true" toc="default">
        <name>"token_type" Syntax</name>
        <t>The "token_type" element is defined in <xref target="access-token-successful-response" format="default"/>, and <xref target="defining-access-token-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="expiresin-syntax" numbered="true" toc="default">
        <name>"expires_in" Syntax</name>
        <t>The "expires_in" element is defined in <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 expires-in = 1*DIGIT
]]></artwork>
      </section>
      <section anchor="refreshtoken-syntax" numbered="true" toc="default">
        <name>"refresh_token" Syntax</name>
        <t>The "refresh_token" element is defined in <xref target="access-token-successful-response" format="default"/> and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="endpoint-parameter-syntax" numbered="true" toc="default">
        <name>Endpoint Parameter Syntax</name>
        <t>The syntax for new endpoint parameters is defined in <xref target="defining-new-endpoint-parameters" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="codeverifier-syntax" numbered="true" toc="default">
        <name>"code_verifier" Syntax</name>
        <t>ABNF for "code_verifier" is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
      <section anchor="codechallenge-syntax" numbered="true" toc="default">
        <name>"code_challenge" Syntax</name>
        <t>ABNF for "code_challenge" is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
    </section>
    <section anchor="use-of-applicationx-www-form-urlencoded-media-type" numbered="true" toc="default">
      <name>Use of application/x-www-form-urlencoded Media Type</name>
      <t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224" format="default"/> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>
      <t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629" format="default"/> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224" format="default"/>.</t>
      <t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>
      <t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork>
      <t>and then represented in the payload as:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork>
    </section>
    <section anchor="acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>TBD</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIABQqZF4AA+y9+3Ybx5Uv/H89RS96JSYzAExSV8ujOUPdbCXWJaIcnyQr
R2oCTbItAI1BN0Qxjs76XuN7ve9Jvn2t2lVdDVK2JzkzJ1ozsQSgq+uya9/3
b4/HY9fV3by6V7w+r4oXR5vuvDicHBT4l2Zd/7Xs6mZZPFmXi+qiWb9zs2a6
hL/fK2br8rQbr8p1NX1Xj5sSfj9+fzg+GO/vu1nZwS8O9w/3x/s3xvt3nKtX
63tFt9603eH+/pf7hw6eK+/x+9y7i3vF02VXrZdVN36E47pp2d0r2m7mps2y
rZbtpqXHK3nuuJpu1nV36eD7Wb08u1ds2nHZTuvarep7rii6ZnqvuKxa+Gvb
rLt1ddr6f18uwj9dSevER8ZFvYRPH02Kb8r1rINPiqJZn5VL2QR4a322fLqc
vFif0Ze8D4/q6TvzRLUo6znsDnw6OcdP//0MP5lMmwV9P202y259ea/4bll3
1aw47mCv2vD6o0nxkvfUvOOoXMMh2M/lNSV+8e9yCP4d8axfvOtK+hh27F5x
3nWr9t4XX9CT6YNXTe71pPi2mc2qdQvfdmaCrxv8aNn7VqbZ8df/Pg9fT+Cs
M5OFM6HZuGWzXsBn7ys8mldPHh4eHHypf719cDv89Y7+9e7BXfnrjduH+tsb
X97V3968fai/vfnlTf3BrcPD2/6vN27KX28fHN7Sv97xv71959a+/PXuzZvh
sbv66Z1bX+pjdw9vHeJfn44fTeqqO5Ub0grhjrtmVU9b/MV3x0fHD58+vUe7
IXdx52Ezg/1/CBRUTuFiAMF3xXhc3Bmf1F1xtKjW9bRc4vksZ0BkBf68OG3W
cI1OeeOAXuhKTc/L5Vk1Ko6eHz8t/ueNyc0dek8g+3CIO37c5zRAOfcvaGGw
Fua26Sp+nm/4Aewu/PP7Gw8nrx4/HJ93i/nN/YPxwZdffnlweEibqd99WMzH
cPXvHhzgfrta5+kP+A6chO7zXX/Wtw9v3wqbe6Cbe2f/jj+Ig5vhr3ezv/Uj
HN7YD3/1n96+cTtzUutynfu0apvNelqN6yVc8RIJW391si5n8+pSfvjDRTeu
llM8xnGL1ygzWNe8q5ZwoktiYf3vT9bNRVutxydlC6OUK7i4Dn71YlUtnz6K
6IU/AjJYLqtpB/9dV8XBZJ9/Uq7Pqi7c/AZ+Wz/C+/dFu6qmrXwwnvLD8N91
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
LBa/IYm0tTi1aW0SPU/TY1hInJz1SnzeJlY6zhu55BHCLeWPXMfTPs99E4Te
elXarGTfxqqjpoNkj87HpapyPaeC1LginVZoQAkyuRCaf95LItF7si23H4lq
eWnJbwDZS3L5eZa4ozfjazbYSiyvG9n9/LxNfDL45rixfUZ9lu3kLBbV7DUl
mbiBx6aVgegu4qq5vTUugwb53nj2zdaPwqn1azKr9orAAlhJNaVGRdxBmILl
YOmx9dsw53aOK024L5CtqwN581MaO5FJqyhJo7j52BDxJD+Lt1Z7obdUNaBw
0ulik0OkfBYZzW5FFPP3bFZIiBqNPZRYvekHNpDwjo6CWcs31Tfw6hEtQR7G
banSSPdnPbtKo2ipUaUFMmT1nsDNzXlfLNH5OMamns8ydUMWgYL6knE42OBE
ZOWVR0oeSMfj/JzvfXQywhcZJdBMxQXh2Z0g4mdLTmYBr8yGkNhSo581GlTR
khwbZaH25jyOfyK7fs3VFkXlfbmma8+pB4LiM8A5htMeJnhAHlpB8uLIRtUZ
m2qarv/Th8evnijIwsj2fuJa3jNs/UHXJcAuMnbLSu5mhhykNodYicNeINxO
GFEQh7DV/CqRk1fh8lnEyyCWBuJ951rlZB6ikYLqUoPmI6EBDiXhg9RaDGsp
d16um+Z0/LuKffqk+j2WEvkdymBDNQe29FQyegtt6LRvvB2cIHHn9o3bHz/u
OSYY2AzsvwOThqtEtrympM8mkl4mav9DiqjjfpNKRXP4g3CoKMzPBzSNf54w
tLf47zf677cjWhZhfGXZwCh4m1RFXWAcdC2ILNFoxX3qLjWGuayb1WXSuB50
kxkI0ePXr54+/zrRKDC4LzlqsLeE4Ar3/+2fj8Z/+kvxRfHncvxX+u/++Ev8
7854B/93Qv/7hv73f++8pZFIUGsOyuHkhu+Ko0UyAtUoSKwF6qXwAfzq5g3z
btNZc1F+SH55cHjX/BSjdg+eP6GNTHaXsW5l7/CHumVjs2U3b/wGBgw7kG7I
/eLo25ffHMEiHz39+unroeUzHBb98n7xqw83D8a3jsgpf/tgfIcRafh5/PbG
/vjGl2B9vXj9mK2viEo0nY1SjKsl8SY9U7iQhHBcd9i4i68MdnloirONQnST
i9WD/UYohXqLgTevNhQELgP4ilCIgPMJo8EWIJUXokzccCo3DscNbH/nWiRU
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
fs0YQIau10CKMElr+4RIplh0gNxhkTkrQKtZmLtNfWWFIkcpEWoiTECN8pOQ
A/kXkOT5XRG8UhGMw/iPFUm7uTqYKj9XRdGMeNIaMh+jHykrH0hDZPxadgv9
EgigfLvU8/T30qp6dXxMVTcppCfhoL9V05wbDocgagNQfWt1ItxUz/1Pq3r4
plwtaFefFb2t529e9ov9y9my/KKqtSRCaTnSGzxf8/Mm3mGOq6nkH1tqzrYK
H5Nu/DoP+4Q13fsPfpSDhT6HQgEXxaTOkX0WH7zaQvYJ5KIUAf7LD/e3R3s7
28MvZ9Ph5vr6k40Nrzx/T1+rkxOTjqiYySBVvun1H96/HD7xbdjRztCdQr8T
IaicAg4+em2b8v8o+20oeSHZFFIITpOr1rygGS5Ufq25eD9rMH+RhO0fb/fe
ulKmY3OjZAX9x/72v27t0b+KP7KK8HgHF978e3ohURxUbZA7wzv+mNMykps/
vNndfvtihx5483Z779VLPLP+tLgnH8f9T9aHLx6/fAkNJf+/O1921tfXhy9f
vnyBJzbW6c+Ndf/DS6qM5Eel/SkznhPN4V+di9nj993C3OFM4fNNTpjPLySh
7DibLAPH2na58Gr+SeW1A/DMkYL5yq+HY8qHjAtu1GcreC2gFdbMXqyS32Uf
Ndb91698y1BDA9++aeY7/z45khn8jic6/SCDD/If1Ws/88P8eOvDCcyg8eHG
ta4PJ057KlfnB/fr11l1MUzd+aFFyc++RYanyW+h73rF/rvGb/30Ofz2x2Lj
u/ALzWF6D/3i71n7uOaX44vdP+2+9//devXuX7e44zgUGh2W37o6mqiwuDd0
SUjHCplc/MU3Sn/sL33ziPxEneENLq3jEqpp6/i3ztblCDiJSaKL/hAsE5ir
G2j2oZ/QRaWbG2Et8VKypV4bK8leunUPpJVpkpZc1YbpJ4jISduXSG9uJPrV
aJ38lm/WvmqDNxqmQbOdrRvc49Em9+jJ6KE2nnUO+z9eEGZ0WxCGXCfS679I
h9x1HZLZudIwS/o5NI3s6md7CZnff6OJon75yUrbHlZX1wKL0IhGB+yF63uQ
XeutRqf9EUlv6g4MO97jJzXYssyFW8eZlFiyPzuH5Sx5Q5xIPKPym/+AUL7X
GBJzcxDa9I8osIvwJw3o2pDE9doI/79LdNOENs9I/HQjwd2SHFBN8yItTYpK
vpheuuGXY0nXtkSLbrTMxrF3tloZoSWNNtoLNzvUcm3QdcGqGK0K+0h6tBfx
R99M+s8V6yJe/mXWRUSvNGWHufDzxyEIAn7bcMIzgYboCWhQGK0jMLn285tx
i10q9+SXTYhDRaiIbTDbkExtW11EsENKbpy0PSwQ0v30gWF8IDYMv/3CEuEj
altOKnO6wzylHjRvmMCnzUYZpaWrGBjqLf7DD+5/t7H5ZDUjq3JBrPB0U/zT
34EGmAa1m7r2/9bwGN9JhtWDjeHDLRhIjzaGj7dwlZ+nq/fXh/efmi75QZhO
q9lJ1dknc0dnp8I9f9teOapmUQmXgIab7n0ZXlxcDMHsuVpM1cZ/7bW5EoFR
3+OUI8LEqtjcbvoumN5p7dqPrBVn+AqE1UVpF7NTQ3Pj8Wjj/uhBYmyeLs+m
D9Y3hhtPnz7d2Nx88CPsTXYHmixYxNEQDnm9+3rH9CiGel3vfwkJiG/eaFLO
Sgpi3WOyEDg27qGJLGT/N7kuX64W5MelCKAQcqc29GSmlGgDITajIrdonXI0
+D9mww/7w6397d1dZ6xfUHBqCUMeV69GLf0LUcSDqBdOqpny25yXl8SuVQdX
kb8frXXsMY+1LyXaqInDOseRRQXunGiHs6cHHDqcxQs3y6PNpz+yM+d79XET
ByEx0/iHyG3736Fc3syFytVjYufHmGU+7BXR8hwM/yuqBGQWQPdsKxeil2F4
D0ryCjGXjElrSCSIoI56DIsm0sV+4CXMXxjZ4c6qe1zkLwwKqoJSX5fTS6dF
anw3l6ibAPaxdESYwGVMbqnsyMc1UDRGvknWSY9wa7CYuJiK+LzqyRf19hXG
2+d6G/3iw7+sr2+uF739d1vbO/1B0duU3x4WvXc7e9s7b94X+7t/etMfuN59
ufSo6G299hf3t968oEceyO/P/SOvPuyH+x/y71v3/e9vP7x5IRew8nqP6OLm
+tZ20dv5sPeWrwnXX1yKDkzDcBmmS4ldmz0er1M/DBR2JXY9dYr25UTznfN9
8W32zdveLHxjdjaLJ/4f206r9FE8t+Wi1AVTqvvvX+5sPryz+ejO5vM725t3
tu7f2dm888T/Y5tdx4dE2TKtjk7Y7+l37PMXwcN8PF0dH7v/D7u7OReOdQIA

-->

</rfc>
