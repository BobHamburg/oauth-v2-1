<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7595 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
<!ENTITY I-D.ietf-oauth-browser-based-apps SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="March" day="04"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in <xref target="csrf_countermeasures"/>.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<section anchor="authorization-flow-for-native-apps-using-the-browser" title="Authorization Flow for Native Apps Using the Browser">

<figure title="Native App Authorization via an External User-Agent" anchor="fig-native-app-authorization-flow"><artwork><![CDATA[
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
  |          User Device          |
  |                               |
  | +--------------------------+  | (5) Authorization  +---------------+
  | |                          |  |     Code           |               |
  | |        Client App        |---------------------->|     Token     |
  | |                          |<----------------------|    Endpoint   |
  | +--------------------------+  | (6) Access Token,  |               |
  |   |             ^             |     Refresh Token  +---------------+
  |   |             |             |
  |   |             |             |
  |   | (1)         | (4)         |
  |   | Authorizat- | Authoriza-  |
  |   | ion Request | tion Code   |
  |   |             |             |
  |   |             |             |
  |   v             |             |
  | +---------------------------+ | (2) Authorization  +---------------+
  | |                           | |     Request        |               |
  | |          Browser          |--------------------->| Authorization |
  | |                           |<---------------------|    Endpoint   |
  | +---------------------------+ | (3) Authorization  |               |
  |                               |     Code           +---------------+
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
]]></artwork></figure>

<t><xref target="fig-native-app-authorization-flow"/> illustrates the interaction between a native app and the
browser to authorize the user.</t>

<t><list style="numbers">
  <t>Client app opens a browser tab with the authorization request.</t>
  <t>Authorization endpoint receives the authorization request,
authenticates the user, and obtains authorization.
Authenticating the user may involve chaining to other
authentication systems.</t>
  <t>Authorization server issues an authorization code to the
redirect URI.</t>
  <t>Client receives the authorization code from the redirect URI.</t>
  <t>Client app presents the authorization code at the token
endpoint.</t>
  <t>Token endpoint validates the authorization code and issues the
tokens requested.</t>
</list></t>

</section>
<section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" title="Using Inter-App URI Communication for OAuth in Native Apps">

<t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>

<t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>

<t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app"/>).</t>

</section>
<section anchor="authorization-request-native-app" title="Initiating the Authorization Request from a Native App">

<t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant"/>
using a redirect URI capable of being received by the native app.</t>

<t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>

<t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>

<t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>

<t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>

</section>
<section anchor="authorization-response-native-app" title="Receiving the Authorization Response in a Native App">

<t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>

<t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>

<section anchor="private-use-uri-scheme" title="Private-Use URI Scheme Redirection">

<t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <spanx style="verb">com.example.app</spanx>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>

<t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>

<t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595"/> for
private-use URI schemes.</t>

<t>For example, an app that controls the domain name <spanx style="verb">app.example.com</spanx>
can use <spanx style="verb">com.example.app</spanx> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<spanx style="verb">client1234.usercontent.example.net</spanx>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <spanx style="verb">myapp</spanx>, however, would not meet this requirement, as
it is not based on a domain name.</t>

<t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>

<t>Following the requirements of Section 3.2 of <xref target="RFC3986"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<spanx style="verb">/</spanx>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>

<figure><artwork><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork></figure>

<t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>

</section>
<section anchor="claimed-https-scheme-uri-redirection" title="Claimed &quot;https&quot; Scheme URI Redirection">

<t>Some operating systems allow apps to claim <spanx style="verb">https</spanx> scheme <xref target="RFC7230"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>

<t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>

<figure><artwork><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork></figure>

<t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
Section ??? that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>

<t>App-claimed <spanx style="verb">https</spanx> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>

</section>
<section anchor="loopback-interface-redirection" title="Loopback Interface Redirection">

<t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>

<t>Loopback redirect URIs use the <spanx style="verb">http</spanx> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>

<t>That is, <spanx style="verb">http://127.0.0.1:{port}/{path}</spanx> for IPv4, and
<spanx style="verb">http://[::1]:{port}/{path}</spanx> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>

<figure><artwork><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork></figure>

<t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>

<figure><artwork><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork></figure>

<t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>

<t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

<section anchor="client-authentication-of-native-apps" title="Client Authentication of Native Apps">

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <spanx style="verb">client_id</spanx> request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation"/>).</t>

</section>
</section>
<section anchor="native-app-registration" title="Registration of Native App Clients">

<t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>

<t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>

<t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<spanx style="verb">.</spanx>)
SHOULD be rejected.</t>

<t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <spanx style="verb">com.example.app</spanx>,
the owner of <spanx style="verb">example.com</spanx> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>

<t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

<section anchor="native-app-client-impersonation" title="Impersonation of Native Apps">

<t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id &#8211;
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>

<t>Measures such as claimed <spanx style="verb">https</spanx> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>

</section>
</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

<section anchor="loopback-redirect-considerations-in-native-apps" title="Loopback Redirect Considerations in Native Apps">

<t>Loopback interface redirect URIs use the <spanx style="verb">http</spanx> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>

<t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>

<t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>

<t>While redirect URIs using localhost (i.e.,
<spanx style="verb">http://localhost:{port}/{path}</spanx>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection"/>, the use of <spanx style="verb">localhost</spanx> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <spanx style="verb">localhost</spanx> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>

</section>
</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="fake-external-user-agents-in-native-apps" title="Fake External User-Agents in Native Apps">

<t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>

<t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>

<t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>

<t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>

</section>
<section anchor="malicious-external-user-agents-in-native-apps" title="Malicious External User-Agents in Native Apps">

<t>If a malicious app is able to configure itself as the default handler
for <spanx style="verb">https</spanx> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>

<t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <spanx style="verb">http</spanx> and <spanx style="verb">https</spanx> scheme URIs.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="authorization-server-mix-up-mitigation-in-native-apps" title="Authorization Server Mix-Up Mitigation in Native Apps">

<t>(TODO: merge this with the regular mix-up section when it is brought in)</t>

<t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>

<t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>

<t>The requirement of <xref target="native-app-registration"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>

</section>
<section anchor="embedded-user-agents-in-native-apps" title="Embedded User Agents in Native Apps">

<t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>

<t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>

<t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>

<t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>

<t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>

</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC6749;
&RFC6750;
&RFC8446;
&RFC5280;
&RFC7595;
&RFC8252;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&RFC7230;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
&I-D.ietf-oauth-browser-based-apps;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, <xref target="authorization-code-error-response"/>,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>TBD</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIABu6YV4AA+x9+Xvb1pXo7/evwKd8TcSUpLV4izOeGXlLlMZLLbl5bb+O
C5GQhJoEOAAoWXE8f/s7691wQclJpp15r5qpI5HAXc499+zLZDIxXdktigfZ
8XmRvTxYd+fZ3nQ3w1/qpvwx78q6yp41+bK4rJt3Zl7PKvj9QTZv8tNussqb
YvaunNQ5PD+52JvsTnZ2zDzv4Im9nb2dyc7+ZOe2MeWqeZB1zbrt9nZ2vtrZ
M/Be/oDnM+8uH2SHVVc0VdFNnuC4ZpZ3D7K2mxszq+dldfYgW7eTvJ2VpVmV
D0yWdfXsQXZVtPBrWzddU5y29u+rpfvT5LQRfGUC/8uysoJvnkyzb/Nm3tEn
vJ8n5eyd92GxzMsF7BI+nZ7jp/9+hp9MZ/UyHOpgmr1iIHiDHeQNQM3/XMbL
8Yt/F6jJYFm2bsoH2XnXrdoHt27RI+ET3nTH0+z7ej4vmrYrgvUf1/hR1ftW
Ju74639fuK+nAG5jqrpZwiFfFAii188e7+3ufqW/3t296369p7/e370vv+7f
3dNn97+6r8/evrunz97+6rY+cGdv7679df+2/Hp3d++O/nrPPnv33p0d+fX+
7dvutfv66b07X+lr9/fu7OGvb44Ojh4fHj6gTQtKbz2u58U8ewwHmM8Av7Kj
ossmk+ze5KTssoNl0ZSzvMqOuryawxln+Hh2WjeAjacMFjhFwszZeV6dFePs
4MXRYfZ/9qe3t2geh1zuILbsuC9ogHxhJ2hhsBbWtu4Kfp8vyi7ADv78Yf/x
9PXTx5Pzbrm4vbM72f3qq6929/YIVPrd++ViAjfo/u4uQtOUuk57fPcAzgrF
+/Yk79x3sN27e8dBcVeheG/nnoX47m336/3ks3aEvX06ksPJk2lZdKdCB5q8
SX1atPW6mRWTsoJrlSNGJp5qixlch+5q0tWrcmafOGny+aK4kof+dtlNimqG
pztpOwRif6CufldUcNAV0Y/+9ydNfdkWzeQkb2GUfLWiuS6LE/y2CvHoh+KE
KGJRdbhyOFW441V28OqQ0CWfzYq2hWmyV+uTRTnLfldcZY+bYo7P54s2+764
KBbZbgppJpYiPcoXp3n1Y/g5kJfHPxbtu7INP/8OKFg9Pyv6H39XV/Gnz5Of
wtC/Wy/zpvfp92Vehx++xg+rOdCSqgq/eQrfrKv5SdGceRj9PIcbAwxg9yuh
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
24cSH3wAnLA8qwq2gQBceBcke25/+CDm648fR4xRZs03lalcTYIYEN2Vak58
B+hW0xAwAcIe3qArA6s4KqsZywWeXqtIPCBmOseJrAllS1iTAWLua2FjEHyy
8xwuEIrW6xXrRnAAblzc5Quy9GYHq1Ur46H1G8YbC/W2ysojoJTZ43VD5OsV
ye6IZB8+bLa20lBIEsJ5H4mp9BGaSu3019pTEfiByjMIHdDAQT4CYBzTBX+D
urCF2J0dhBhCB7CjDkFEZ36TbU1Zb3CWeFCeZ+8irAIuAroDaY+MvKXnB0Ct
xLLUtkBP2HpJVA8B1hRLQCqQCUEmXTf0eo5HCsdFCz6t1xWRzRMcldZXIBZc
v3RAPfMauGiLGslkoox6XpyWFU4IVIO4LMq5WyH52npgHgCTP0AC1yFazPIV
qpa4CSJqkZCToKVT0nN/OE9rfCUqqSsQuFA0BRSGv5sCmKZIs3hkbH5SAjv1
18hEQxZ57JQSpN7KL5NCprcNXP2qUxsFn0S7qsnoL7pK9L4TJJgr+9QGpckt
JuoOdr4wtsxJMNw0aq26qqAKLSwhjRDqor4TUFLhf6BvLzNdCUiYYrBCmbYE
rnXFxAtF0dl6kTf0YYHYKIisHq8SIDmD21pMz6ZjGuLyvBBSVwQ7K94D4iHe
w++5k4mQzL4DVCQ9nogkG5IKpOUtUuetFCfoHyqyhB64Vb0Qdp+fopOuXdMj
p2vQpKx5ytNhB6Q7FoloigCgbHXxTBiZb8JIyiqCRj6WglgI713VYuIgpsAH
HPMmOcHUwGaZXyEBoBGQi+t8bUpOIT1I5elCrvDUHGSItouBpeMMxH0jQPM9
IaZilugSAHyJJ0TsN9aW+GxRXzLJ0R9j/sv+sEnwt/rVb7PNP7+dhD+/5fd/
0u9/mky2d0eTiD+85juVTf4VH7Q6Hj4fv3/N/Pz9S0KW5Pv/MtneG03iBXxD
kh+sNx7/U+e/dv+/9ngAz/3h/QA8wy/s/I/5Jt4MnmzFSK4f4Hl7REtTJeJY
FBT6+d8IzzvD+yH89BH05+HnZnjexfnJ1s+sx043DM9fcD+9q/7hQfbZaXk2
UWF5cgqkgQ3lD7cOxLidBYRj6yOTXTV9e1ZverlcLNZkamaz64cPvfE/frSW
WaKOZoiCOwGINfhqtljPRX47rdXsDBoNOvjNbqhgOqNCZIsnE0VaOfVcJvq8
DEPaItD3ZT4HPUe1q8iExkPRINtA+Ntz+HtE7HVFshNINldkpJLXL8q8z6no
dcc9yKyFMgP6eRtgEmYv3uesKC+Ktq+ekxzo9LaM/WhOH0PjOiy9qAZ47xcR
7FjKKN6vyIw0FyGrrphbXtaiTXdXq6IVIZZQABkp7yoQyWu1UaOW/r4DVmYX
TWMMHol7BGZZgfzZinE8W4IAVOPCrI7LW2ZIkVmJTzMcUL0bvHIx1IZDpDgy
nMX+EM5Fxpthc/3g6LSq6HwScIBF3N4gl4R2gUAig+HVocbHMzCDmM9O+emx
WgCiLcI67gwAIy3s929igPnVPFr6yVUPGuH0d2X6WNaym+y9FO3Mza9CG21A
xMyVVX8Ey1B99uDpebiSF9EMUJ5sG5CY/SjwLhGzDAQmWhoILiO8uTA2GjnI
xpY85B6d8K59SJANE+RgmAmGWylpJpqd+Jo2wTprQvIwk/4PPJiEBOuWN6FD
JkmHsm1nTUUtK6FIjgIakDwhH3nE7RTSJ1XDgbIZn7KhITZYDoKHTCsyj2/x
wofb7LJYLOSQhNKxk8QsC3QrlO2SsIlmJIo4tx5GmhOB/tlnn0WSHcY0Ci/u
rYesXLRZBoOltEnlpY8/AR/2KEaPazpTuHo3e3qa45cDVyDwkWrQQOKmsJcn
eQO2kZcCMqAxsJnkZ7TegAv5hkN7O2B/60YXyMJI7D1HW1Koy1qbbB/scFCP
ilP0MvKQA0rthkFNf9DxBnU2pu7x8p363LdGPCpmuZCVWISpq8VVNPjArtWc
kLy2/k1AF0OF/lx2CHumbYbAdBCVxSmNROO0uESDCLDnnJw3YhM9KSo46K4d
m3YNxypKt+eJ9LfizTn2LyeFL2DczRI4nGcADhh5LPp5p1evO7Lb45mXQCzO
m3p9dp6Wq3wsRTZfdwymxZUB+aq2Y9RsmGnHIvym8UnJg2h4XngqwzRBl7bV
5oOEZ9mSD0xueeCWJjeJOSmYnuZDUibanpJWFzKmgPinnl4BW8qzs67mYrwS
l1/oXBybukmb/ZADFBdlvW4RaZsG47nnA/gq8ROA/Y/7QMmb6/ZpXCCA3bHA
DZkaX/heaAswLP85Q8bu/jGOUCQmO6ujo9aCm3AbZmSPJ6tevNhNAEmKEMTW
Pe3XRIw8tDgBnHy4EcwSHk7PlY/mVhPcJBICxJ8ZCAC9zfiOSWXmIuvJ+yWu
YU3HUq9ygF54PfFh9nPaibLQb8oKpoYptGp+buHi0bk7WSLmXPhegb6E2aBX
0gqzPSzk68nwQPMe+XUL4sUE3NOSHYNz1l1gs0BAE0jtOzNqthS2xeIUYxBJ
3ulfzNj9YWA5MB3Z3jEUHFlqOS2maCfm9Qmo0ZFSMnKiB61eSgwC7dGg3468
JOibO3BSTBQZ5SGPsmLEKbbCmmussONMbK02uqbUCCYRyT2BD/lbblWE45ic
O9ZSWYOGDXoYS/QZedw1YqDHn0H+adYoPLAlPvDj2iCMkXXEkoHX8OxE8dqu
rgf92SKY+kuTEEKTtrpjKKuNuykJWfLU+TM1U9QSsRgeWwYskVxfPZ7DawMu
VhVAjhDIvA9CAdgosGwiOXSLopA4Up1Qng0pClpXyKPmIjMYPwE/GL7oeZPI
HB4DJc51BxxelQIG/8ylDsDlhvPFkNoSNQJLLQNRRa6oFSUEqcj9F4VJeAEU
ajIwupjrSaBiLSkAmLsk2H6J3kR2ertgxYTvAX2FxSkMd56g0BP35TU0OozC
FNcYGjjpbeO9HZBd5V6Cp4MGC3gxxqoc8OQyvHaOd4of2/8WpI0ZkBUMiyK9
PKOIjlVJCMAygI7sEZggnIUdcHNGvAW+VAEbrC/xoImwbEe3Bo6G0C9Ho10D
apDROBraFYidGPwB2hGLhhIkpFDoU36WgJEIHuo1RfepOyDSz1a6+I5juUrA
gMKLPUhzahjzdPgQ1Dqj0xmxdLALV0yocz4BS0Iia5VQfrRFZNu3R85qIGNK
AhYbDNBReNDfXJq3DxAiwhfTR7NkANEGnm9Cnm95K/PV9gaM1QyySRjwTbUo
30Xut3G4dbo6ZNCmO64BLKRPMQtIHFqrV0cVJOQzXhCc78TzjPc3dgFsdgfE
nrqJ+ELS7jLfKxJ4JW7sEAle2zCM+O3sT9LbxD+fsJrPs4CK3ng1v9KmNr3n
Hc1vrxlGfIApoPhH89MvWM0nDMMewbT/6if3Bw8Teydv5pj8ybnQ3Gp8p1rC
n/c/BTZ3ATaHwst4LU+BGTXZ5FdazSfgzaZh4tc2DAMgvhdczfBOed/8nQjF
/Z9NKJJE9PPspfLmJLW4kU+1zyzVsSpjCut9SrLNPFi1OlmHPaopVvyzPaS/
vrcqbT7xvJf/UGeVjSiLpLK+R2+ZvyNpajgsLJVHofu51md1+7/PZ4XeuCP2
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
b6hNfBs2LiaXQa5aIqMEbLJoD+WVkUuWs9za9CqQHvVlT7FlOysjswB0jVso
jEiApnKiCSGQuCS1dkiHOKX3JpKP5nOMhUPfWjXlBcrp6BdZ5WUzug6TUaBI
QwQQEugOsV/00hEp8rwiNpulvVouMWJ5lm3zIiY4OUmHI5scgSbI9DTKIZfo
ome3/L2dOx8/0pWR7byFEd/+7bJDNwNXbydfABntvPm9yQb2pOkA44G453lN
FBgTSVyBXmtIz+xUBhbUjpVEMRvU2TnlpT4hE6v17FVrKrqPNId8EqrkJ0kW
Yu5NLxGrvYGAFviDBy1clmmgNcwgtwqEvGgyrS6wWjcrKUUqhPNKa20HebMy
ip0EUWXJ5Y6BwCF3SpMEEMZImXdRV34q6SutQ2lJm96Aj0oEKaYAEbewWbMW
gLaMJQJYU40psOARiPkzE6Pm7LxYFgN52/cAReNMXltDegOpSjJd6TDjqrea
LU9SuvV+cnl5OUECNlk3C3l4i98iHrk4g9m68yVav83BCouQlO+zR2PratAJ
mP1owI8kJmuK2NcedXclP1PL45piblqcxhvRvryJLxNqqIHjRgeRoJKW/SLr
vCxcmlBuojMPa7Fm23RtSLzPqC/KSVPk75h2zMsWhNwrxfWW0iXQjIvhYQE1
fcDrzWY//ulx/s3ro3z/2c7zH+v918vVcvbkUf776vD90f7rp2+W363/tPjT
u5M3i30gyAvsmEKqlrplB8mAAijIt07xkVITyejeTE7q+ZV3Xtb8YqzrkCwv
TkThMnqZesw3YGvCLDFfN7Z5QywRoxRMyo/zYYAoaL0hniT/0dVEfMsi8OZV
8TPhZwizell26n7IPF9pGcg3/Dapj0BzQMS8EgGWYlL87PZPhjaW6HBwximQ
BPrMEy+McGCQ2b1sdEXoNaVVYtaNTfHn7MKYaPX4Kd8Vm1Bv76IYbOjN5Dut
FLDNvKXPiFgDfzgpMilG0HVWZw73H2sisYKtAcpvXh/2CiP70cuqGvfSwNDv
pZHqk7yaSMsC+vbjxxEfANFfWo+3jU+57ca/7a9ewn5u8fza8YS++BY06QdK
2WUftsuedPSYoFvrQXYtJeepKF78LUrdD2Wbb2nez4O/Hnbf/Hix/93Ld892
/s83d37/fu948bsfDg9ohM/tbX7Y3n10Pn/97j+7/c+DC/Xw3rO/na52/vSo
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
tKV55Yr8oCFbz7hnCMq26LGUBQjRxqC/coO5wtaxc8PEXBmJv6fSK4k7jSXl
Xs1l5Asi5Ehepf+OF/jfem2CyX4s/mtxbxvr3x5T7bSJl/JFZhS1bctfJM2H
XuZreqPw8lS9dda9yL1uZIKxOK7ZmR650KXJF5bpECMPYF9LxsteAxquxGnZ
nHqLCEBT7t6Rn1SnXLaboMY/D/kvRsTsy+3s6FXwyci9IZ88zHbhsd+839vN
buF/9id3HtFvd55M7j2FF6gY/WbbLxfvxP7UtqQnC37uVI3bRKABjq+vicMV
p3F807ccfdFSWQNs7USBAfbkNJ/IxzxeCUYauPZQKtHWlQ/oaI19b04g5FYu
tHnjbfEMYCa8LcAI10iD6Cill800zuxFKbxNXpSockSI1NfZJIuykxLqWmLF
hMQEy9YXWscW70+OepfNiEYLoo+nBoVIyfPyaqYz7l6b8G2sgYqi52mjYQHz
Kl7DNugqsjryAr20xfHCqNYPn9myeWHj4o+pmooSxO01++6FKfctCunw6qjb
XxIIAa0rtXE9pz4jiegbP8Z9wwYTbbdkR3uNlorvl2PzYoYfJGTvgZbEXMQD
S2obv/udi2u6viexN3E/BBm7Eku7IGCv/ZAZ7iM9EKCcZrUkfnhxZGWvnRnX
jfIAppkBkaDrpbqUbehJkXQtjHcLMEQrC7sKY8bG5vhp45vCbLadNYkLJtnq
OXRGrnYZu1lIw6hAOwkkSWpx7C145DqKJ3lhulcUd3xyPXmoj8pLsuX7TVWC
1ij4Dn32H0a+wn+390b8yE/8iHu1X0dkoGuKm25CX1L7KWrRFKp4+F26k8wb
BHJ2k14yqc5D2QEdj86O7aZoxCiC3M2e7Dh0s9kTiw/3jg2dEh2+cfZ/SfWt
+Ulhf337rz7kZUU3b8HzH/yfC0PN6amnyA1/ftIlf/Kc3ps0/cWnv+l2fsMm
afZNt8yf/hWP5/bw8fDPF96bcgO8rfaRuj+1P+eNt9p7818mtgPWplZIsugE
hLYvbw30PxpRukvxgNjgghiRbU5kGw0hgoyROkiLjn1u0QEkj5SICsMNgXuh
yNmKf+yKsi8yv2W2n2OTaK6UYCx+h6XEOT2Dr69vqzQw7vW9lehWeNZfKeis
z+OEZFsa7gr/BfdUSXhHB6JRovl4eTyGV93WJRGOY4VkTB6PBXV4gD+Izaqp
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
7FI6V7Q5nLj0jNerMM5E0My1VhlzTPFPQXbNZJdcAhS+IbWD5FePhQZids08
8LG6BlDzVL1rvtD6gDH/TP14TiucR9D+gilAo8PYX+aUjTpDnvHIwiLgRtRM
Cyl1X/Eg6sU99OcQl7xNDDKRFA102rQhmoXGjAU2ThaTM5qgTxGRLB0mxlGW
dwq/t2UwHK0nmZgzw2emIGwO0/S47EOIeThm4X+89eTr12aaJW2772+GYlRy
ljh0a8bApl75L9+E53ny+qnb/muVbq+BYU/zW9I3Fyf20m3ltcvLq3OvyC68
dtZhLa2PKAOtQTcgYMh6aG5GfQ7nRIZnqfX8L47EQDr0bzz8cLk88g+89pty
/zmFWrlQamzetBWyqdK2FL7U5uMez6GCKnycKW1jpbLYlO9P2UtZuLV1ZGl7
0x2wKaGTzd1sdX7MOdNC01ujQbQiGQY3gV/odLSuzpIp7AE2prI1XsoRM+Pd
REuF45n+SeXYjFxjOmhkLtqkFqa9VudXhQo0eBabe8T6u+6ZdhYtJ1uPqxuI
tscFomqM4mpuB2W138deCp6/Y63NFd0jZvSajJXaNZoYRl642VTL/53V8hCF
ZaNYnIf24c5AF2s2vYw/KTRlueRrY3GXvIE/inldbT6dO/IgV5LCleWSRCo1
RIaKWUumB2Vr92RSLMO6kbPG8Q3MwJT2ZtcVdoJPTu8MMYJEbNIVEDIwvX0R
kLCE4+MkX4snHaf5F5RVFFhn/ShAXwBl9GK+FCMPXNgUYPVLLBF8M3ShPVkI
gJ5RkV0QJ8vRJqkjjQ7qRJfVyEGd/k0rNzEHnUt8v0shDUnKU6E+Y1mCXk+2
pSaTyiF2UXAFr6SpqSjfxGGiYsboajSFK1cKvgwqjvH0jMLvNibuF0ENmICC
vP+DX1VnxEDzTEglpXz6UYC7wXOrm4xE3wCsAuSMyeFQOwneSGGmtviPS1hF
XjebTEnjSw6Kvx9wkgqS3f7BTBTjXN4+WgoWNpMlzrUfTGjrlEMHklUz3vNM
8tnoGtciLoAS1MatPJNMG8wqMwxbte9DCV5m6VB1S95YOq5mo/ZXfS1NYry6
0pque7+ACTr3AMMzFixF6WVthUkMniQtcCKBknAjsCAJfnjOnkvrgi6BpMNb
EjcLzyzrQ/MZEroV180oJr1DLjhETSTvEn1gfAG/wHgJnHoJeHdRmV+rcAD7
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
8LCjhNB6AgA=

-->

</rfc>

