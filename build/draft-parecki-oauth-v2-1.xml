<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7595 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
<!ENTITY I-D.ietf-oauth-browser-based-apps SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-v2-1-00" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="March" day="04"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on whether they can be issued
credentials that they can use to authenticate at the authorization server:</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;browser-based application&quot;:'>
  A browser-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, PKCE code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<t>To begin the authorization request, the client builds the authorization
request URI by adding parameters to the authorization server's
authorization endpoint URI.</t>

<t>Without a client secret, public clients would be susceptible to an authorization code
interception attack, where an attacker is able to intercept the authorization
response through various means and use the authorization code to obtain an access token.
To protect against this attack, as well as to protect against CSRF attacks,
the client first generates a unique secret per authorization request, which it can
later use along with the authorization code to prove that the application using the
authorization code is the same application that requested it. This practice is known
as "Proof-Key for Code Exchange", or PKCE, after the OAuth 2.0 extension (<xref target="RFC7636"/>)
where it was originally developed.</t>

<section anchor="client-creates-a-pkce-code-verifier" title="Client Creates a PKCE Code Verifier">

<t>The client first creates a PKCE code verifier, <spanx style="verb">code_verifier</spanx>, for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for <spanx style="verb">code_verifier</spanx> is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL-safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-pkce-code-challenge" title="Client Creates the PKCE Code Challenge">

<t>The client then creates a PKCE code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using <spanx style="verb">S256</spanx>, it MUST use <spanx style="verb">S256</spanx>, as
<spanx style="verb">S256</spanx> is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use <spanx style="verb">plain</spanx> only if they cannot support <spanx style="verb">S256</spanx> for some
technical reason and know via out-of-band configuration that the
server supports <spanx style="verb">plain</spanx>.</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to <spanx style="verb">code</spanx>.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to <spanx style="verb">plain</spanx> if not present in the request.  Code
    nverifier transformation method is <spanx style="verb">S256</spanx> or <spanx style="verb">plain</spanx>.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  OPTIONAL.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="authorization-code-access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="client-credentials-access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2 of <xref target="I-D.ietf-oauth-security-topics"/>.
The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Section 4.11 of <xref target="I-D.ietf-oauth-security-topics"/>
for further security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (<xref target="bearer-token-error-response"/>), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in <xref target="client-types"/>: web application,
browser-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

<section anchor="client-authentication-of-native-apps" title="Client Authentication of Native Apps">

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <spanx style="verb">client_id</spanx> request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation"/>).</t>

</section>
</section>
<section anchor="native-app-registration" title="Registration of Native App Clients">

<t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>

<t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>

<t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<spanx style="verb">.</spanx>)
SHOULD be rejected.</t>

<t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <spanx style="verb">com.example.app</spanx>,
the owner of <spanx style="verb">example.com</spanx> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>

<t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

<section anchor="native-app-client-impersonation" title="Impersonation of Native Apps">

<t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id &#8211;
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>

<t>Measures such as claimed <spanx style="verb">https</spanx> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>

</section>
</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in <xref target="tls-version"/> with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in <xref target="tls-version"/> with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

<section anchor="loopback-redirect-considerations-in-native-apps" title="Loopback Redirect Considerations in Native Apps">

<t>Loopback interface redirect URIs use the <spanx style="verb">http</spanx> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>

<t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>

<t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>

<t>While redirect URIs using localhost (i.e.,
<spanx style="verb">http://localhost:{port}/{path}</spanx>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection"/>, the use of <spanx style="verb">localhost</spanx> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <spanx style="verb">localhost</spanx> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>

</section>
</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="fake-external-user-agents-in-native-apps" title="Fake External User-Agents in Native Apps">

<t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>

<t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>

<t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>

<t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>

</section>
<section anchor="malicious-external-user-agents-in-native-apps" title="Malicious External User-Agents in Native Apps">

<t>If a malicious app is able to configure itself as the default handler
for <spanx style="verb">https</spanx> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>

<t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <spanx style="verb">http</spanx> and <spanx style="verb">https</spanx> scheme URIs.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="authorization-server-mix-up-mitigation-in-native-apps" title="Authorization Server Mix-Up Mitigation in Native Apps">

<t>(TODO: merge this with the regular mix-up section when it is brought in)</t>

<t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>

<t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>

<t>The requirement of <xref target="native-app-registration"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>

</section>
<section anchor="native-apps-embedded-user-agents" title="Embedded User Agents in Native Apps">

<t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>

<t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>

<t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>

<t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>

<t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>

</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See <xref target="native-apps-embedded-user-agents"/>
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" title="Using Inter-App URI Communication for OAuth in Native Apps">

<t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>

<t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>

<t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app"/>).</t>

</section>
<section anchor="authorization-request-native-app" title="Initiating the Authorization Request from a Native App">

<t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant"/>
using a redirect URI capable of being received by the native app.</t>

<t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>

<t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>

<t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>

<t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>

</section>
<section anchor="authorization-response-native-app" title="Receiving the Authorization Response in a Native App">

<t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>

<t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>

<section anchor="private-use-uri-scheme" title="Private-Use URI Scheme Redirection">

<t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <spanx style="verb">com.example.app</spanx>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>

<t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>

<t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595"/> for
private-use URI schemes.</t>

<t>For example, an app that controls the domain name <spanx style="verb">app.example.com</spanx>
can use <spanx style="verb">com.example.app</spanx> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<spanx style="verb">client1234.usercontent.example.net</spanx>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <spanx style="verb">myapp</spanx>, however, would not meet this requirement, as
it is not based on a domain name.</t>

<t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>

<t>Following the requirements of Section 3.2 of <xref target="RFC3986"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<spanx style="verb">/</spanx>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>

<figure><artwork><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork></figure>

<t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>

</section>
<section anchor="claimed-https-scheme-uri-redirection" title="Claimed &quot;https&quot; Scheme URI Redirection">

<t>Some operating systems allow apps to claim <spanx style="verb">https</spanx> scheme <xref target="RFC7230"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>

<t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>

<figure><artwork><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork></figure>

<t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
<xref target="native-app-registration"/> that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>

<t>App-claimed <spanx style="verb">https</spanx> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>

</section>
<section anchor="loopback-interface-redirection" title="Loopback Interface Redirection">

<t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>

<t>Loopback redirect URIs use the <spanx style="verb">http</spanx> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>

<t>That is, <spanx style="verb">http://127.0.0.1:{port}/{path}</spanx> for IPv4, and
<spanx style="verb">http://[::1]:{port}/{path}</spanx> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>

<figure><artwork><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork></figure>

<t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>

<figure><artwork><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork></figure>

<t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>

<t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>

</section>
</section>
</section>
<section anchor="browser-based-apps" title="Browser-Based Apps">

<t>Browser-based apps are are clients that run in a web browser, typically
written in JavaScript, also known as "single-page apps". These types of apps
have particular security considerations similar to native apps.</t>

<t>TODO: Bring in the normative text of the browser-based apps BCP when it is finalized.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (<xref target="bearer-token-error-response"/>).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC6749;
&RFC6750;
&RFC8446;
&RFC5280;
&RFC7595;
&RFC8252;
&I-D.ietf-oauth-security-topics;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&RFC7230;
&RFC7636;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
&I-D.ietf-oauth-browser-based-apps;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in <xref target="response-type"/> and <xref target="new-response-types"/>:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in <xref target="authorization-request"/>, <xref target="authorization-response"/>, and <xref target="authorization-code-error-response"/>:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in <xref target="authorization-request"/>, and <xref target="access-token-request"/>:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, <xref target="access-token-error-response"/>,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
<xref target="access-token-error-response"/>, and <xref target="bearer-token-error-response"/>:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, <xref target="access-token-error-response"/>,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections <xref target="access-token-request"/>, <xref target="access-token-response"/>, <xref target="client-credentials-access-token-request"/>,
<xref target="extension-grants"/>, and <xref target="refreshing-an-access-token"/>:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in <xref target="access-token-request"/>:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in <xref target="access-token-response"/> and <xref target="access-token-successful-response"/>:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in <xref target="access-token-successful-response"/>, and <xref target="defining-access-token-types"/>:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in <xref target="access-token-successful-response"/>:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in <xref target="access-token-successful-response"/> and <xref target="refreshing-an-access-token"/>:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in <xref target="defining-new-endpoint-parameters"/>:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>TBD</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAGHSYV4AA+x9e3cbx5Xn//Up+tAnMZkAEEm9bHm0O9TLVmI9IkrxJjlZ
uQk0ybaAbgwaEMU42s++91l1q7oapGxPsjMbnRlHAtDV9bh13/d3x+OxW9fr
eXWveH1eFS+ONuvz4nByUOBf2lX9t3Jdt03xZFUuqot29c7N2mkDf79XzFbl
6Xq8LFfV9F09bkv4/fj94fhgvL/vZuUafnG4f7g/3r853r/lXL1c3SvWq023
Ptzf/3L/0MFz5T1+n3t3ca942qyrVVOtx49wXDct1/eKbj1zbtrO6ubsXrHp
xmU3rWu3rO+5oli303vFZdXBX7t2tV5Vp53/9+Ui/NOVtBB8ZFzUDXx6NCle
8qzhs6Lg1RyVK1im/bxalPX8XlHiF/8uy5xM2wV9uVnV94rz9XrZ3btxg34S
/0Je9WhSfFOuZmvzokf19J35UN4yg08n5/jpv5/hJ/EwryfFt+1sVq26dRUN
9rrFj5retzLqmr/+93n4egJb7FzTrhZwsO8r3JZXTx4eHhx8qX+9c3An/PWu
/vWLgy/krzfvHOpvb375hf721p1D/e2tL2/pD24fHt7xf715S/565+Dwtv71
rv/tnbu39+WvX9y6FR77Qj+9e/tLfeyLw9uH+Nen40eTulqfCvl11RQOZn05
XrfLetrhL94cHx0/fPr0Hm2LEPrOw3ZWzYqHsN/lFKiuOK7WxXhc3B2f1Ovi
aFGt6mnZFMfrspnBkRT48+K0XQGNnvLGAakQvU7Py+asGhVHz4+fFv/r5uTW
Dr0nkFw4qh0/7nMaoJz7F3QwWAdz26wrfp6vzwHsLvzzu5sPJ68ePxyfrxfz
W/sH44Mvv/zy4PCQNlO/+7CYj+FefXFwgPvtap2nP+C7cBK6z1/4s779Rdj9
wzu3wz4f6D7f3b/rz+TgVvjrF9nf+hEOb/pDu3PzTuakVuUq92nVtZvVtBrX
DVyIEslXf3WyKmfz6lJ++MPFelw1UzzGcbfG3eoPtm7fVQ2caEPso//9yaq9
6KrV+KTsYJRyuaR3XVQn+G0TE8x31QkxxKpZ47zg+IBjNMXRy6dEF+V0WnUd
vKZ4uTmZ19Pi99Vl8XBVzfD35bwrvq3eV/PiIEcdgVM8KOenZfO3+HNgVg//
VnXv6i7+/HfAWdrZWdX/+Hdtk376LPspDP37zaJc9T79ti7b+MNX+GEzA7bS
NPE3j+GbTTM7qVZnhnSflXA1gP8ffCncch645cXFxeTi5qRdnd14/eoG/uYG
krBuPAgQ/Gz/5v6tG3we09Xlct32D+QhfX62Kpfnl3gU9u78rmw25eoSp3B3
eNNhX74r113bXGOWd2mW8F5+LbwP53l3H24czvPFsmqePoonyZ8B+2iaarrG
6b14dvQy+U0zr5uqeLaZr+tFNavLRPC+XLUg6do50dvTZgYCFJblWRNSnz4A
LO2ICBH4vhenduRXcr26LXSIdLU5Pe0R5/H0fF5Oz9c9YnlezkpYQm+U43qx
aJuE5F5OildtVzWeXOw3z8oZfBV/DJLvaFrFnz2EQUBcVvN124yPTmZ1/PUD
uEntZbUy1HC0XNVzpIXD/EG35Xo62XQ3PEO+8ai9aOZtORv7j+DJ50+PX3+x
vz++czM+Q/y8OF5WU7jrwgH48PjH44NR8fT5kxevnh29fvrieXH8+OGbV09f
/8nS66NqWi1gV3CSB8On8x2sbbNa9U7nUTtTKrY383l1sU4/hqv8slrNm2rV
2+mX7fxd/OHxpPh6s1yX/ZHLk5NNF+8mbOa0W00nTd2tJ2ft+xvLsBVduCOT
Z0CiJXCubZel0B8VB5P9LeT6HAitfFcvNquyR4EPWGRchxUCzYCIfwYMu161
XY/cnoGCWS/aVdXbh9+Vl5brbOAq98kMNqaF1dUzVL5udEAonXwwnvJyxwtZ
7vjg7f4EJT2M8M3r1y/HR29efxNv1DeXy2q1rj6si9ersulOgWiUSRS7+MyN
g8nB3r1EXlliezFdt0Jrh8NbC4TypK7mKD17WwucZHr+DrejvSi75VsQdfUq
Oc/vjo5fgo5Vlevi+LwCTnQM+g8c6Lh407wHloFzmcFI8CTsQFfAPSuetKsL
vGw7/Xs6xZE6HKijcSb0ZmLQ5qsbZuy3fuy3MPZbHfstzektzUm3+uHxy/Fh
qiMCB21w1qxT4u2op5ciyg8zM4xFBgx56Jwbg15ZngDTBk3TudjEKiNOf6om
VlE15ckcdqos1uf1aoY21vrSgYbiGQsw+PZkXdZNMa8XNe5j6Tk/aJhIBQVs
0/t6CsppVQMhrApgBCfVOegYRXsKQ6uuBScIvKA4uSxakNkVznSNmgwMA29c
tbCdcOwgTGABNY2xvqjA5IAx0zHwBPHj+PUtDV7O5+0Fjgs/cGZZRX5Zshz4
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
ys0N3fqEld6i163LehZ6E5hV6MbzTTM1kzwilGtkqcNZhU4ImBLGW9OZ+A/n
ZMapFtn8Cor+HN45uPtXzZtIfSqSt5CUjMVHFXnnlOJxdUhIwV/ucwzDaKBN
XUz8JZbIBDoPujShjVPnM8UNIrSjE8F3SzQx7uPumxgEcya00QLSDurKPLjj
MyfOpWBlYAXOH7Zu867tQQ0TGuueofoNKgm27NmLUgpd1J8nrcjAJG+D7x+C
ycEb7SQfoeeC0p23+6NnoKpjfKRYls/LnzksMaxhsEuR1DGHU8nPOcwxjpVt
/aYbdOMg54W6yv1E8y8WT95+OXlw+3R8a3Lwu/94Jkd/gm28tTiVMJwkUwbl
n4d0wFVFJXewUY8xd7tPOrQ1DBat6YJy74231B+i260pSXOv6KrQU8wbTWcc
6ArdEaIs3RC99YEClrDlvGvljLpwp7MZY96pa/OX4goOxJbRPjQZ+VUEJUt2
mm5i55KbdlTYr0l3CKqU8UGsOV9pWaFFy02YQBqQgYtAhdjLCWVyYB0qPood
Lirc2SNjTvtUqZ5Iw1yUl86PyeE5Np17I3MzGdjPN5IfyYPLZfFXSd2D5nvp
DR8PF3cdf1ehy2pN4XG3u6Ru7vB/4ZG9sJuij6lNizajdIrWI8s8X3DzXzwY
51vLRbe0s0AcIbPplfaJ4QhcJ80KPDFdtF7SY98WgXiNp1o3QfITcawZfSgN
BE58z+OIeaVZnfg2KvxC7/aiXsenSiUUgQQ/G8YW+YZl1xPKvOMWRxaRN2aY
0s9nqxh0LAaNePOxfS0EuItgbFYT6ORGKlcdEJnpchMElX5WQcwnYy653Vn/
KexSsli0ojvZnUg50GY+siKJaiosMmb4yCgcHUhUBdj/YyG9Qyw+MfuJuRvt
mvVXrs9ArkGjjCIplyTlkD6Ib+I1ZN50MMF32bNjZ1nn+1nPK+d5lOiXvYgA
cmIwAd/BbUXS0gQk2hFujMoEgn8dH715/Q3h9c1hJ7GjvV0Ab5kwRMwkAkXD
SXd7alY/pxXg3YZXUWUdJajQVTudYxGSdt0uTNftiT1KPCY5cRuHiJpmC4md
3LnFlwP+3C8OfrOb9sS2KX/hT7ZRNv73t/TfGzvFXvGbnfucd2LncD+oHge/
OX7p36+4bN5QZn0qYmMe+Uhi3pZ5a7DsyvstlBykr06HwuOJfk30C7T5Ks12
IN4WegHZdhjErJ5gWOuxuCofYIKWz226JpeKIoEmWh9lJID6kbU/rMrF+WG2
KU2kblgtw9i2SWdIv8CCqyYc+jblrofopW+pwdFneIL8J68HliMHEtVZ7NiA
oXIfoCI+NY/TfWW2xERfbJPkLLvyaRI2+qbNuYpr9RudylQzoBGYEfbs2+LW
ZP+g+Mt3Nx9OXj1+OD5fL+a39g/GB19++eXB4eGtv0627Q7NGFktVY2MUaPx
v5c3iws5uMRlZeF5TWSkXFT8YlXNcXawTk5y/fFHyXIFvhiyFfMTC/3IUYYj
kwlGcURs51QTqtvRVYsS73DH2U+4kBpxZ1cjJayyMZXGOyD0kG/I2zwhSrWt
drCzi0RXrKhNimnIs/EWVki6QdesC67ZnAae5IGeqOo6R/h7/BLNO4OOO/gu
uXU7v94Je7vb7RW7tOOOksNufrH3n5cjEAX883rELw8jYjfzflbjuM7lkuOP
4ZGQABwmni/JG2yG4SvxAYUDSk6hsnrJhUIawJ+1KIMdwVvGAJrXERpGEDjr
bM7LAdLDcbVp3Ugo0YuVV4mADBtjQYnwyUmRmhJBjbarSGniMF3iQaA7x/Gx
LjhrBmah/ueMazKt/nXXrZX5ivqImutL3qsQr0FvNl1oK1nYo6j97vpvivR4
r5sHFe4K1R7jCiDcPLp0VyR9XhPHCGc6mP7JY1GOBVBB9AsfdGWdWDkLX2se
nOLS3AyNFJExcRJJZTaxHvk8OBzY3idX+5aOtCSTgwIIA75YazuC/pB4KifU
m3zmtxzt/Z1VVc4XO+Gn8ssQtDFVZZFP1wlNcTEcfQWCgbsDmphc9kykNWT/
3b535nIJ+5z2qRZ2w+mE5rG6s6bCtgRBl324BBoop9UYW6GDNQfDzGuOmKNM
Gfuyc3G1SzK67IptKEZuxmFsBbQufLhi0FWvU7Q571G43cliv2KzguuKiil8
vZJM/lV1BgtYXWpdxOIrjF4TYZpOudeACUuT6uO5Oa1oqs8aokuOKzYclMK9
kzzD6DHOuFD2T64rC4RMkcsEnwSU+26jQf2wwf5Xzrpy+7yOPEQB5CxDAi7J
Su3/5grSjKnrvaK/UFc0dVXCxM7gWlLIUlzAMy0KQ61JFEAn2X589+DxMWaA
oxL3+qINIH20Ce+1/AVPl+gBh8WZle8shuyLZdU8feRAAWjQ5PwL/3vyDHHZ
gCf+1efX4BcpYvFr9FO18/bsEgZYUPZKVey+OHr9cK940VCu4jOsB+YSlNix
gzG7dtrO4ZXPjl7+1b3ArwmrDTdASAQFRDXlzsui49Dy7u/AfxpsO7lqT2tY
NKie9XzH/mCzau6plwXjuU01v//Ngxe/tp+v6JLe/3r08uvxwc2d64hmk37X
x02SZIZYWuflqW8fbApPuajDBdLKlkbZMBO2TQVF6NJGYXSmF2SpTOcGwCAt
96570JZsakdpEqinMXQR3F/1gw8oCUbCrwda/GZX5wu9ul5RmaN+tRLl49Bm
72IUAxfD+9NdMrOoHCzMSCuILWiiu17Fm3TVjer7okbHO6NcLR+nE2VnExyr
bkjopTVuPd60G0APQP75aoKjya09t6WI7Yr6Nefr16R7rwmAR9wH14YVh5yq
LDJ01TkN1tofTwZLRs0O2a1zZqfy64QvjiZ36fmjyRd7XDh+/RUPF0puqS28
xt5/CfJGtj/2cl6z6tB98oFFBYeRCcrefq+EbwsR0e2A9yTsrV8Yd1DYunv6
NlXevaOaFL37Cguzg2izs0+eVCZ4LXgEhcdB9QkShmf/olMf5R2ozAnu+0I9
dj1s/bGl8vs7r1NdUVayk0OCybDvYSQYTPMKG5pU2FBz7itEF3UIN4JJ1Cjl
fd+do2Rem6QBDjthUkCSH/IJ6SHiTPKAOTBZ4MR1d46joK9/QZn2ouaS1q8b
wZ99/MhpkjQDYVQsRTq4T0giMMKZ6CMi27PoGHCXnqNGmofOgEPkgpXlql5Q
U156rRk2pVlfR4nKNzZAjyBRfFl6SHdMID7CSZi0RH8gnieLug9Ldbwl1D5Z
fYpyLrJ9YXMHrOIJoVWe+1WjnCU27zlRq/mmAf5GijwpxRt/IGlffi5eIDw1
BOXbXvk2yYoEjDXEM2fAaNaRqoNf696eeKkCE2erWGc+LZck0WG+HPshizg5
suSwRw5DTKiMhEP2536qBf6SezBiA7rWdotyiIECwy4w4dIO4uTZet5Objj2
9LxthWViDoGgQ0vQTq2cvFKWKCHGtUnxKAKb4fnaegDKCBfbHh+ZzyutcYP1
caBQskxcSjbkNmMG9pBoIsu9WPmUUEp5He7kIaJCJATUp1ULJ4SOil6D6N11
yKm6tb+P/znA/9wkOJJb+7cJJMr54EUoKjCuWkvbCTgZVl32MZ2o4PH1ubEr
PhnNKY/j1K5SLR+tKEZsUoLi583Y5DzLRe45kcbn/oQUcC5v5BToYRimfJaj
QJ5pkWPA7vHhsB6glz2xidnQqAK1Jyl9OhC2Fu+h12QAT7To4tQDC7KJ1aUr
EXZiZy9bEpawDX8oicEptpOvzey7OjhXHDlD3kCNBuAtCo6Rt1GdrSU7obSO
wRpWoUy7Y1LwW2grUxOY2eEzzh8vDwI3rNgFXfSknoGB1UNnSm1JNW5kBrHJ
FlQGjyhPXFDmaTcsrq0NleO6IfNy+o5TWHuwXoHvCehSELgOje1NU16Umpvb
L9wLU8PSQo+XpRqqs/c5jw+2VR2zhoFv+0C76YmZPzMLuQri4mdp8klup8fr
f4hRylnFiXndYDe2WFdFYeFHeH2OddXSUyQwYXLNiimKyU/vKcNDNMI1P1OU
ZyWW8RFBoPupc6GSj5yTZI95EEn15qvbV4fBimjNcX/+FMzKYxRv8LqXVLbI
x/bF/v74zs3iL/gD/vtfNW+A9wRE5+a0JGyUG4t25sUjNd3wFW6YPKZoypgN
0Z5tNNeWoggzFfL8mcSM0SgOcBX9RiLGzUTdxbkqlWEnQ+aJsHgsPA+e6V5e
OCfz140VtHHYzdeWWOsTOypGq+ytBb05lDNHnxFzRgJAxIt29lVRulA66gOp
0TCh7wNOk2Jj3jVsb7RGpS8V3ZOrLQpSCTHzva4u4rPDool5i8n4QIchy8+H
4BJ7FIutdMNd2HDxaMm9DfGE+JKa1yrAWkwi3ChENs0jb2uBs0KTOok9pRyk
tzUwFOwg+SHW/fPGGYOuQo5k6swHO/9eom/+2E44caBep9NHP108eeGF9GJy
ftuoJRY4lHP0t126UP0iXL9c99Yi2tey1IRC4RbFM9jYM71dwOZXoJtSn0N7
rQXte8G/ZbGn0SzfPJevl4sSWE8uvTkyq8/qNXACX3Y3cUdzULPQhYl+7FGa
0YQv9WRTBP+PlBcEl3mEPwYn7KE6fY4LTshmuDOtzC/h4pGZ5gc3Dd6bU9Bx
MDtOat7DwcAEzkAodl/5tYXJIa379NlG0AlsgYb6+EoXV2H4YrJuo9luHRV4
MG8Ji2fVfWgDfOEK2cjGs1A20TTQzOWq2y2x3YkkzHqngo+oWxsqAK6sIkpQ
w4oW9lVxjvPHSoc1Q4kihvECRp2VEtf2cGXaERR2uSQAkMqzXFP8aaKpqF1E
nj7rJvEYwtqvYHgcD/ESQmdw1grVEw6JokRsDbN44rQcTE8HAudLGHElLkvp
MCwJigwKBfWRZqGPTBo0Ue6Ms33UvvIxMhi6XnJmxy5TxYwQj1Aj8sgnpeLu
piyB4EO8BE/YGcKFCM9QffZVhSUN4cYH2zmwt9LbswFTkYxu26/hSjB1Dd4W
r789ZocZEDBOCn6J+UOYVLp2zE39j4n9zeeE1160tI1Yzlc28jkXG0mtkbvA
Spgl8k+TRUo/ZmRbn8T/fjNHsXECytCaIKiEEGBsZHVxoJmpQCjK61TrRDCO
InSNDA06lLCY2+P1YGyhpEhH9RIYXLepJV3Y1/W4dFQGce7TuSpv3sjxbdnx
Rm6aoNr32ZZxayrjypFwD2P+emO5hEZHBgHsmmuT/pq4Yeg7KJG/tGz3BLoq
G49qKiIz9cTojWUjSfKUC1LkMDefPY/EFzxvcuGEPbpvvKESbxV1j2HHKKIr
SVvrqNmxjF8JLnt7gnuSitvoBo5kIsADsDLDsjQlpzrEKlUH9YnrsGcuopIj
VJ5ONyuSqCApKqohH6RqM/1exSYdCCKH8A5TkKaO63A0vdmt24wh342Mw2V6
Xk3f6VY8NKO+qt63Yit8i4xt9+Grb/c4k+b24Rf7lN30UMHkIoAorUxYB6fv
dA7qCF2WDeEbXEaqsagm/ucLqRwmZD/YzbAzLHiAiFrYpaQCxqZ3EsghDad4
d3QxRfnqTAk4zWykRaWJ63H7XNxxVRU75Is5RnW7eFY2cP50LZ6pZ32Ht+zO
4Z3bEhZQfuimkZkqUlvmi24DyWUxqfn24Jjmg2k5b0usip4jfMyKPZfULm7K
eReGSnvKOdVUU8tesKzalf4OzcZyHinlUeFjVOFLVRBo1sB+vjeVVW7TBAq0
7ApuYrNG0Cudhr+4RTxtZ+anjPIE1Ef77NbJPQVWinpbtJFGMQElCc8zKKxg
K8APNdRPBljKNGPVPLssQvGQeaoq8FVhGErS6YkMJ5oo1mmRuiwzy2tE03JJ
kKce44ET+o27ItELKQS2KGfVveJJveoYkTA0e4qmo1shSWlficcWLjaBHEzP
wSBjKmQcRrRiNmvJovJWNI3L2ZN1ozqlC/SAqbXRe23xjmKLnFMyMnXV2NXW
UAgGgMUDe3r5GcpRBKTHcqT7y9olAjmSv/iYGlqNeidqFAeNMn5glIZuQMy6
nsi25eBbxHxq7yaSRcUFgWAiQBEq+w2QIlysbrZql4jbyBXAfU1jCUYbsSxx
K7Css6WOuqwJpmR5BKSRt23aZkyDlDOkWFQBBVZI4LTCYbknLNDQrz9iAZQA
FRisq54+0pNxCNBymVHT+zY48WvYBaelWTcnB5QiSMz4Be4p8BBhvYdfHHwR
l4XZMyEl8RPF65pS3XwNERk2PSGLIMRDm9EUDCofCpKQnCzQfI9JI2AcWHus
IsX6gJmsk8milk5hWH+KNUcAuzVykTAbJEnyzNiXB0yInPYgTo/jzWJB9sEp
qAoxn2F3zHF5WqHZOYt8EZ2WZyX6fgpPVK5d9BjpGEiFfJFJ52y8+UY5+qjY
sI58yfBVxrsmWdWLjCcqf3Yo0ZzXWmtaqrdkIsnNpMHMKpkyHSr8bl5zWJxt
coyCedsutd2JPpmFq1/rj3rYWcrs+s2NUnJ219MWB8/7SSC8GZBQS64ZAcN6
9Py4OK9/KFmJZMdOTGmuR2n+2PgQfFnu/KK8pAx0Wunu+Xq97PZCOR8DbUY/
cvIjvB5ogsHKyb+gRSzhyLILpqhadGZoUKSrrT5wYX90hxvEB283nfNLJgWT
VKAz9K+qj6sbXvCjtvl8zbpqQjmSvK7aICiDucuCyi7DecdP47KuVn1ZKS92
KYtDSV3bGooOz8XiC2ooxHgoOCJCSyQT4qp53K/8anQuNG/066KkmALLYcVE
DKHpCjSfcYf2uI/Dt6uziqDSacueEk6W1QkS5sJO4AQ4nFyBLqtJFF6TiAYa
meKyOVOPU4ArBWBrfTEQy6hNoztfUtbmyaq96Jh1M1xn1byvQT1ktzyru9bg
EKxpul3UskHRBdzgeulYszDWQfVxovrEOzilmuNrb17ySyH2UAsk7jLkGuzZ
QrsfXyLCj5I1vM/VuN3ml4JkvaaopeTz2M/rKrkwCKLVpzDKkX3z6tsuRUYw
dqHDR9ku9D8vdi2kHQoQIDxk9gw6EvJU9iZgkiFXm42St4fUnzA+Xd8F57hL
HRFWUjn96KSd1ZLgKSWEiT7qrRKfUj9xD5iigDqRvuScRqYNXdeeri9Yzb/k
3jMzhIVeY6kmsUJZs3AApVCQdejZscMiMJkd2oFAKUOjBcmd6ovozA6PXOCF
AdxLBLMXE4tQMSDTKfCVI56I8yHmTcMLAUuzTaAqmHxfsZr6UnxKHI3p+riu
McQM3geJY3IpILkpLzla6dKi6ADdygP7kiz6FxlzJ/P6jKFTZtWCXwtsDV2i
82rGXiI7CsKjkVYL+4mSjJiguLbp9UsGhlWNWISqQvKK99o3a0r1x70exl0W
el8omWA21IMhWG+8gW5oByMofnXZ00GkzYtVZ781+WJyMPGgCgnErQru8Rp4
yBSrA0jNEU/5sw26JkhNCPlzWNlhYHDxFGJf+dN18plqhpjPv27Jamc/+VNy
4aEURC8BgWxKCmfwRmC41ceCqP4EbxA5OPGnYZkHB9dbIcLyex+hV1xAga8p
jYRUJJvv8NI3PHgVuK60ewlJNgkAXq+qJDAv5d3VTEs3YaH1YrMI2WIaawnC
MaqcbVe+tEZaNAhFdF5U0iXnhk9qF9nJBgNI0oE8iTJGfcAv8iNTIUZm3Hrl
to1sKn/CZjOCIJlu8qQzEk0CMOfVfMlhxYzcjfbWdI+Iq9Xjm5M7AlIvhDuk
AaViNydv90biXgfWein5r3G4yoXCuhbdNeK9aRi2loJrwy4NJaOO3R69Irl0
sqGdB2IKEnB06veI2KTY/4IwK7+Xrm2+o4t/sxgVnalWKteFLUyyxTs+0Zb9
hP4g0iAJ33yQm1sqlGGLRZOhT11CSpofV3jwIouC24MXjasHQ06sFtrAnHd0
GjvISm3Jh4vz1PFFPS6jD4+lZLRddQgoY8veRiykLFZxz0VMNrVsqDdijjxk
GeUc/CSaBuUf90fuV5uhH87iD4Z5QrruE0i3yJOu8JlwhFqwYGbWp+KiR8Xu
U6m4yFGx+1QqLhSwkiMa5gvrBN9C14sN5WkKXbvgMPyl6TrUjzUztxM9/Jaz
GboekWdIulyBdE9olvsOKWQqjH+j1Y0h/dA9ZjRtVutcAsX6iFD5QG5kwSJn
8m3Ux2oYNdKC2qX4fz4ByBSNa773RYv4c929IiqaIAaTmZbP498NDn+Wpu0U
BNOK8sRdUpAeKlT2KKvaJBVtCA4uKkzEo0CUV6xvwBgEvTdEnEr6TVL8oFXs
dBWaWbvyaCYudfhxFqu49TiJEpMsRP0mY6yZcaM49ZZJ86h4JEmE8QHclLx9
YOmScnUE+gWRGaQXMa1LnfBh8xkNVTuC5xr5EfYmbcDRg+dPQjlJivQYMusp
7drjQ/WqLEbh8WRfE7zrassg/OhuvxUfgbHuRck7+CrnU2q5+IW2jTkNcgQE
0ePvO+m8GZZNQF/4tzFWCtKX/l/4ZR/cS7DAGBvMmZuHlSePtePVyyAJzfWD
vQtdcoKw3HoH5SI+J6xx5qumLMyKXF2vz/eOszF8Ny5RgSWYop9aUAM2rZLC
Jyn3MiszSAnZC8zML8zQ3F44iLTDYa7ak54NBMoXyg+ohUFSBaoXAHNNxroU
7VJNTILHoFwnn0anpkKA/rPJvf5de0I6Zkbbaec6xPOmsSVdMbcxQsf3UYhZ
jsuwnIBunbCdos92XMJ2srpHzHtYhEt1ikrIsj912N36Q2FL0ef1u4q1ejxi
mC0rDE5rSJLKNj23E/hClJzPCaSwucQ9fvs5AZxHdy/2DnxN+dbE8a+VP693
bKgBcU/uYU87arglZL8oSpcTQb1baRvMRZBz0sDRn7Ztf+zzswzKbnKBDa6X
o/PqCwR1mw3fZOvrwFzo4eu7bfM9G/R1t6qJIAdU3nUNBeQKdqgF0DT4dvYX
MTq3ldFdbzHuetwvXqzdwiIMSEJsmAtGY7CkZmYUfwEcx39ADOo3u8Xxy+Sz
vfjBwMj8R56ZRZ8QP8vxMC2RDitRv3pnUZwYJcjW4+8ifgCmlq6dIpCuGGBp
GFLIoweZ0l3F11FpkDSsRWwn5JE8F4HikZ/KlQ4UMFI4PG4IUHoVq1xRIrxF
RuTC01C/uyH1oodeF2/NjhagzFhZmVenDFe+BawKm3K3FxWnDTRBGtD0tRTa
EDJxkehF0RxoQ6bRqsNy4BhOpF+Ak6yJmIMgVL1UU1OVPiHIUtOpeE8Vdhu0
vlbBr/AF8VQsGwnGuK15vYo7kGfKJk5q1ZKVmrvcNKQHZg6cMuymxUVsjdC1
QmAvJPT72bqkalsXP8CHTBvcpCPPLtg69qdU2dtrxCMlbsL8I4wAGmFbEx+2
mSKvpOxJf6BtOAk4kMEo4KULSpqQ8sQbrG0T/6wvla4wAFNsgj1tGROOKNZP
KFzb/LBp2K1AB4EZRbaYv0cLHHPw3/fFKiuOTVY+w516bNYYzn9jNbxAkU6A
4oytplAVZpcSMcC7iOyfrrsJ2pG6RewD68UsGg/xd05skpy8pMAsFEKax2gU
KfRlGCRBm4133bhFvAHmZ0XybOa/eSvj7Yjo4nfSH5Q+Usquoif8E77dgjOD
cbPBsknHOctzUOZVM5a5UyWPgiCOWB36vBtMbA3lAgvMsT3lFoxihgbaFSz5
zilkU6hHWAlQs/fTn21qlG4N6S3TjWkFhHVWPq9MsLt6rbqkwyorUB/vUdjT
xDFGTgKjY67AtF/RPnChlf2cAA2pw2B1jlv0XrVEP2VMopizRwO43mVXdzaz
32Gm6NmKWuD6IIuyYgZ8GEX9J4BWObH4i4MvP37M+34zMTQMI4kHL4Va+/Ez
//t8B9orurNT5CffU/Q0XJ8tUbiyu1zAfUAQ9l3uzTnGRgh0Bnu+rQACGeZf
o8WoCwzd2UAgPPE9hoLKdfUWRnz7w8X6e/gBA9GhKsnYD+H15l1afp1WW660
A03eBcrwsL47H2fpGDBH/yqYTzeKEwv17aT3rdoT9M5qhkzpms3ihLUwyTza
2jeV7FvMpsD7MXg6a87KJZaOlThdt8Fg8w0RGiFgPMN/YoWpSZPlDDfiexY1
ljP5Okn+SLIbJoK3MdiDlhBPhGaGXftOW6FRwrbomgICnSZJ0puAS/nc0vGY
aMlz8hMtNwxlyGb1bdRmTavR8BtEcEOJ0My1otn6IClsqXZ7DdJI349ZvjxF
l4ym649q52x6bG8tjGRZdkREpyZgIq+P9w5VzkTN1MA9MlV8UdLZmzMegDkB
Kz6tsPWJnBs2/nPcJY4T64Zfu61WjQIQKjVY2VW2iUJAW5KgleKrn7T/UZpJ
OzXhCUo084k0sAoyiMiFvGzXvDpO70ODE45YIIJtx2V2pMTt//ZcaHlMXEde
OulH35srY1JajMaBMV+1pGTKXR5txR2VnHcdxfyELFtCIpgXcoldYFyql9gy
8V5jaSoCmF5O54QEJDUsk9gYS8v70W6doTdJqn6Moibj/wCn6gwbGOj9ycVh
5fydJF0GY0qIDFnfhOyUFmFmMZTGPGslCLqJ+AaFDaNBHvExuiggH7gTKPJu
+GEhWEqljD5dKzSqHHGp8+AcHadeOeKsqi9LqyIuTNG6lHqaY10a/OZMqFJa
eNQeXiCgirDdrwqXjNg5LtBRmOj+WRq1mpNG8uIeDvA5qzFHyyVoe8e0POMi
RQgB399SIUk7X7NREmh6kAjMSBYIxooYsZyVEUMdrLEEnkeJmqLzzrI+1DYU
oWG0BhB5GH/0MmTJ1YqYtyrgVYynxgP4YsAavUuIqqOlh4hcYhUOKkPPym1K
67Ad3VPBDyuXvuFBCQzZLRpMi+Y1cpSVTulhK4QxAAm4ngsqpWLS5W8ru1Nq
bJJBAAUpWk7xPT/3tp597+MbwSk6pLHRGYOwoq7C2qAqd968DifpabhtYdV+
0ZzTSxAIhiLJEcVbpTzNhqQyevieKNftWhLeVBL41LgWWfRpXgZidbPCRwZX
iDL/UcSnmb43Jz8QcbV+8xeID9uK/2a3qyqYIy94DAtWtTj6GUxbtOpXiboQ
bpcPmf/4mRnNqhcf0dynJZtiAovPh/7/4hGzW73Q9oVsDNy9/eUBhcaZTtjK
BDPGt5X3N80SL3p0p3P0xlPIHXeaKVx2a1RsP7evBv3lAz4cLwOpLm97v2qs
j5D2xsog0RHoqzdFHTNbr2EZ2+9IjXMOgImm66tkgdqoz+cZNe7bOhnLGoRb
BK8h8SiUluvK63Sk0O3GzQ2pvAp/CcyuWe+J95GIMRYVoTKDLqwgRZRFNLhk
3lcd5kaDuEY0DnTesn/XtY0UPaHoC2fzlTgjkOhE55637RLllx++G7FT0JHb
FEUjDxsK3mcyQrBZsegCZ+WXJ05dsb8QNpm+51C1GNjmhVm27PV8dOhMNTfF
N9uRQGl4wxh0R+mdgNeBktU9hwY7TBANvahD7XeFKkO7wNwk8vrQzJA2ESxN
EiG5dDm/lPgcAtoKIwkFz32x+/3k+z1n86N+oIobzhJMS8rB/p/TRUb3IULi
sFsD2x/WjF+uJgulY8jaAnRUGS1KlRey2WR80Hpa34EJGAI6rn2OI/cqJHW+
O6+XHsTzvSifJQFjE0waRzovWmIqyFDqRdDlBvZsl59CGkWJgtocqfYBdWl+
uZe63OpT/5qCXgMr/R7ozfecgW++pyCe2CEwz+9NP5rvpUxnWa1lq3nhUruC
e4t5cqjOAH21kgtlzR/4seLdlGEYmD0csnAc3jjs3uk7y5l1E5ib5KFs6TzO
8pxCz8hAtFmkNKacl2vqdROAQiL4ngibC1a3hKtN8AQrsACb2ZzzRAiakAfs
oVVJT0mY6OlmTlecjVCPnADKAlHecvl550LRZiN7SF69S+A3C+Vg0t6GpnYq
DuYu9ko9jYSwOyp6AFxIn0EGo2dSzLZQZSuNy0MjmlxfbXGDm6G8Gkbon3CM
Aj2JpZlcrzAq3lXVkrKiepp3rNVeic0SNXY28g01AORHzricn25JMZA408Bw
brZJoHs/x4SutcJMbJmgSjsOeMTKDTpyU7eFz0+ED6uaysNTcSZgzNYBr2kQ
ifNGkV9il0LHzbKkSl4seBJ3MY10Kc9YDzTnJmKqmjO8GHm/DepF1JUhgum3
iq60j4ehz+qtbo5EiiGgP8w6XWPP1cgqi+/RkEyRwzPm6hKOhEsmqBKTG76k
vQkRXogMK8EC4DR7pPulCaInGwNCs64uhDulsBnaREuxl8E4Jqg3O6U2JOVz
x6Hm0s7zGjuJVV1Bm1uKdZlXoeDjduEtnF2Bmid58763PIOxs+f8T825xCRA
NM8Va3g9lJLV7eRMVbOsUOaqLB6kUtWFAigmJYSWDGADdMct42tXYt9HHDOx
62OTI2vAUKCH8AJn3O96i9Mis+/x+eS3228hWfaEa8C7ZvZ5pKokWUBEVTFY
lzPs/4ScYBtJ0uRUcNP6kdrxBTwReit2EkQ3JysVjD/0vpr1PXSm8hSkO9by
NsE6L8Zjx30rc1Ms4inSG3wjEx5Vkr9OKt1AtrhqTM8udH7+1+eI6UIYdzJd
OPJnSlgq4L0ORLXQ36uO4ZVqbavFRrXEObNaR2nc42Rto5aDGDR9eQ66gWsR
wBF70yr0YNBJgkqi451WJHREE5Bot06JAXgCtqeoBDbtuUuyqSMnrYHIQskU
eZdsqNp09NjzBus7pLroEeRhWABdM6dCvRAEBLknHPn9LI7/oBTNJtt3LIqi
Nq1d4UGhR55bB3fgxbmwheQpcUKjjTK0MSEGRO63gMvksdBc2YuOrufdWCDi
wHqSwCtb7IlkihqVWrCNq3QfyxDjuhGfNeM8yOjIQwOSOkaAkex7B3qhEize
vnggmFEEqBGVEl+7kE5OwYNNC3p29Cbv5SArEf2Z1KrNozGbfntDgowCFebU
vb+airPQP7ERzZAh+PHwztFx3ML/NGJ7B/keJDqWYnABd1r3R7MmRrZCT7Sg
cfsxMqGMn1BIqAn7P6eQkKE4fvFCwk+oIzQDu97AW+sIA2XZMkL336SM8F9V
hANVhJ9aRKgE2iu2ulatVWFqrZwpaPie2MD3eJm+11l836sh1ESJu7mywCIq
C0wXynljvbLAHn/NVeT/E0oHh8h1C47XvyoHP6Fw8IqC2E+iZbc+t3WDSsr4
7PfZusEcYQ/UDRafUDf4czAT3BWgE9eDTAAVoNj9bNku30ruwaT46XAWTgK3
lvtl4SwG0SyKLJqF+wQ0i2ILmoUQz9VoFqRRXQEG4baCQVDEjpM6vH0xSJWs
QsVJICFwiITyKv7up9kWYlZwUdJW22KLmeCSaV5wnoSYCtv1cowUUBYKDo2N
pBjUTHDW4w0YmkJN/CcYJ7md2WqSYGDwH2+SmPyqdOFMlLSK/9vely63kSzn
/q+n6OCEQsAYgEhq1/g4TFHUMX20mZQ898aJsdggmxRGIECjAVG0Qg6/hl/v
Psmt/DKzKqu7mstsZ4nRiTgjobdas3L58ktDZtYE6qjfNqfHi0fAuvYwNjcE
weVdmMz0zbRObbmQrgYnmnU6k4v50gyfGfneN3IjC5/3kSSzfyMbr7Ekf4aR
13jTZVYeCgBLXYU9cYYMnyIw9pzKlisGEakzgLyl4D5yattyLtXQhLbp2qDD
jcJ13EUp48CpsEkhfur/IgJWfIQOQTgpNKqpm0FZIhGn1GAkZlvpEEw0mJ4s
AC/0vklKNHnT5L1gImkC+7CBaGFacwRJ9RTpnXwers4CoZ+8z//6fnXWp8lP
WPnIIcg0ecwvJSyGi/NSYvdkXP2///nfOlBOUemJxXjiV6lXdDDQHLOphKO7
FBquqAP0UJE5zM58seab8Tr9qRZ/PqI11efjydTGLK4zcoOCe0rfeh9f/N5r
Grw8Wn3XE3wb5HX7E3Bnsx72nMnrit72/t5zGm+pVCfO8UFBv3MubYAeKRMj
C50YYQkZFRJnhkNYHMUUBFte4ocixGdpgiS+EQveKxcMc4lkRfdGG6NHIyYs
ivByrq4LRasfNTkpn+J1Pt7rR9HDnRULEv6rizd/2t6BawLIZLofA2EoeC3O
ie7G2DFgu9BK4se0iVl7P5hRveIDs1oCGXTjzaMCRRmpjNyA4s5DlB8gkYgb
g4BaLCYxo/EA7nH7+oiSA+5veuHGwO4HIng6mk4qZeS0OnizqzQBrvfNYb04
fi9BZo0dYKPtGhyLrrXLd+cghWbhsI1hEqnuE4Nxl+Uvw8KDlZFX6x3obI9i
6ALRftN9WFt5Bzu0BGJICD6luLTQcI7HX9021+nDl9ZJSUzYfSbGHefKcWNx
rBMhftdCtgYWRzmr2He/rReLFognOAWSrjUjQqhUCipmp5aA2H4EITCUGKyW
h2wiDHcuVBO/Z+yTIyDUD5tHHCzO8vBDXr0AkC/EZQOSqlszbdiRnBJ3SA2l
kRqhNNPWvioGGqSIpTdtYFdwNFItNYFmc33r8tOcPed01MQciubNZHSg6Rz9
4y2nH39/d/1hP5Vx7MV4oYgoVR8aOVIkHxIQbXgAga3j8rBqDLXCdhGrCaEa
SbDU8tdvA33ti/KCnMTqVux57bjfDyGvWk0pLa2kCC7X9XmBg4CcUoeblVbQ
9isHrDDO6QoSFC+OX7ph5vXi+eIjg70gXeCZ9kJyoZFRl983rDeTmjBZosR8
ECtYJKb2bvvzlF5Rqa8igtW0MbHL1CKqlOCC2ORFwndI9aexpovo85KVRkrh
ZNqeNi6xcFhOP8ypGAYmzGEWn9y5Ey48+UJj8vXOF4L4fT3oB5BLUU9OJ8wl
S2kI2vjdNy7ugIbNozcNQ8+GRh8gb90y2sAHoQkHGcAzhfEYPKhFtgx+MIQv
TKsIokwZBc7WALPfwIjS+ge/OO1X3zOeIYmCy7jGpVgr3Q69K/leuEVxB6yR
UnDC1asaEEWhC5UINmoJHPs+nPv9zC6l00kNO/sEighmifBN8FlOV8bNBdlw
u47LHJHGZLly6jTsm4QIuUOJ1COeaitwvSTNB3BSp6YV1msCbHQeQ3WiybJu
5wXxQY2/Ck5cOIV4CRu6L5TucVmNd5Ga3VRfh0ZkyEeg+SYXEaF0TqDljFQe
V1oHBTrfgqpI2ZcogSt1GjxFUvZnoUy4Lc9aOpDgOy6Y7xhOEgQgCDwYeT6y
Z49UO/CWleYh2NJ/WvkAjK7trHItTmfMgatTz+T9Aojxz4D1QK1U9gNbw0yB
/MjSIJKQ0iSvIoF07ldbC6MjZYl3czCDxKnQ3WIe3sQF0YQxNbWSzCBF104m
V6fLNJrMflRllz2c/a6tBEa/nN4lJwTRxiiZcOIEJCPBtfNKofR504nvbRgQ
bauBzEF/A4cttgFhjXmiiqNYCWaDEAf8Xtgzfm1NpxXKPS5cx5d0gWMDspc5
QiWw0sWcKGBOKLlSA8hl1OuEysO8FRoqDmQcpVT64gkhNT5gq6K9XsIeew3t
nH0+kgVVJ1kHEYfnTMLAQJR6ENNK0RLOEfQr/+OEKqP7CWE3rKYQuIiAb2Rr
1ZoLymcsNS3aL0Z35TGmJRgHWjNlEfyQlFtxQyx1WiTbK9TtzComI2eswshW
HZjzUd2u2xzoHR6P3JYWtdy6x64zP5dI+u73eaf6l3zkHRPCxGLlumDlbjNO
jhSYg/3N+w8OtHIaw04I8cOdvjxRQYG2eOmldyqysCTuQQ2OhJQrfQ9FM7iB
b+Oe4uNB7JkJzvZe2efkkZpXZMUJ/O6AJu59mLj3MnHvQz3qA5ke/01vGvjL
JfjGe+zCv0ce3L4zxgDbTFrMurH/dFn0hI3G5LqOLywyMnaXdwS/ENUkeuN+
HBsXS0fF7SrjJTKTjQcJK9m3KUxga1+DDrxmttOM6BTdVDczTpuJEZCWA+OH
di3Yj5RC66zGxvrNGlwbYOQM7JwmhmwAf60SwgrIa+cbN/CgXuLTl+Hx0gIt
4hC3rYPmNBF6d63whyBuKOem4pGHcoeGnlZD4JgKOY4Y0aznpJx5hXrobxue
To6Oplqoo74E9XilstYVi3CGmMjEIkTTCAHexKJP5xllphKiMiXO6Cz4kjv7
b9euWTymTQ/5YGPz/g9SDrLgnCgE6Yw+GlJulBSe49ga5UgHgCdpO67L4R/J
qw+yIh7zq0IIOmlRIsPXcqKvsXHMri3S3EcNsDXVK/DK81GymaznIACh5uOk
JkAsYhyaE8tiqxc+lk+w25OOqVACg8bRL/UjZFKML8BFDyhSBCgK3LScOS5z
wySgm//RG25sPuo32GzCzUXr5gfrV0dtLofjJ91IuqDN5hqYYlW98SfFh2S+
vyd5asrESmVh0fJhIgfeEyl3XipDPwO0vH44pppJhDpnn7MGTEjz4Zgyl3xT
U4bv8WoHRaGF54pTFskWKmspJ1XNYhpfWBVsb8SvB+7IcoGkmJSYoTTiR9yq
BETWL49Rt5I/RElO/C0zpMhXRvEuwgdrFUBIi6iToCDRdD5h36oL/Q7FNBop
E7dNbyjNG2nkerbFHG1jyBAgjUSE6XaoKE11MP1HdWLVAw2dC5PIb9Oj0yAi
JKXoI3w/VVlfOLtuasuR0TGWpJDQQAYSahdy/EM3rsUiwdhJsm0VgB69IMaM
FfgBsR4tZqU34qvTcXXkV3w/2PPOyAQoPLoNrlwYWQOWKz0aRKCWHW0O+CVm
nrvsuKJAErBFIZwU4hLadGdA+bKPn9Os7cgwFO9ohLZOcAo0HaAkXEyKuOYb
ipt/kkU0RLA7kYx5CXBCIuJkUaHVIUFRQ+sY3ujtg9QuZ9Y/4aQKIdFXUct1
As3cDrRpzOAl82pucHDmLJFmSGWygCzPvUnNFzJ+TubzI3EkCkMQ9TjzkM7f
0afSq7Qn5PkUYgmuV2y3fljEfttXC/ZkiNY6LvVzpFg5r1JQJuUxkwnlm6sk
UkB3+udBZ8gWBs4pOooQdOC+oIZp7BPS0E3P2uPmTT3zwBEKNikLEibDN5Jq
ZJ1Y0qNTkzjJXfMGGakeNmgpCaJ8nRwdk5ChGMYrEGP48YyldggEN/W7BjSY
S8ZEEV+Zt3mRk0Cr+JQKy1E8j7AJqLklpZQGDM5GJiiyCdiPoap0yXsLyaiW
C2OMFBMHzbXu2xJNy+qszuN+IT+5krrIiKT3nYZciOHzeTcNxUwDeCHZBs7M
Vsp6JHE0o8MyWZsgkj6V/nzmYfaK+yq7seiMeQd5TuQqXBHKFFI7JD/IYsap
RqtgZiZV+rC2vBSilKWIFyjHrA+gowEvb6geaGCRHXtWqYkYAJEyW/7EnoY3
hpBl+0ssVDSVvy2xaCK5Vtgp+ZmbxPZyFvB7nX3vGThVyZF8jHi4SYNVXiyS
ty/DtF9L6IJDtrVRtMJW8IqTDl9NjzUIpKX+oHz6nU+yppFChNiHjF0zBSjR
VXRVQCwji6sjLUwK+1ZJC3SEAMYY6wamXT1R7IZfbpKSFftZkadJk6DCAUnT
TssRmi5qdy8RY6ilzMCMbR4/MPBQfdcaOhNF0BIrZOqfi16jJwsr+8zoN5+d
zKFx0mltIQBM7iLU71wd3m8440vz4vclWYKZBCvf9xO26TTVp7VZQwYpewRD
lW9xc5sxdjLLRZhlAdO2J1zTsbvhLF+yYIWvCOwGq0j4jaJWyU5gE+dtgFwQ
15B00Wl14rt/inql4mTgVfiJkhROQ/TGq2RQ0ajPpSwrF5074nqP+N7Ie6Dt
vF2rhjGKUVX3qVxMytkysfSAdgVE7mqkT4gdBemUDhYEowWcBDyJhZE44+hl
5n6trbfMg1IyHgT1YbTTvAK6h33YQtMQYCkNskm4tATA2+HcBp9R25tLbpul
nGnaZlqE8lQGEiO0TVQwZL5YCox9ptWbnzhXfHs5mmJrv4E1EsvLNIo8mkXR
RgftHndytgVmbOtdHdBbMt26CvYzQi9245BM6ngvwY8uhFkh5EThvoH4Z5Ze
P2Zbgr4POgLClOF0kNrhdM42kECqFug3RT2gVyxLSgpmueK1kHP/5YhT1EAT
yr6zcqMYWVqm/vHwdT/JeLkuRpXtxFgnDi1C2HO84U41O1xcUAIovYOfEx5s
Ru+P/Q6aVhcC4P/xfDn0T8z9khziZsB6ASXx5zFm+GY+bY4aie+aAqHW9xxY
gegN6oe+BzrRX8YzHHkvDj9KAWXkYif7NEXmPW4A83JOy6Dz0OHYDJ6HL40K
K6xpgoPi/AmIR3pAaDRM0LyhHia+i3jqOE5AjHlsEu3URcGLUsqRmLiyhkpF
9N02ovuqKAY7Cm0PAz9q8VKCwa5xYknRlrxUHBQpaZMY0dS2/zN8TiJ3+PqM
9T2B00iIkkPcxfGkmh4JNo5uJhpXmuF/9Wr0vv/i2RKYxpTvZ15XXYyyGm/2
6i/DFXnHRXDQG+Qc0gn0pu8P0E/VtNj0HfL/HG7yqj0B/544Gfx+5vynCWX8
+7s4m0dF1jwXLYtFILyR6BrINDZvgptauUXbxCSroOsF+gcTkxGnyzIAkTra
gMKwXkGjMrN+8TEhtv5jeTjqi+wK+Z00DeJjTYrdM4YWem48bxuENX54RonX
fev/ErGT19GkxjLmGIKxRr48xoLfHAEvZJwrYySJbIO1COWFRoHDsFAOwyvW
w3R+7sojyrBFVs7cuNKg9eMOmlHp5zHGKSD05IBwIpgjc2iL3owAhJHwE3Ye
jSctHXyjifM0nIpKXRZgGXHQnc0v7dhB3B9OaZCW8FGu7ORODCuBwsZVnwKX
X8iuUK8z0WkdEURd0cK+MUK4HIPgxyzvNZMg1Cq3okbrqDkk/oai65q/yLPP
q8F/G4vFN5X7cMDygUIt5C2oD/puOT/hhD/xSnJAu/lCVWrpyIVAqcNcE+fI
Zy8YlhU4wKgc9csXXJG5F2q+HfBTw3pxeICsMq+6DGccuCNMN3Pn4PXCdMUS
ZgJn63mgeokU7sKA7DW0g4MDR2LxzsZoo9hcXy9e/8mJxBqqxBqyxHpSNAag
gE3y5M6d6vMycHp5/frJo/X19e63xN4Ut8nOvd2U00+KrRcvXn8/fL73+uXl
3xiNRuiBe1qxWYFNbaWDgA1UPoQFJ9gIv1g+oJiR4Xnj2iCaPQ8JUaeHDLPW
mlLJyXEktCOYC28flYcXSYvoLFN7kJhpZyE87sbdaN1RsUP8JhNhT0clkIGt
ztE8MqU/TB5KZwiotwEygTJDAI3dAPehzbs7o6zbfw+JJ8yUT/z+8TY2sFD0
vmYnEEoo0INa+JuwGdGFBQON1BpVm8nfNkv0ZT8CJbmd/0tAZJjJ2nGa0WEC
AbeP0alyqBBbdjgRRa8N+PnddRLpxXIvkZOLGG5osaCOOa8kry5RFqDX22ul
CGYeHMly8jorKZYol0NbL/omKKwx5CO7viyMZ8KYjAWRUeBoZAgV0ygHirE+
wtFMSBtw7cMhl3GPfAOwwHGTaEIJeiDAqf2+tCACWRpI1dkzqTpfkGQTQK1U
mZa7FQWKhpdIP8XqCIvDa+qR4/oDe+fpdS6+DipuI2cI1lEzmUbQ42Q3aZ5S
9NrNMfU2VemqTCUtR78diHAbXZeeZ9OLvnZnVjW64hXbrRAVpIW6knvMEGjs
FksLmVnotmHaNtAyQyNwyieI5E/lgIB1G9s4aJV6F4g9Ms9ij+msEco+9vbB
iT5ptxWwLom/0DWeMdtuzaODr4lOxo9C44H8fjgNVX/3bwRfAC8ueBgUcSRz
3TB2x8EcV99iRzJOMi9wX6gCpcB5LsIgbq4Ju7iWFOdackdJdp9/mCwrIKiP
IBGOrdLQNPpRjEeowzIg0JGXww1LR7SWZltdagJ5Kfr6+y2v0H35Mj8v6zOe
MJjZ37RQ0vvBs9RY3879K2pWCDVOpBEOy5UhxVT9jSI2oRCiGH3s7JUs5KyM
6ynpnh++VEhxHofXzQmBBI2sETkdCTIxr6t6fVciFWG+sKAIiclLluCLHM7v
xXVY9znJDiaU1w3qubDCl8cEmSVl+VrVqYrI8y1WSzJhyHcFTzcWdfR2BVGR
styFPkSzS1GjtOeEDUBLFZniZfDVGWpxuIqtfD/wPbJV1aIngcEEFKSJ8yqJ
UUmVgJQhmbYTz1kr1M2GV/qBQVq6I1gpgayfnDlirMS0XkNhaeiynW6uGas8
UySVHWllp1mFwEAunKHeZ0pCrsUlr4PJHhAclnRurmq4QRerwyCQyG81T6bI
+nvJYb40YQ1acnLq63wjCOYXilcs2A9h6SSghX4gg39UPFWMOYzOSf3RxQoS
A20LBWkltkyZUoFzZMIihvek9dc7VIiO2COOEV5v/R3Ta/HK2jVjACNlOzWl
UHCrgtup/8TJINW9wriBnIMr3YTv+f6cBm4tSc+jDtYBn5aVaS8nn4fvzvx/
EIMRGGMSc+u9ff3s9RNvJi5OJFwVECQiQzRJU+pasebC8f0xMiZoH/bhi2mG
a8skEyAJemVzEXhz8AqUgzUnNVVRXqq735+t6mvf2/m3d7t7BJpHJELLgSeb
1LqoKV8wH2mwX6F4Wu/YErGOSc1cBA7VBhX6wMUCvNkEgFr4upkyW09J20pG
doH0ImiypJELMXcgRm90DUrlfLVEIC+fvTZqwVsaWarJG1cmVJN30Hay47On
nAHQUnpxOtd6N6Jyu4go8IseoEN6gJEGKaGFHBPQXE26QKuT4n1JclsTPnnK
z9BRsPTr8El3VTbwlmsoxzmdXmQm18XD90em/JVgMfqLGLTkvMcJPBdGe2fL
cGriWGCZMwKRXRihYhahhxW8QqH1IhtaT9hT66HCXYYG7kCVGzIoGIYWih+A
Ox5AKgxPT4qQcK1BuF0kKvwWXq4cwIbxNzOoFlq0lwufLgL/hSaOZMWAvznW
pldEdoRrUeoc++AzX2esSXDTq8YGYEUaGzBQ0QFk+I96gOT0Lylao3UKFFrq
AmcQ4C+7qDVJ40lq2JD4h6WCQAaCkQcn0cuQHGjNdU7xQKEJRsdRVTZvkX8U
sGbcyexz1rKSh+UZ8EP0Ba4/rGFahRQnx2G9GpPHmJ7GDI0v6NaEFFdQyFTp
RuXA4Xz+cSKvlhA3zDPVlxLNP7KOxfmh2pjk5BFwjUhnPlEZuDSuSL406y+B
H0JelEUrDvLr89NkPlVf/9liMjtkj++xm3prZBnJFKkZH8pPEciN05qE6ZnX
LBcEr02KkBEAGsKdVJVBEjjyHyFvecAXsj/Jmz7IKvX9n3m1cVGeaB55HQG/
KaK5Cw2oBMY8pgSqLo+OFtTmccmqB5Vbod1tMfaRbcWl9LdicdZgz4CGUuMc
Pk2Qf1aLIfCB4+OOcctaO30SvFgGNEHa4neo0hDolPEUykXDjV7LOmLQod/C
r/+UHxPtufZFYr7M6DVZ4Fjc4nzcwAGhISmJQtcdC0WdqMR6FWw9E13kgHB0
l/JilYGRITQVMJwdL79RaWgimV6HBq8Vlvz69MsplC5lYmivYlL1jgW/FfhL
8GWqRwuN2iM0uhc9PNGdNGImk4Y9iibK4r/j7QRJh58snDW9CFPgBceBOt44
c0QrHlCG4kRI1EiKwclIvTjmahFSXM6P94rCz408HeEN0a9FWvDZCahHXDwL
I3zanonh16/uD+0/4Xl7Jxav9h2FiaZT8dBKyCIEH9mL6qxC2ewAq0dHVf1x
OT9LC7WKnnY6H3tp48wlIlDINUwh01BXANkxXA9OtSzwHPL6HgS+azoJGAk+
0bQsLckXYNXJ8ml7b4NLUppRW3L0hIpMC5MFWn87JLdri02G6TyGm0gI+EO6
APxt4RDpOpcNgDKPJ3Y9OZGFyEe2Zb+wzAF5oeqXH4P3UKMoVvuVCIme8HW/
pXgnB7cewkvh4oQSG2RRhyGU8iBMOMHeyW4JBOrtQlZNnB7vXuR9LyP0TA5f
wdwR0nm2woI6uxj634b+2F+qDz3BULjFCuhj3wiQLbC3SQ5b2Sx82QxjqCiN
Wi5jTSvNdjGpbl3Kq4ekEMEjIyvJlAfSkiECkgsC0y/F1WImR1cy9BYmjHdk
qyW/CVT8A2EMJDPwdD5rVJmrFdOdO0Fcj5+ZXly2fAwrZNYQY3W7XDIBPdm1
FE9AreqjRXk+5nyLFA2iKqTjVKOItT27yHDPQKUTLS4y1etx5WZKNt0AS3Ct
k8MFF92aic3NtYcatek6jJOvjqsYHFXVGVwkXHlal17oHv3QDel3YQBHVqRf
C+MbsL2LCrqdk/ROTduAEyvmQWhN4SzaCPrAyD1Nhlw/VH2W8rvNh0SNFgVe
2uOYI65W7AFpU0OxhlhBTFMXUhDLvFMl5jkiTjHWuah1RNBxzq4QieEGA1XS
kbNv4mg7Cb99juS2CuowA5rh5zSuCT0dtL82q0RVOgC2dEXzBgk1xxkrHqxD
XL2E1CfufiBO2IltagZSLAL1e4EwlugqYflOAWqtjZlv07WPtUYIkPS02Vcz
lSFSmkLLrHMmasMMZGdDXa9OgYNxtv5jwspKclYvAtQeJv6IdBMHiQi4COht
MkVA08LDFOCh6oh0q3WY1nFZkCIh8AH4D3FM6/HMLgoG2OxiAKiOJAnwbTsI
RrQ1HZQagmHep4UZUL5fdCzqOM4w5mHLcm/YaYbUz90k8y/0HfKQ8D2QsTDg
lqTJ+E1Bf41mTKxueLu2yQOmec40qGg0KH7Tj/JTbxkczc+CVx6WrxIIWCQc
DVQYvYHvw8yvborx+a3nJvEeLXyEVCmWZTZvuCFwLC7WJbYT31xRVHnZsoz0
IzSv9CGAI04QlNa22JXJd4OLd1UnPQ1HnjjOKPjKLvl0K0k2zGdkeSNeAoNb
tVSoRdJLL9NMMSSFWNXiqMEwQmwFyDtsQMXO0pazBHKqYScnj1KsIuc0l9dk
40mXqLV1QqXG4GZSoEwK0eWrUBdfjzFmitpJI33yzDCe1l+/9sWdk+HjYicY
1+YNy7mLDofcHC01i5pjqrU2W8PPps1hebObpmmmhqymOgjowZS3/fLNlR1O
Z08VHo7bpNgCYFRbGPzgNE8YyzL8RLH6NS2AVu8RdcU9XjfKDj8suWmSRi6+
cDFBE/FBdkngeJu3oxFSRcoezJ1gbUl/x3SWUl2TtFjeOB0hiT1jZvF66Vq4
qTzkAz2o92pj5MMYBK6yfeAP1VlBq/opzN9iLhBpHob8OnfXOVWaS9yv7KPJ
Mdj8lk6FhCC654crsQSuu/6phpKpaBjbx8BWFxzkc10OIaTC0pDrlCNiG8lT
qLATUGrkIjteipc3CQLnpYt/7yA45YFaaxfW2nqziyMzsDLGMFY2S/mtmukD
UZfbqcEcskqzA4ObDWCcSR3aNTVnkebLJVwWawSxFGgY0JZrYlizHiTHKpvR
31FGPoMJwqya1JGpGLCHC6IlnJRciItdYF5anPgRZFUrl5Bqabs0KTDRtXyz
D1cgwk2Fuqi+llEsd9Q07FUspezwKsuWS+Jhx+pebBG/WFEk9L2dsck60cJr
1j7K0BUaApzwYRzYd5lPTdecymTPNyrP560fgqGdVpUUgtfZqv0PZG9MZlHT
DbwV1rJuKCdN34WtezzmGpcTjn+RSbtaMhKacBfHiqEPQy1uB5gMUVyoAh5H
Svz0MdlvLU0PdpSIvCaFsQVyyvwDITOUEn3lKNC30omlsWAYMqy+qSFW+78c
fpCEL+6cIGwXFTJwPlYXUeMU7GXYHmG2tCpdzoseyOXELw+F0L2emcEIBRMl
wKD4YYEI2I3A+Juo2XKqQi2sCjjjMS2ZHG4JbHSG2EGRpfVjc1qIcsXOrlJC
2nIe57VkX9ZyQqXpp3JcJT4sa6NQtxdJ8zpOrOCANALUd5rfy4MmAT0bWKC5
ZQcbAZwrpOcbDfjtHJHWi7BuE1a+PKKNKcBJpjo/NRyCg3n6gQg2sr1PUqKW
FpDrwFN9GOBGqdxLFHSq5YMqnL43YBgOZjB/xvdhwnHmyULAR2NEZJZMC5FU
vmsdf65hnkiOh+AU30i18XdSbXyfHbp7Rp58+aajXrxzSMjmsAHmSKMLZAKt
cHK3BUiHkwI4NBx3YwGS6yZPkmsa1dFDgfoe5R2QM6lGHfj5f64mgqsCnSo7
KLyI8sfX0i83AkPKo2t9hyOgVRddi45Y6YSYUoiwWcpUN50TmUfUusuOSu5R
XZE8leA6n5DWUExLryR/4BazW9xa5by0Q0C7i8093wLXqHc6aKqK8u26JZFJ
ZIp5mhdHLIkpOhGLybaqXjPKkbLGO4rcT5Lx6AwlaOZ0KPBY2pdgpqUamTGA
CMDVMIideSqwy5ZeK6biPuBEjv79ySI69r0UWlSSYO4INbMgPDmBneEFXGiY
k1UAzUu9O3oUclIf3n98n3OuOoaC9mdSllvOT/b7cUNE/TStPSCTQtewb8SB
03TV1uoWnY2yfPFBdRLm8UZU2vvEFPetmFJ5UcdxM+2opTSbtF2DtBubd++N
SIxLCnRoz6xaHmi4JDC0GPpYOg9sNzXiL1OHuL1MQxDE7J0iYsQF6Zm69FUF
ODi9oFEYRG2aWSvIwyJq2SR4nxn9SXS+S4VZ5peLLsxlODsjuzLQIwZRKOSf
9OlDvhM5pY7c/DOCRWOq4STX3VEr1jAoSf6Ok8V8dcbcREHYuhBYgAGYmy4Z
ryFj9NPJQ36Vs4+JL3JRmSnpkG9hdthujsBWKZzDDPNMW7KYe8XhFEtdJb7K
usCe6LdM3EGbYQfdffzoASHmuC2o2+VmdMyeGuf/8kJyErMNDVjxgSBynXoc
p2X9oegd3DnoC6mV3wHHyypZdQGKScsrUuCYXMCGFc/ij8VVl/yribIBJAHJ
bn1yB2n9m/q+O3JtqNx0cd3lIyTavNqeJQOWtwqYF390cHQ0xXcJ4I1uk8Up
Ult939W50RD2QKB2noH4cu03h7LmuFa8mA8jXRPxlBoANqaAHvUtMCEaPWHS
iwAOnLWOObSNu2DMRUjjbj11pKlKXEJcDfX9QAdjlSYxn9pcNZIiJ2oNo1Ia
zDJ8QGzeXf/61VlaId6jSgqrTCxtHYViRUhpoSHRiufwkxh6EexfkOzAc0fK
S5SdiSJuPUlGOwkHK2Z1BWprYcVuTQPF5Q4/tKMaZZ3skLrN+PNWTCxHHBqI
Say8zLQh8+xyF8erwsvJNSj08ZnCZeqG4H0btqCmvTaO1Kt34pZuMrP3CZVc
6dlRzUAtTgkEsU9pmMzZMBl60xWDiyanoNLhVu+EGBcB5KzcP+T/hWgnUCdh
o1emwptLUkGAeuPB/xAr2zZK3yYv5qJhy8gQgmx4b4QOdWE2Fn+6HoD5Q0Zx
iHtTSTCqQscKshQmsf5WeV4tND0mEahR9l3hTjpCmEu8SLy+T1YlCDgiA0cX
MDgns/xSanESWJvYkLQvCVNIyCe0RFgQpM2sQmsQullhZzcQOqZW2hVVUNK4
Qggp6V6Cc7TUQjXoebNwjKmVo+4YDU8oEAxMDwjTUdKX9aMiLXPm1EJsSca+
YVbJFTwxDmUXg/DawZEpKHSdMkLIyOTINnuZRaK55OOxugseICR9xXiDRbKH
SC6agi5wnQplpta92dh8OFr3/9to1L2BfrL75tM9Lmuqt//5yZONHzpufZAK
LJN9p4hTel9uCMWS8wvcnyWk8NRSzIC+Y8Re0t77G+vr964h9S5rEZp9jRa5
S1rEQ/JgY33z7tWtedu1cbkSluSpX8hMwtiIFZFZWjhAU0KgSiJ6pnQULY9k
rQ2ESI2AVpQ4HjAUHKRihiAyb4LLrDqj1Ujri3mW1BMWdocTXUgEWKZJppCI
xc0ykCNIPsmyD1RfpS3KLuVi9cWQL37LoygoIVxCraGkYggMUWVEidx1XEBu
3rWLeUmMvbzDqmfaA784nGL2oxdsYpyLhLB9ylqJ1CUFdCMHpNXbJBZIwq4U
YyyZj8Vqxp5ROkyjxqMyy50viGsf90QiogHbptHlLfV2oErRt9ZGko8SMC30
q8NBZmL11r9sq6SZyKZVhPyCRg7d04VRewP/COoFNPzotvtPt9/YlLrjCTFo
/hcTUbjdrVdbjVpteYAyC9ykWv1b9HGPVQQiO+TkhCGS3FXxuPjqhlf9kVhT
EoIo/OIu2UQ2wKpcA/RDo7QyhEwBZ8GlTqVSinzpp/YEZeZ6xO5/f3PzwQ99
sfjKwp99w/OqooOFUJJ0xk3mCnZxzLfmJ2DIl/+ZyqgTPwpViJ4q1csgsERx
KRgiX50Bog6k37OKGXZ9+3aYutjvuZA0vJyLxAopPlOCvGognWngyI/EVGSs
SAq0m25vvb3nT1vwdRCk5VOVKnlaa05CG/7HGlJRWJ5Ab5NOFCLT4+jROEKR
b/PKEHlT3ixbxaFzAJ0dQPRdJkAoZ9krw/M54774MUBOx2pM6XFOCLLW9oz0
Lpsr5ImeW1Qk130fw0/JdF8ykgCgMDOekxFlJruZAvHbQzEojPMbZyT4mjnb
VlPSpAHoPuSk36p+XTwDL0qgTNBiI0JyWrI+65Sc2vKO1auTE1J5Netpzuzu
JvFXa5X6eaZhOl5NRyIiMHXsJkElxbDritUZHXZ1PL1yo+QM470cmVz9S1YG
T29qa5gxkKXgaCxEH05W2Fsi16Ejl4L3FfxYT9wTYPpnHB/Fd3yLdE3YSd+K
1MgsV0KVlBBDexOwCvRe80AIYxk0g1ZmLJrsVEQAucYrkMuEryXOile03OJr
Qo03gbb5Q6lI4gUzIxff2M/LzCQkI2N6+suX+P4ooIm0Asx8W2k8lH0bfvZ0
LHFTM2jKGjUNc4/IHWjNzbzKL6R2/qMJIlgSuKujmI0RFsHKlCpRulfQdnKO
vp9Z0naYO1EcINNqQY0jq2tf8XPF2wUqkT7fpgg9Yrpruztvn6+JeaaEUicK
TkH1wyIqVphR4H+R2EfOVcyihM50DXkDbRnT24jetKJ1Gn7wu+tUvCxePexH
Tu5xpbuWRGV6FCkkR0Z9r9IynLIhzHURyUIYxx4dmVxqzBliX2Cvj7iBMgJ2
rCcGxtVyQbA+pNSfXejAJ19ky4N8MfH44SGbVmSfFyHiqX317zC9RZBIvCCK
7FYOIEbUTaM6IfRlUirhytP/ttZOmEaKVX+CeSPi2yIKheJp5X9c+N9utumL
3swf2H3/3OUbJb6/vU4LWoT+SveESy83RxukmrU2ttG0ctu4W8+6gX6VkSOp
hDQCijHnfmpt2kA+V8uFg6/7niBL+aa0mFN8gShB6eUUVt/S91xe3ytupO+5
S9WV6+l7Dlm7P0ffc0L7+7u+dy19LyzX3/W8vys9L8ipmyp78UGuMqBbS1+h
/8aUsyM2PGGOTKktp05af87pg+JvyKMk8rGlAUszqHdGykl5+xB/+l31+btT
fa6t+WTO5cs0nqKxP4qQJ59ebOyBrmWrS5Glhn9Dt3ZzmXrj12Xx4OG9x5e1
0I+jn4/LW/lbNEf33XuyO37CoP1qzYrUcn+1Uwlo8U9qXQo/KoqmiGz3gy//
Wh0hEfrLduTX2j3zoxs2NDuuv1LrwN74np0RCHL+vKb+qiPJbb3x9vpN24i8
rGtIpt9ibq0/6694yPCRnyDMf9u19/mMCE3eT/6aR1I5vP7yS0/5w/7yLZHa
ydfZBb/6OaahumSNtL1brehdyANB4Owm8bufGdLLNtQ1Gpr3RsW8R9ykLH8d
ea+xKsuictcNCl7qJHK5oOANnUQuGxS8oZPI5YKCN3QSOeMkKm7qJHJtJ1Hx
t+IkSlbR746ivytH0Z6d25s6i373uHR7XGg8B8bV4pv005wtEhj9Wc4Wypwo
fsE407XOzrYjxrUdMZn1F4y1X+ik31Fas7rYQXEvc6grb/41z/IbHNutr+ZP
aC43xoUwZA3YoDgjXwOZUmBoq50wFoZfDGEFpXC2kD7wmYa7XYxT9W+EAbLH
vbsWBuiap9XlGKDcce9uBgHKn/buOiGhS057d92Q0N/MaR9X5O9H/d/eUX/Z
Wc9y6EZnfEH1tlZVyLaX1SGndKgWoiN9+KEkNgZyw89XS5D5LpELsSxufd5c
H25uFHfob3eH958Wd/wbbn2+/2z4cGekjbtu0Ck25ScHnQzLTyUCWozMouhd
q8hKX83T9Hk8baGemef4dgB8CALE0rr9mjHgEl2vgRRhMtn2CZFMsSgIucMi
c1aA/rMwd5vK0AqZjlIiVHOYgMLlRyEx8i8gyfO7lniplhiH8W8rMHd9XTFV
fi4LyhnxpNVv3ke3VFY+kPrIKLnsFvolcEb5dqkj66+lVfXq+JjqhVKEUKJL
f6mmOVKiQSjniML8RBi0nvofVvXwVbla0J4+LXpbT1897xf7F7Nl+TkHqs/+
UQ1c8rq03mpx9Ydq/pCJsphTbSrp1JZptK3pxxwivx3CdmKF+O69H+T8oc+h
EsJ5Malz3KXFO6/dkI0D8SlVjv/8/d3t0d7O9vDz6XS4ub7+aGPD69jf0dfq
5GClkyzmYUgZc3r9u7fPh498G3a0M3SnsAlFPCxntINwX9umdEZK5htqekgu
iFS601yxNS+PhgsVc2su3s+Kzp8l//yHm723rpS42dwoSU7/vr/9L1t79Lfi
D6xJPNzBhVf/ll5I9AvVLuTO8I4/5JSR5OZ3r3a3Xz/boQdevd7ee/Ecz6w/
Lu7Ix3H/o/Xhs4fPn0ORyf+59XlnfX19+Pz582d4YmOd/rmx7n94TqWf/Ki0
P2XGc6KUBKszsY789lyYO5yp7L7J+f/5hSQMJKeTZaCM2y4X3ho4qbwSAdo8
0kNf+PVwTOmdccGN+lykYC1gJNZ000LM299lHzXW/ZcvfMtQAxJfv2oiP/8+
OZIZ/JYnOv0gQx7yH9VrP/HD/Hjrwwm4ofHhxrWuDyfRAqrH5wf3y5dZdT5M
4wihRcnPvkWGdspvoW97xf6bxm/99Dn89odi49vwC81heg/94u9Ze7/ml+Oz
3T/uvvX/3Xrx5l+2uOM4Oxodlt+6Oppourg3dEk41AqZXPyLb5T+2F/65hH5
iTrDG1xaxzVi09bxb52ty/GJEjFGF5sjSDMwV9cwAEI/obJKNzfCWuKlZGvZ
NlaSvXTjHkgr05wyuaoN008QL5W2L5He3Ej0q9E6+S3frH1VGq81TINmO1s3
uIejTe7Ro9F9bTyrJvYPLwgzui3gRK4T6fVfpEPuqg7J7FxqvyX9HJpGdvWz
vYTM77/RRFG//GSlbQ+rq2uBRUBGowP2wtU9yK71VqPT/oikN2UUhh3v8ZMa
TF6m9q3jTEoE25+dw3KWvCFOJJ5R+c3/gFC+0xgSc3MQ2vSXKLCL8E8a0LUh
ieu1Ef6/S3TThDbPSPx0LcHdkhxQTfMiLc3QSr6YXrrml2PN2rZEi962zMax
d7ZaGQEtjTbaC9c71HJt0HXBqhitCvtIerQX8UffTPrPJesiXv5l1kXEzDRl
h7nw08chCAJ+23DCM4GG6AlosB+tIzC59tObcYNdKvfkl02IZUWAim0w25DM
1FudR8BEytWctD0sENL99IFhfCA2DL/9whLhPYp3TipzusM8pR40b5jA9c1G
GSXVqxgY6i3+w/fufrux+Wg1I6tyQST3dFP8p78DDTANajd17b/X8BjfSYbV
vY3h/S0YSA82hg+3cJWfp6t314d3H5su+UGYTqvZSdXZJ3NHZ6fCPX/ZXjmi
Fp2HYAQddXc+D8/Pz4egKV0tpmrhv/S6XInQ6rWdJYnfZCslyTBBMDbQm94O
5rdau7Jha8UpWgbxdl7a5e/UNN14ONq4O7qXmKcflqfTe+sbw43Hjx9vbG7e
+wEWKvsZTRIvAnSIs7zcfbljRiEGmF3vH4UFxTdvNClnJUXH7jBbClwhd9BE
Fsv/RD7R56sFOYgptCiM5KnVPZkpJ9xAmN2o7i9ap5wU/h+z4bv94db+9u6u
M/YyOEi1qiOPq1e8lv6FqGJCVBMn1UwJfs7KC6IXq4Nzyd+P1jp2xcdyoBLG
1LxnXReRRgYOoGi5s28IJEKchAzHzIPNxz+w++c7dZ4TCSNR8/iHyB/8n6GC
4MyFYt5jKk+AMct82Kuu5RlKHKyoFJJZAN2zrWSQXurhPahSLMxkMiatIZHo
hEYAMCya8Bf7gZcwgWOkxzut7nDdwzAoKJRKfV1OL5xW6fHdXKJwBOjX0hFh
BpsxObKyIx/XQNEY+SZbKT3CrcFi4moy4iWrJ5/VP1gY/6DrbfSLd/+wvr65
XvT232xt7/QHRW9Tfrtf9N7s7G3vvHpb7O/+8VV/4Hp35dKDorf10l/c33r1
jB65J78/9Y+8eLcf7r/Pv2/d9b+/fvfqmVzAyus9oIub61vbRW/n3d5rviZk
h3EpOlAtw8mYLiV2hvZ4vD74YaB4LtELqhu1L2eg75zvi2+zb972ZuEbs7NZ
PPJ/2XZappACxS2npi6YUh2G/3Br8/6tzQe3Np/e2t68tXX31s7mrUf+L9vk
kz4kgpppdXTCftKWOPUb+Omz4Mk+nq6Oj93/B5X22D3geQIA

-->

</rfc>

