<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.14 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-parecki-oauth-v2_1-00" category="std" consensus="true" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.40.1 -->
  <front>
    <title>The OAuth 2.1 Authorization Framework</title>
    <seriesInfo name="Internet-Draft" value="draft-parecki-oauth-v2_1-00"/>
    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization>SignIn.Org</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>dick.hardt@gmail.com</email>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <postal>
          <country>United States</country>
        </postal>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>Yes.com</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>
    <date year="2020" month="March" day="05"/>
    <area>Security</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 2.0 Authorization
Framework described in RFC 6749.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>
      <ul spacing="normal">
        <li>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</li>
        <li>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</li>
        <li>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</li>
        <li>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</li>
        <li>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</li>
      </ul>
      <t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>
      <t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token - a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>
      <t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>
      <t>This specification is designed for use with HTTP (<xref target="RFC2616" format="default"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>
      <t>Since the publication of the OAuth 2.0 Authorization Framework (<xref target="RFC6749" format="default"/>)
in October 2012, it has been updated by OAuth 2.0 for Native Apps (<xref target="RFC8252" format="default"/>),
OAuth Security Best Current Practice (<xref target="I-D.ietf-oauth-security-topics" format="default"/>),
and OAuth 2.0 for Browser-Based Apps (<xref target="I-D.ietf-oauth-browser-based-apps" format="default"/>).
The OAuth 2.0 Authorization Framework: Bearer Token Usage (<xref target="RFC6750" format="default"/>)
has also been updated with (<xref target="I-D.ietf-oauth-security-topics" format="default"/>). This
Standards Track specification consolidates the information in all of these
documents and removes features that have been found to be insecure
in <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="roles" numbered="true" toc="default">
        <name>Roles</name>
        <t>OAuth defines four roles:</t>
        <dl newline="false" spacing="normal">
          <dt>"resource owner":</dt>
          <dd>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</dd>
          <dt>"resource server":</dt>
          <dd>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</dd>
          <dt>"client":</dt>
          <dd>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</dd>
          <dt>"authorization server":</dt>
          <dd>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</dd>
        </dl>
        <t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>
      </section>
      <section anchor="protocol-flow" numbered="true" toc="default">
        <name>Protocol Flow</name>
        <figure anchor="fig-protocol-flow">
          <name>Abstract Protocol Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork>
        </figure>
        <t>The abstract OAuth 2.1 flow illustrated in <xref target="fig-protocol-flow" format="default"/> describes the
interaction between the four roles and includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</li>
          <li>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</li>
          <li>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</li>
          <li>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
        </ol>
        <t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow" format="default"/> in <xref target="authorization-code-grant" format="default"/>.</t>
      </section>
      <section anchor="authorization-grant" numbered="true" toc="default">
        <name>Authorization Grant</name>
        <t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types - authorization code
and client credentials - as well as an extensibility
mechanism for defining additional types.</t>
        <section anchor="authorization-code" numbered="true" toc="default">
          <name>Authorization Code</name>
          <t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616" format="default"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>
          <t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>
          <t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>
        </section>
        <section anchor="client-credentials" numbered="true" toc="default">
          <name>Client Credentials</name>
          <t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>
        </section>
      </section>
      <section anchor="access-token" numbered="true" toc="default">
        <name>Access Token</name>
        <t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>
        <t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>
        <t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>
        <t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>
      </section>
      <section anchor="refresh-token" numbered="true" toc="default">
        <name>Refresh Token</name>
        <t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow" format="default"/>).</t>
        <t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>
        <figure anchor="fig-refresh-token-flow">
          <name>Refreshing an Expired Access Token</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-refresh-token-flow" format="default"/> includes the following steps:</t>
        <ol spacing="normal" type="1">
          <li>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</li>
          <li>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</li>
          <li>The client makes a protected resource request to the resource
server by presenting the access token.</li>
          <li>The resource server validates the access token, and if valid,
serves the request.</li>
          <li>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</li>
          <li>Since the access token is invalid, the resource server returns
an invalid token error.</li>
          <li>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</li>
          <li>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</li>
        </ol>
        <t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources" format="default"/>.</t>
      </section>
      <section anchor="tls-version" numbered="true" toc="default">
        <name>TLS Version</name>
        <t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446" format="default"/> is the most recent version.</t>
        <t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>
      </section>
      <section anchor="http-redirections" numbered="true" toc="default">
        <name>HTTP Redirections</name>
        <t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>
      </section>
      <section anchor="interoperability" numbered="true" toc="default">
        <name>Interoperability</name>
        <t>OAuth 2.1 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>
        <t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>
        <t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>
      </section>
      <section anchor="notational-conventions" numbered="true" toc="default">
        <name>Notational Conventions</name>
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119" format="default"/>.</t>
        <t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234" format="default"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986" format="default"/>.</t>
        <t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949" format="default"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>
        <t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>
      </section>
    </section>
    <section anchor="client-registration" numbered="true" toc="default">
      <name>Client Registration</name>
      <t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>
      <t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>
      <t>When registering a client, the client developer SHALL:</t>
      <ul spacing="normal">
        <li>specify the client type as described in <xref target="client-types" format="default"/>,</li>
        <li>provide its client redirection URIs as described in <xref target="redirection-endpoint" format="default"/>,
and</li>
        <li>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</li>
      </ul>
      <section anchor="client-types" numbered="true" toc="default">
        <name>Client Types</name>
        <t>OAuth defines two client types, based on whether they can be issued
credentials that they can use to authenticate at the authorization server:</t>
        <dl newline="false" spacing="normal">
          <dt>"confidential":</dt>
          <dd>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</dd>
          <dt>"public":</dt>
          <dd>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</dd>
        </dl>
        <t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>
        <t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>
        <t>This specification has been designed around the following client
profiles:</t>
        <dl newline="false" spacing="normal">
          <dt>"web application":</dt>
          <dd>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</dd>
          <dt>"browser-based application":</dt>
          <dd>
  A browser-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</dd>
          <dt>"native application":</dt>
          <dd>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</dd>
        </dl>
      </section>
      <section anchor="client-identifier" numbered="true" toc="default">
        <name>Client Identifier</name>
        <t>The authorization server issues the registered client a client
identifier - a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>
        <t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>
        <t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>
      </section>
      <section anchor="client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>
        <t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or "private_key_jwt"
<xref target="OpenID" format="default"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>
        <t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>
        <t>The client MUST NOT use more than one authentication method in each
request.</t>
        <section anchor="client-password" numbered="true" toc="default">
          <name>Client Password</name>
          <t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617" format="default"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>
          <t>For example (with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork>
          <t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>
          <dl newline="false" spacing="normal">
            <dt>"client_id":</dt>
            <dd>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier" format="default"/>.</dd>
            <dt>"client_secret":</dt>
            <dd>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</dd>
          </dl>
          <t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>
          <t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token" format="default"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork>
          <t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests using password authentication.</t>
          <t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>
        </section>
        <section anchor="other-authorization-methods" numbered="true" toc="default">
          <name>Other Authorization Methods</name>
          <t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>
        </section>
      </section>
      <section anchor="unregistered-clients" numbered="true" toc="default">
        <name>Unregistered Clients</name>
        <t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>
      </section>
    </section>
    <section anchor="protocol-endpoints" numbered="true" toc="default">
      <name>Protocol Endpoints</name>
      <t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>
      <ul spacing="normal">
        <li>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</li>
        <li>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</li>
      </ul>
      <t>As well as one client endpoint:</t>
      <ul spacing="normal">
        <li>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</li>
      </ul>
      <t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>
      <section anchor="authorization-endpoint" numbered="true" toc="default">
        <name>Authorization Endpoint</name>
        <t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>
        <t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version" format="default"/> when sending requests to the
authorization endpoint.</t>
        <t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616" format="default"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="response-type" numbered="true" toc="default">
          <name>Response Type</name>
          <t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>
          <dl newline="false" spacing="normal">
            <dt>"response_type":</dt>
            <dd>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request" format="default"/>, or a registered
extension value as described by <xref target="new-response-types" format="default"/>.</dd>
          </dl>
          <t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>
          <t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response" format="default"/>.</t>
        </section>
        <section anchor="redirection-endpoint" numbered="true" toc="default">
          <name>Redirection Endpoint</name>
          <t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>
          <t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986" format="default"/>, Section 6.2.1.</t>
          <t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986" format="default"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986" format="default"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>
          <section anchor="endpoint-request-confidentiality" numbered="true" toc="default">
            <name>Endpoint Request Confidentiality</name>
            <t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version" format="default"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>
            <t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>
          </section>
          <section anchor="registration-requirements" numbered="true" toc="default">
            <name>Registration Requirements</name>
            <t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>
            <t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>
            <t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>
            <t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors" format="default"/>.</t>
          </section>
          <section anchor="dynamic-configuration" numbered="true" toc="default">
            <name>Dynamic Configuration</name>
            <t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>
            <t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986" format="default"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986" format="default"/> Section 6.2.1.</t>
          </section>
          <section anchor="invalid-endpoint" numbered="true" toc="default">
            <name>Invalid Endpoint</name>
            <t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>
          </section>
          <section anchor="endpoint-content" numbered="true" toc="default">
            <name>Endpoint Content</name>
            <t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>
            <t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>
          </section>
        </section>
      </section>
      <section anchor="token-endpoint" numbered="true" toc="default">
        <name>Token Endpoint</name>
        <t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>
        <t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>
        <t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986" format="default"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>
        <t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version" format="default"/> when sending requests to the token endpoint.</t>
        <t>The client MUST use the HTTP "POST" method when making access token
requests.</t>
        <t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>
        <section anchor="token-endpoint-client-authentication" numbered="true" toc="default">
          <name>Client Authentication</name>
          <t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication" format="default"/> when making requests to the token endpoint.  Client
authentication is used for:</t>
          <ul spacing="normal">
            <li>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</li>
            <li>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</li>
            <li>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</li>
          </ul>
          <t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>
        </section>
      </section>
      <section anchor="access-token-scope" numbered="true" toc="default">
        <name>Access Token Scope</name>
        <t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>
        <t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>
        <artwork type="abnf" name="" align="left" alt=""><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork>
        <t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>
        <t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>
      </section>
    </section>
    <section anchor="obtaining-authorization" numbered="true" toc="default">
      <name>Obtaining Authorization</name>
      <t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>
      <section anchor="authorization-code-grant" numbered="true" toc="default">
        <name>Authorization Code Grant</name>
        <t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>
        <t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>
        <figure anchor="fig-authorization-code-flow">
          <name>Authorization Code Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-authorization-code-flow" format="default"/> includes the following steps:</t>
        <t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, PKCE code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>
        <t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>
        <t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>
        <t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>
        <t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>
        <section anchor="authorization-request" numbered="true" toc="default">
          <name>Authorization Request</name>
          <t>To begin the authorization request, the client builds the authorization
request URI by adding parameters to the authorization server's
authorization endpoint URI.</t>
          <t>Without a client secret, public clients would be susceptible to an authorization code
interception attack, where an attacker is able to intercept the authorization
response through various means and use the authorization code to obtain an access token.
To protect against this attack, as well as to protect against CSRF attacks,
the client first generates a unique secret per authorization request, which it can
later use along with the authorization code to prove that the application using the
authorization code is the same application that requested it. This practice is known
as "Proof-Key for Code Exchange", or PKCE, after the OAuth 2.0 extension (<xref target="RFC7636" format="default"/>)
where it was originally developed.</t>
          <section anchor="client-creates-a-pkce-code-verifier" numbered="true" toc="default">
            <name>Client Creates a PKCE Code Verifier</name>
            <t>The client first creates a PKCE code verifier, <tt>code_verifier</tt>, for each
Authorization Request, in the following manner:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork>
            <t>ABNF for <tt>code_verifier</tt> is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
            <t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL-safe string to use as the code verifier.</t>
          </section>
          <section anchor="client-creates-the-pkce-code-challenge" numbered="true" toc="default">
            <name>Client Creates the PKCE Code Challenge</name>
            <t>The client then creates a PKCE code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork>
            <t>If the client is capable of using <tt>S256</tt>, it MUST use <tt>S256</tt>, as
<tt>S256</tt> is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use <tt>plain</tt> only if they cannot support <tt>S256</tt> for some
technical reason and know via out-of-band configuration that the
server supports <tt>plain</tt>.</t>
            <t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>
            <t>ABNF for "code_challenge" is as follows.</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
          </section>
          <section anchor="client-initiates-the-authorization-request" numbered="true" toc="default">
            <name>Client Initiates the Authorization Request</name>
            <t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"response_type":</dt>
              <dd>
  REQUIRED.  Value MUST be set to <tt>code</tt>.</dd>
              <dt>"client_id":</dt>
              <dd>
  REQUIRED.  The client identifier as described in <xref target="client-identifier" format="default"/>.</dd>
              <dt>"code_challenge":</dt>
              <dd>
  REQUIRED.  Code challenge.</dd>
              <dt>"code_challenge_method":</dt>
              <dd>
  OPTIONAL, defaults to <tt>plain</tt> if not present in the request.  Code
    nverifier transformation method is <tt>S256</tt> or <tt>plain</tt>.</dd>
              <dt>"redirect_uri":</dt>
              <dd>
  OPTIONAL.  As described in <xref target="redirection-endpoint" format="default"/>.</dd>
              <dt>"scope":</dt>
              <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
              <dt>"state":</dt>
              <dd>
  OPTIONAL.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.</dd>
            </dl>
            <t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>
            <t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork>
            <t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>
            <t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>
          </section>
        </section>
        <section anchor="authorization-response" numbered="true" toc="default">
          <name>Authorization Response</name>
          <t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>
          <dl newline="false" spacing="normal">
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</dd>
            <dt>"state":</dt>
            <dd>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
          </dl>
          <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork>
          <t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>
          <t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>
          <t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>
          <t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>
          <section anchor="authorization-code-error-response" numbered="true" toc="default">
            <name>Error Response</name>
            <t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>
            <t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>
            <t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>
            <t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>
            <dl newline="false" spacing="normal">
              <dt>"error":</dt>
              <dd>
                <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the
following:

                </t>
                <dl newline="false" spacing="normal">
                  <dt>"invalid_request":</dt>
                  <dd>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</dd>
                  <dt>"unauthorized_client":</dt>
                  <dd>
        The client is not authorized to request an authorization
code using this method.</dd>
                  <dt>"access_denied":</dt>
                  <dd>
        The resource owner or authorization server denied the
request.</dd>
                  <dt>"unsupported_response_type":</dt>
                  <dd>
        The authorization server does not support obtaining an
authorization code using this method.</dd>
                  <dt>"invalid_scope":</dt>
                  <dd>
        The requested scope is invalid, unknown, or malformed.</dd>
                  <dt>"server_error":</dt>
                  <dd>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</dd>
                  <dt>"temporarily_unavailable":</dt>
                  <dd>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</dd>
                </dl>
                <t>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
              </dd>
              <dt>"error_description":</dt>
              <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
              <dt>"error_uri":</dt>
              <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
              <dt>"state":</dt>
              <dd>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</dd>
            </dl>
            <t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork>
          </section>
        </section>
        <section anchor="access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to "authorization_code".</dd>
            <dt>"code":</dt>
            <dd>
  REQUIRED.  The authorization code received from the
authorization server.</dd>
            <dt>"redirect_uri":</dt>
            <dd>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request" format="default"/>, and their
values MUST be identical.</dd>
            <dt>"client_id":</dt>
            <dd>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</dd>
            <dt>"code_verifier":</dt>
            <dd>
  REQUIRED.  Code verifier</dd>
          </dl>
          <t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork>
          <t>The authorization server MUST:</t>
          <ul spacing="normal">
            <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
            <li>authenticate the client if client authentication is included,</li>
            <li>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</li>
            <li>verify that the authorization code is valid,</li>
            <li>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</li>
            <li>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request" format="default"/>, and if included ensure that
their values are identical.</li>
          </ul>
        </section>
        <section anchor="authorization-code-access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="client-credentials-grant" numbered="true" toc="default">
        <name>Client Credentials Grant</name>
        <t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>
        <t>The client credentials grant type MUST only be used by confidential
clients.</t>
        <figure anchor="fig-client-credentials-flow">
          <name>Client Credentials Flow</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork>
        </figure>
        <t>The flow illustrated in <xref target="fig-client-credentials-flow" format="default"/> includes the following steps:</t>
        <t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>
        <t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>
        <section anchor="authorization-request-and-response" numbered="true" toc="default">
          <name>Authorization Request and Response</name>
          <t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>
        </section>
        <section anchor="client-credentials-access-token-request" numbered="true" toc="default">
          <name>Access Token Request</name>
          <t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
          <dl newline="false" spacing="normal">
            <dt>"grant_type":</dt>
            <dd>
  REQUIRED.  Value MUST be set to "client_credentials".</dd>
            <dt>"scope":</dt>
            <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.</dd>
          </dl>
          <t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
          <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork>
          <t>The authorization server MUST authenticate the client.</t>
        </section>
        <section anchor="access-token-response" numbered="true" toc="default">
          <name>Access Token Response</name>
          <t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response" format="default"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response" format="default"/>.</t>
          <t>An example successful response:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork>
        </section>
      </section>
      <section anchor="extension-grants" numbered="true" toc="default">
        <name>Extension Grants</name>
        <t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>
        <t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522" format="default"/>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork>
        <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      </section>
    </section>
    <section anchor="issuing-an-access-token" numbered="true" toc="default">
      <name>Issuing an Access Token</name>
      <t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <section anchor="access-token-successful-response" numbered="true" toc="default">
        <name>Successful Response</name>
        <t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>
        <dl newline="false" spacing="normal">
          <dt>"access_token":</dt>
          <dd>
  REQUIRED.  The access token issued by the authorization server.</dd>
          <dt>"token_type":</dt>
          <dd>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types" format="default"/>.  Value is case insensitive.</dd>
          <dt>"expires_in":</dt>
          <dd>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</dd>
          <dt>"refresh_token":</dt>
          <dd>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token" format="default"/>.</dd>
          <dt>"scope":</dt>
          <dd>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope" format="default"/>.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>
        <t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616" format="default"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616" format="default"/>
with a value of "no-cache".</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork>
        <t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>
      </section>
      <section anchor="access-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>
        <dl newline="false" spacing="normal">
          <dt>"error":</dt>
          <dd>
            <t>
  REQUIRED.  A single ASCII <xref target="USASCII" format="default"/> error code from the following:

            </t>
            <dl newline="false" spacing="normal">
              <dt>"invalid_request":</dt>
              <dd>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</dd>
              <dt>"invalid_client":</dt>
              <dd>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</dd>
              <dt>"invalid_grant":</dt>
              <dd>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</dd>
              <dt>"unauthorized_client":</dt>
              <dd>
        The authenticated client is not authorized to use this
authorization grant type.</dd>
              <dt>"unsupported_grant_type":</dt>
              <dd>
        The authorization grant type is not supported by the
authorization server.</dd>
              <dt>"invalid_scope":</dt>
              <dd>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</dd>
            </dl>
            <t>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
          </dd>
          <dt>"error_description":</dt>
          <dd>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII" format="default"/> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</dd>
          <dt>"error_uri":</dt>
          <dd>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</dd>
        </dl>
        <t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627" format="default"/>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>
        <t>For example:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork>
      </section>
    </section>
    <section anchor="refreshing-an-access-token" numbered="true" toc="default">
      <name>Refreshing an Access Token</name>
      <t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>
      <t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>
      <t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>
      <dl newline="false" spacing="normal">
        <dt>"grant_type":</dt>
        <dd>
  REQUIRED.  Value MUST be set to "refresh_token".</dd>
        <dt>"refresh_token":</dt>
        <dd>
  REQUIRED.  The refresh token issued to the client.</dd>
        <dt>"scope":</dt>
        <dd>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope" format="default"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</dd>
      </dl>
      <t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication" format="default"/>.</t>
      <t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork>
      <t>The authorization server MUST:</t>
      <ul spacing="normal">
        <li>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</li>
        <li>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</li>
        <li>validate the refresh token.</li>
      </ul>
      <t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>
      <ul spacing="normal">
        <li>
          <em>Sender-constrained refresh tokens:</em> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding" format="default"/> or <xref target="RFC8705" format="default"/>.</li>
        <li>
          <t><em>Refresh token rotation:</em> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  </t>
          <t>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
        </li>
      </ul>
      <t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response" format="default"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response" format="default"/>.</t>
      <t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>
      <t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>
      <ul spacing="normal">
        <li>password change</li>
        <li>logout at the authorization server</li>
      </ul>
      <t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>
    </section>
    <section anchor="accessing-protected-resources" numbered="true" toc="default">
      <name>Accessing Protected Resources</name>
      <t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>
      <t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617" format="default"/> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>
      <section anchor="access-token-types" numbered="true" toc="default">
        <name>Access Token Types</name>
        <t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>
        <t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
        <t>The above example is provided for illustration purposes only.</t>
        <t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>
      </section>
      <section anchor="bearer-tokens" numbered="true" toc="default">
        <name>Bearer Tokens</name>
        <t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>
        <t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>
        <section anchor="authenticated-requests" numbered="true" toc="default">
          <name>Authenticated Requests</name>
          <t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>
          <section anchor="authorization-request-header-field" numbered="true" toc="default">
            <name>Authorization Request Header Field</name>
            <t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617" format="default"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>
            <t>For example:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork>
            <t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617" format="default"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617" format="default"/> but is compatible
with the general authentication framework in HTTP 1.1 Authentication 
<xref target="RFC7235" format="default"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork>
            <t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>
          </section>
          <section anchor="form-encoded-body-parameter" numbered="true" toc="default">
            <name>Form-Encoded Body Parameter</name>
            <t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>
            <ul spacing="normal">
              <li>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</li>
              <li>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224" format="default"/>.</li>
              <li>The HTTP request entity-body is single-part.</li>
              <li>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII" format="default"/> characters.</li>
              <li>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</li>
            </ul>
            <t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>
            <t>For example, the client makes the following HTTP request using
transport-layer security:</t>
            <artwork name="" type="" align="left" alt=""><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork>
            <t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>
          </section>
        </section>
        <section anchor="the-www-authenticate-response-header-field" numbered="true" toc="default">
          <name>The WWW-Authenticate Response Header Field</name>
          <t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617" format="default"/>.</t>
          <t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>
          <t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617" format="default"/>.  The
"realm" attribute MUST NOT appear more than once.</t>
          <t>The "scope" attribute is defined in <xref target="access-token-scope" format="default"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>
          <t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages" format="default"/> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP" format="default"/>
OAuth 2.0 use cases, respectively:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork>
          <t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes" format="default"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>
          <t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>
          <t>For example, in response to a protected resource request without
authentication:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
          <t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork>
        </section>
      </section>
      <section anchor="bearer-token-error-response" numbered="true" toc="default">
        <name>Error Response</name>
        <t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry" format="default"/> for error values to be shared among
OAuth token authentication schemes.</t>
        <t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>
        <t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>
        <t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>
        <t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>
        <section anchor="bearer-token-error-codes" numbered="true" toc="default">
          <name>Error Codes</name>
          <t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>
          <dl newline="false" spacing="normal">
            <dt>"invalid_request":</dt>
            <dd>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</dd>
            <dt>"invalid_token":</dt>
            <dd>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</dd>
            <dt>"insufficient_scope":</dt>
            <dd>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</dd>
          </dl>
          <t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>
          <t>For example:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork>
        </section>
      </section>
      <section anchor="access-token-security-considerations" numbered="true" toc="default">
        <name>Access Token Security Considerations</name>
        <section anchor="security-threats" numbered="true" toc="default">
          <name>Security Threats</name>
          <t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63" format="default"/>.</t>
          <section anchor="token-manufacturemodification" numbered="true" toc="default">
            <name>Token manufacture/modification</name>
            <t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>
          </section>
          <section anchor="token-disclosure" numbered="true" toc="default">
            <name>Token disclosure</name>
            <t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>
          </section>
          <section anchor="token-redirect" numbered="true" toc="default">
            <name>Token redirect</name>
            <t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>
          </section>
          <section anchor="token-replay" numbered="true" toc="default">
            <name>Token replay</name>
            <t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>
          </section>
        </section>
        <section anchor="threat-mitigation" numbered="true" toc="default">
          <name>Threat Mitigation</name>
          <t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>
          <t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>
          <t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>
          <t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>
          <t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280" format="default"/>.</t>
          <t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265" format="default"/> for security
considerations about cookies.</t>
          <t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>
          <t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818" format="default"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>
        </section>
        <section anchor="summary-of-recommendations" numbered="true" toc="default">
          <name>Summary of Recommendations</name>
          <section anchor="safeguard-bearer-tokens" numbered="true" toc="default">
            <name>Safeguard bearer tokens</name>
            <t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>
          </section>
          <section anchor="validate-tls-certificate-chains" numbered="true" toc="default">
            <name>Validate TLS certificate chains</name>
            <t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>
          </section>
          <section anchor="always-use-tls-https" numbered="true" toc="default">
            <name>Always use TLS (https)</name>
            <t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>
          </section>
          <section anchor="dont-store-bearer-tokens-in-http-cookies" numbered="true" toc="default">
            <name>Don't store bearer tokens in HTTP cookies</name>
            <t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>
          </section>
          <section anchor="issue-short-lived-bearer-tokens" numbered="true" toc="default">
            <name>Issue short-lived bearer tokens</name>
            <t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>
          </section>
          <section anchor="issue-scoped-bearer-tokens" numbered="true" toc="default">
            <name>Issue scoped bearer tokens</name>
            <t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>
          </section>
          <section anchor="dont-pass-bearer-tokens-in-page-urls" numbered="true" toc="default">
            <name>Don't pass bearer tokens in page URLs</name>
            <t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>
          </section>
        </section>
        <section anchor="token-replay-prevention" numbered="true" toc="default">
          <name>Token Replay Prevention</name>
          <t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>
          <t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>.
The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
          <t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Section 4.11 of <xref target="I-D.ietf-oauth-security-topics" format="default"/>
for further security advice.</t>
        </section>
        <section anchor="access-token-privilege-restriction" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators" format="default"/>, respectively, to
determine the resource server they want to access.</t>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar" format="default"/> to
determine those resources and/or actions.</t>
        </section>
      </section>
    </section>
    <section anchor="extensibility" numbered="true" toc="default">
      <name>Extensibility</name>
      <section anchor="defining-access-token-types" numbered="true" toc="default">
        <name>Defining Access Token Types</name>
        <t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry" format="default"/>), or by using a unique absolute URI as its name.</t>
        <t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>
        <t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617" format="default"/>).  The token type
"example" is reserved for use in examples.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="defining-new-endpoint-parameters" numbered="true" toc="default">
        <name>Defining New Endpoint Parameters</name>
        <t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry" format="default"/>.</t>
        <t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
        <t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>
      </section>
      <section anchor="defining-new-authorization-grant-types" numbered="true" toc="default">
        <name>Defining New Authorization Grant Types</name>
        <t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry" format="default"/>.</t>
      </section>
      <section anchor="new-response-types" numbered="true" toc="default">
        <name>Defining New Authorization Endpoint Response Types</name>
        <t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry" format="default"/>.  Response type
names MUST conform to the response-type ABNF.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork>
        <t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>
        <t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>
      </section>
      <section anchor="defining-additional-error-codes" numbered="true" toc="default">
        <name>Defining Additional Error Codes</name>
        <t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response" format="default"/>), the token error response (<xref target="access-token-error-response" format="default"/>), or the
resource access error response (<xref target="bearer-token-error-response" format="default"/>), such error codes MAY be
defined.</t>
        <t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry" format="default"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>
        <t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork>
      </section>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in <xref target="client-types" format="default"/>: web application,
browser-based application, and native application.</t>
      <t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819" format="default"/> and <xref target="I-D.ietf-oauth-security-topics" format="default"/>.</t>
      <section anchor="security-client-authentication" numbered="true" toc="default">
        <name>Client Authentication</name>
        <t>Authorization servers SHOULD use client authentication if possible.</t>
        <t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705" format="default"/> or
<tt>private_key_jwt</tt> <xref target="OpenID" format="default"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>
        <t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>
        <t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity - for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>
        <t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>
        <t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>
        <section anchor="client-authentication-of-native-apps" numbered="true" toc="default">
          <name>Client Authentication of Native Apps</name>
          <t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <tt>client_id</tt> request parameter.</t>
          <t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types" format="default"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation" format="default"/>).</t>
        </section>
      </section>
      <section anchor="native-app-registration" numbered="true" toc="default">
        <name>Registration of Native App Clients</name>
        <t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591" format="default"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types" format="default"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>
        <t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>
        <t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme" format="default"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<tt>.</tt>)
SHOULD be rejected.</t>
        <t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <tt>com.example.app</tt>,
the owner of <tt>example.com</tt> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>
        <t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>
      </section>
      <section anchor="client-impersonation" numbered="true" toc="default">
        <name>Client Impersonation</name>
        <t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>
        <t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>
        <t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>
        <t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>
        <section anchor="native-app-client-impersonation" numbered="true" toc="default">
          <name>Impersonation of Native Apps</name>
          <t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id -
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>
          <t>Measures such as claimed <tt>https</tt> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>
        </section>
      </section>
      <section anchor="access-tokens" numbered="true" toc="default">
        <name>Access Tokens</name>
        <t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>
        <section anchor="access-token-privilege-restriction-1" numbered="true" toc="default">
          <name>Access Token Privilege Restriction</name>
          <t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>
          <t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>
          <t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <tt>scope</tt> or <tt>resource</tt> as specified in
<xref target="RFC8707" format="default"/>, respectively, to determine the
resource server they want to access.</t>
        </section>
        <section anchor="access-token-replay-prevention" numbered="true" toc="default">
          <name>Access Token Replay Prevention</name>
          <t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <tt>scope</tt> and <tt>authorization_details</tt> as specified in
<xref target="I-D.ietf-oauth-rar" format="default"/> to determine those resources and/or actions.</t>
          <t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705" format="default"/> is RECOMMENDED.</t>
        </section>
      </section>
      <section anchor="refresh-tokens" numbered="true" toc="default">
        <name>Refresh Tokens</name>
        <t>Authorization servers MAY issue refresh tokens to clients.</t>
        <t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in <xref target="tls-version" format="default"/> with server authentication as defined by
<xref target="RFC2818" format="default"/>.</t>
        <t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>
        <t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>
      </section>
      <section anchor="protecting-redirect-based-flows" numbered="true" toc="default">
        <name>Protecting Redirect-Based Flows</name>
        <t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>
        <t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>
        <t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819" format="default"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <tt>nonce</tt> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <tt>state</tt> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>
        <t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>
        <t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>
        <section anchor="loopback-redirect-considerations-in-native-apps" numbered="true" toc="default">
          <name>Loopback Redirect Considerations in Native Apps</name>
          <t>Loopback interface redirect URIs use the <tt>http</tt> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>
          <t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>
          <t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>
          <t>While redirect URIs using localhost (i.e.,
<tt>http://localhost:{port}/{path}</tt>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection" format="default"/>, the use of <tt>localhost</tt> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <tt>localhost</tt> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>
        </section>
      </section>
      <section anchor="authorization-codes" numbered="true" toc="default">
        <name>Authorization Codes</name>
        <t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>
        <t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>
        <t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>
        <t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <tt>nonce</tt> parameter and
ID Token Claim <xref target="OpenID" format="default"/> MAY be used as well. The PKCE challenge or
OpenID Connect <tt>nonce</tt> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>
        <t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>
        <t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <tt>S256</tt> is the only such method.</t>
        <t>Authorization servers MUST support PKCE.</t>
        <t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<tt>code_challenge_methods_supported</tt> in their AS metadata (<xref target="RFC8418" format="default"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>
      </section>
      <section anchor="request-confidentiality" numbered="true" toc="default">
        <name>Request Confidentiality</name>
        <t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>
        <t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>
      </section>
      <section anchor="ensuring-endpoint-authenticity" numbered="true" toc="default">
        <name>Ensuring Endpoint Authenticity</name>
        <t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818" format="default"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125" format="default"/> and in accordance with its
requirements for server identity authentication.</t>
      </section>
      <section anchor="credentials-guessing-attacks" numbered="true" toc="default">
        <name>Credentials-Guessing Attacks</name>
        <t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>
        <t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>
        <t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>
      </section>
      <section anchor="phishing-attacks" numbered="true" toc="default">
        <name>Phishing Attacks</name>
        <t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>
        <t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>
        <t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>
      </section>
      <section anchor="fake-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Fake External User-Agents in Native Apps</name>
        <t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>
        <t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>
        <t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>
        <t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>
      </section>
      <section anchor="malicious-external-user-agents-in-native-apps" numbered="true" toc="default">
        <name>Malicious External User-Agents in Native Apps</name>
        <t>If a malicious app is able to configure itself as the default handler
for <tt>https</tt> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>
        <t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <tt>http</tt> and <tt>https</tt> scheme URIs.</t>
      </section>
      <section anchor="csrf_countermeasures" numbered="true" toc="default">
        <name>Cross-Site Request Forgery</name>
        <t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>
        <t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <tt>state</tt> parameter to the authorization
server as described in <xref target="RFC6819" format="default"/>. The same protection is provided by
PKCE or the OpenID Connect <tt>nonce</tt> value.</t>
        <t>When using PKCE instead of <tt>state</tt> or <tt>nonce</tt> for CSRF protection, it is
important to note that:</t>
        <ul spacing="normal">
          <li>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<tt>state</tt> or <tt>nonce</tt> MUST be used for CSRF protection.</li>
          <li>If <tt>state</tt> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <tt>state</tt> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state" format="default"/>.</li>
        </ul>
        <t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414" format="default"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>
      </section>
      <section anchor="clickjacking" numbered="true" toc="default">
        <name>Clickjacking</name>
        <t>As described in Section 4.4.1.9 of <xref target="RFC6819" format="default"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>
        <t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819" format="default"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2" format="default"/> or greater.</t>
        <t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>
        <t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2" format="default"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <tt>frame-ancestors</tt>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <tt>script-src</tt>). A non-normative
example of such a policy is shown in the following listing:</t>
        <t><tt>
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</tt></t>
        <t>Because some user agents do not support <xref target="CSP-2" format="default"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819" format="default"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>
      </section>
      <section anchor="code-injection-and-input-validation" numbered="true" toc="default">
        <name>Code Injection and Input Validation</name>
        <t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>
        <t>The authorization server and client MUST sanitize (and validate when
possible) any value received - in particular, the value of the
"state" and "redirect_uri" parameters.</t>
      </section>
      <section anchor="open-redirectors" numbered="true" toc="default">
        <name>Open Redirectors</name>
        <t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>
        <section anchor="open_redirector_on_client" numbered="true" toc="default">
          <name>Client as Open Redirector</name>
          <t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>
          <t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir" format="default"/>.</t>
        </section>
        <section anchor="authorization-server-as-open-redirector" numbered="true" toc="default">
          <name>Authorization Server as Open Redirector</name>
          <t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>
          <t><xref target="authorization-code-error-response" format="default"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <tt>client_id</tt> and <tt>redirect_uri</tt>.</t>
          <t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591" format="default"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>
          <t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>
        </section>
      </section>
      <section anchor="authorization-server-mix-up-mitigation-in-native-apps" numbered="true" toc="default">
        <name>Authorization Server Mix-Up Mitigation in Native Apps</name>
        <t>(TODO: merge this with the regular mix-up section when it is brought in)</t>
        <t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>
        <t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>
        <t>The requirement of <xref target="native-app-registration" format="default"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>
      </section>
      <section anchor="native-apps-embedded-user-agents" numbered="true" toc="default">
        <name>Embedded User Agents in Native Apps</name>
        <t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>
        <t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>
        <t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>
        <t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>
        <t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>
      </section>
      <section anchor="other-recommendations" numbered="true" toc="default">
        <name>Other Recommendations</name>
        <t>Authorization servers SHOULD NOT allow clients to influence their
<tt>client_id</tt> or <tt>sub</tt> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>
      </section>
    </section>
    <section anchor="native-applications" numbered="true" toc="default">
      <name>Native Applications</name>
      <t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>
      <t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>
      <t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
      <t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See <xref target="native-apps-embedded-user-agents" format="default"/>
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>
      <t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>
      <t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>
      <section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" numbered="true" toc="default">
        <name>Using Inter-App URI Communication for OAuth in Native Apps</name>
        <t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>
        <t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>
        <t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app" format="default"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app" format="default"/>).</t>
      </section>
      <section anchor="authorization-request-native-app" numbered="true" toc="default">
        <name>Initiating the Authorization Request from a Native App</name>
        <t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant" format="default"/>
using a redirect URI capable of being received by the native app.</t>
        <t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app" format="default"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>
        <t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>
        <t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>
        <t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>
      </section>
      <section anchor="authorization-response-native-app" numbered="true" toc="default">
        <name>Receiving the Authorization Response in a Native App</name>
        <t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>
        <t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>
        <section anchor="private-use-uri-scheme" numbered="true" toc="default">
          <name>Private-Use URI Scheme Redirection</name>
          <t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <tt>com.example.app</tt>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>
          <t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>
          <t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595" format="default"/> for
private-use URI schemes.</t>
          <t>For example, an app that controls the domain name <tt>app.example.com</tt>
can use <tt>com.example.app</tt> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<tt>client1234.usercontent.example.net</tt>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <tt>myapp</tt>, however, would not meet this requirement, as
it is not based on a domain name.</t>
          <t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>
          <t>Following the requirements of Section 3.2 of <xref target="RFC3986" format="default"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<tt>/</tt>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork>
          <t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>
        </section>
        <section anchor="claimed-https-scheme-uri-redirection" numbered="true" toc="default">
          <name>Claimed "https" Scheme URI Redirection</name>
          <t>Some operating systems allow apps to claim <tt>https</tt> scheme <xref target="RFC7230" format="default"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>
          <t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork>
          <t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
<xref target="native-app-registration" format="default"/> that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>
          <t>App-claimed <tt>https</tt> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>
        </section>
        <section anchor="loopback-interface-redirection" numbered="true" toc="default">
          <name>Loopback Interface Redirection</name>
          <t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>
          <t>Loopback redirect URIs use the <tt>http</tt> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>
          <t>That is, <tt>http://127.0.0.1:{port}/{path}</tt> for IPv4, and
<tt>http://[::1]:{port}/{path}</tt> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork>
          <t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>
          <artwork name="" type="" align="left" alt=""><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork>
          <t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>
          <t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>
        </section>
      </section>
    </section>
    <section anchor="browser-based-apps" numbered="true" toc="default">
      <name>Browser-Based Apps</name>
      <t>Browser-based apps are are clients that run in a web browser, typically
written in JavaScript, also known as "single-page apps". These types of apps
have particular security considerations similar to native apps.</t>
      <t>TODO: Bring in the normative text of the browser-based apps BCP when it is finalized.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <section anchor="access-token-registry" numbered="true" toc="default">
        <name>OAuth Access Token Types Registry</name>
        <t>This specification establishes the OAuth Access Token Types registry.</t>
        <t>Access token types are registered with a Specification Required
(<xref target="RFC5226" format="default"/>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Additional Token Endpoint Response Parameters:</dt>
            <dd>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry" format="default"/>.</dd>
            <dt>HTTP Authentication Scheme(s):</dt>
            <dd>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Access Token Types registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Type name: Bearer</li>
            <li>Additional Token Endpoint Response Parameters: (none)</li>
            <li>HTTP Authentication Scheme(s): Bearer</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
      <section anchor="parameters-registry" numbered="true" toc="default">
        <name>OAuth Parameters Registry</name>
        <t>This specification establishes the OAuth Parameters registry.</t>
        <t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226" format="default"/>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-1" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Parameter name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Parameter usage location:</dt>
            <dd>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-1" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Parameters registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Parameter name: client_id</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: client_secret</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: response_type</li>
            <li>Parameter usage location: authorization request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: redirect_uri</li>
            <li>Parameter usage location: authorization request, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: scope</li>
            <li>Parameter usage location: authorization request, authorization
response, token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: state</li>
            <li>Parameter usage location: authorization request, authorization
response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: code</li>
            <li>Parameter usage location: authorization response, token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_description</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: error_uri</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: grant_type</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: access_token</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: token_type</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: expires_in</li>
            <li>Parameter usage location: authorization response, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: username</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: password</li>
            <li>Parameter usage location: token request</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
            <li>Parameter name: refresh_token</li>
            <li>Parameter usage location: token request, token response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="response-types-registry" numbered="true" toc="default">
        <name>OAuth Authorization Endpoint Response Types Registry</name>
        <t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>
        <t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226" format="default"/>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-2" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Response type name:</dt>
            <dd>
  The name requested (e.g., "example").</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-2" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>
          <ul spacing="normal">
            <li>Response type name: code</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): RFC 6749</li>
          </ul>
        </section>
      </section>
      <section anchor="error-registry" numbered="true" toc="default">
        <name>OAuth Extensions Error Registry</name>
        <t>This specification establishes the OAuth Extensions Error registry.</t>
        <t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226" format="default"/>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>
        <t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>
        <t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>
        <t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>
        <section anchor="registration-template-3" numbered="true" toc="default">
          <name>Registration Template</name>
          <dl newline="false" spacing="normal">
            <dt>Error name:</dt>
            <dd>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</dd>
            <dt>Error usage location:</dt>
            <dd>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response" format="default"/>), token error response (<xref target="access-token-error-response" format="default"/>), or resource
access error response (<xref target="bearer-token-error-response" format="default"/>).</dd>
            <dt>Related protocol extension:</dt>
            <dd>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</dd>
            <dt>Change controller:</dt>
            <dd>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</dd>
            <dt>Specification document(s):</dt>
            <dd>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</dd>
          </dl>
        </section>
        <section anchor="initial-registry-contents-3" numbered="true" toc="default">
          <name>Initial Registry Contents</name>
          <t>The OAuth Error registry's initial contents are:</t>
          <ul spacing="normal">
            <li>Error name: invalid_request</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: invalid_token</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
            <li>Error name: insufficient_scope</li>
            <li>Error usage location: Resource access error response</li>
            <li>Change controller: IETF</li>
            <li>Specification document(s): OAuth 2.1</li>
          </ul>
        </section>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC2119" target="https://www.rfc-editor.org/info/rfc2119" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <seriesInfo name="DOI" value="10.17487/RFC2119"/>
            <seriesInfo name="RFC" value="2119"/>
            <seriesInfo name="BCP" value="14"/>
            <author initials="S." surname="Bradner" fullname="S. Bradner">
              <organization/>
            </author>
            <date year="1997" month="March"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2616" target="https://www.rfc-editor.org/info/rfc2616" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
          <front>
            <title>Hypertext Transfer Protocol -- HTTP/1.1</title>
            <seriesInfo name="DOI" value="10.17487/RFC2616"/>
            <seriesInfo name="RFC" value="2616"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="J." surname="Gettys" fullname="J. Gettys">
              <organization/>
            </author>
            <author initials="J." surname="Mogul" fullname="J. Mogul">
              <organization/>
            </author>
            <author initials="H." surname="Frystyk" fullname="H. Frystyk">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as "HTTP/1.1", and is an update to RFC 2068.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2617" target="https://www.rfc-editor.org/info/rfc2617" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
          <front>
            <title>HTTP Authentication: Basic and Digest Access Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC2617"/>
            <seriesInfo name="RFC" value="2617"/>
            <author initials="J." surname="Franks" fullname="J. Franks">
              <organization/>
            </author>
            <author initials="P." surname="Hallam-Baker" fullname="P. Hallam-Baker">
              <organization/>
            </author>
            <author initials="J." surname="Hostetler" fullname="J. Hostetler">
              <organization/>
            </author>
            <author initials="S." surname="Lawrence" fullname="S. Lawrence">
              <organization/>
            </author>
            <author initials="P." surname="Leach" fullname="P. Leach">
              <organization/>
            </author>
            <author initials="A." surname="Luotonen" fullname="A. Luotonen">
              <organization/>
            </author>
            <author initials="L." surname="Stewart" fullname="L. Stewart">
              <organization/>
            </author>
            <date year="1999" month="June"/>
            <abstract>
              <t>This document provides the specification for HTTP's authentication framework, the original Basic authentication scheme and a scheme based on cryptographic hashes, referred to as "Digest Access Authentication". [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC2818" target="https://www.rfc-editor.org/info/rfc2818" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
          <front>
            <title>HTTP Over TLS</title>
            <seriesInfo name="DOI" value="10.17487/RFC2818"/>
            <seriesInfo name="RFC" value="2818"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2000" month="May"/>
            <abstract>
              <t>This memo describes how to use Transport Layer Security (TLS) to secure Hypertext Transfer Protocol (HTTP) connections over the Internet.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3629" target="https://www.rfc-editor.org/info/rfc3629" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
          <front>
            <title>UTF-8, a transformation format of ISO 10646</title>
            <seriesInfo name="DOI" value="10.17487/RFC3629"/>
            <seriesInfo name="RFC" value="3629"/>
            <seriesInfo name="STD" value="63"/>
            <author initials="F." surname="Yergeau" fullname="F. Yergeau">
              <organization/>
            </author>
            <date year="2003" month="November"/>
            <abstract>
              <t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems.  The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo.  UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values.  This memo obsoletes and replaces RFC 2279.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC3986" target="https://www.rfc-editor.org/info/rfc3986" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <seriesInfo name="DOI" value="10.17487/RFC3986"/>
            <seriesInfo name="RFC" value="3986"/>
            <seriesInfo name="STD" value="66"/>
            <author initials="T." surname="Berners-Lee" fullname="T. Berners-Lee">
              <organization/>
            </author>
            <author initials="R." surname="Fielding" fullname="R. Fielding">
              <organization/>
            </author>
            <author initials="L." surname="Masinter" fullname="L. Masinter">
              <organization/>
            </author>
            <date year="2005" month="January"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4627" target="https://www.rfc-editor.org/info/rfc4627" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
          <front>
            <title>The application/json Media Type for JavaScript Object Notation (JSON)</title>
            <seriesInfo name="DOI" value="10.17487/RFC4627"/>
            <seriesInfo name="RFC" value="4627"/>
            <author initials="D." surname="Crockford" fullname="D. Crockford">
              <organization/>
            </author>
            <date year="2006" month="July"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC4949" target="https://www.rfc-editor.org/info/rfc4949" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <seriesInfo name="DOI" value="10.17487/RFC4949"/>
            <seriesInfo name="RFC" value="4949"/>
            <seriesInfo name="FYI" value="36"/>
            <author initials="R." surname="Shirey" fullname="R. Shirey">
              <organization/>
            </author>
            <date year="2007" month="August"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5226" target="https://www.rfc-editor.org/info/rfc5226" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
          <front>
            <title>Guidelines for Writing an IANA Considerations Section in RFCs</title>
            <seriesInfo name="DOI" value="10.17487/RFC5226"/>
            <seriesInfo name="RFC" value="5226"/>
            <author initials="T." surname="Narten" fullname="T. Narten">
              <organization/>
            </author>
            <author initials="H." surname="Alvestrand" fullname="H. Alvestrand">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>Many protocols make use of identifiers consisting of constants and other well-known values.  Even after a protocol has been defined and deployment has begun, new values may need to be assigned (e.g., for a new option type in DHCP, or a new encryption or authentication transform for IPsec).  To ensure that such quantities have consistent values and interpretations across all implementations, their assignment must be administered by a central authority.  For IETF protocols, that role is provided by the Internet Assigned Numbers Authority (IANA).</t>
              <t>In order for IANA to manage a given namespace prudently, it needs guidelines describing the conditions under which new values can be assigned or when modifications to existing values can be made.  If IANA is expected to play a role in the management of a namespace, IANA must be given clear and concise instructions describing that role.  This document discusses issues that should be considered in formulating a policy for assigning values to a namespace and provides guidelines for authors on the specific text that must be included in documents that place demands on IANA.</t>
              <t>This document obsoletes RFC 2434.  This document specifies an Internet Best  Current Practices for the Internet Community, and requests discussion and  suggestions for improvements.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5234" target="https://www.rfc-editor.org/info/rfc5234" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
          <front>
            <title>Augmented BNF for Syntax Specifications: ABNF</title>
            <seriesInfo name="DOI" value="10.17487/RFC5234"/>
            <seriesInfo name="RFC" value="5234"/>
            <seriesInfo name="STD" value="68"/>
            <author initials="D." surname="Crocker" fullname="D. Crocker" role="editor">
              <organization/>
            </author>
            <author initials="P." surname="Overell" fullname="P. Overell">
              <organization/>
            </author>
            <date year="2008" month="January"/>
            <abstract>
              <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6125" target="https://www.rfc-editor.org/info/rfc6125" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
          <front>
            <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC6125"/>
            <seriesInfo name="RFC" value="6125"/>
            <author initials="P." surname="Saint-Andre" fullname="P. Saint-Andre">
              <organization/>
            </author>
            <author initials="J." surname="Hodges" fullname="J. Hodges">
              <organization/>
            </author>
            <date year="2011" month="March"/>
            <abstract>
              <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6749" target="https://www.rfc-editor.org/info/rfc6749" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework</title>
            <seriesInfo name="DOI" value="10.17487/RFC6749"/>
            <seriesInfo name="RFC" value="6749"/>
            <author initials="D." surname="Hardt" fullname="D. Hardt" role="editor">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.  This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6750" target="https://www.rfc-editor.org/info/rfc6750" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
          <front>
            <title>The OAuth 2.0 Authorization Framework: Bearer Token Usage</title>
            <seriesInfo name="DOI" value="10.17487/RFC6750"/>
            <seriesInfo name="RFC" value="6750"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="D." surname="Hardt" fullname="D. Hardt">
              <organization/>
            </author>
            <date year="2012" month="October"/>
            <abstract>
              <t>This specification describes how to use bearer tokens in HTTP requests to access OAuth 2.0 protected resources.  Any party in possession of a bearer token (a "bearer") can use it to get access to the associated resources (without demonstrating possession of a cryptographic key).  To prevent misuse, bearer tokens need to be protected from disclosure in storage and in transport.   [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8446" target="https://www.rfc-editor.org/info/rfc8446" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
          <front>
            <title>The Transport Layer Security (TLS) Protocol Version 1.3</title>
            <seriesInfo name="DOI" value="10.17487/RFC8446"/>
            <seriesInfo name="RFC" value="8446"/>
            <author initials="E." surname="Rescorla" fullname="E. Rescorla">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t>
              <t>This document updates RFCs 5705 and 6066, and obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC5280" target="https://www.rfc-editor.org/info/rfc5280" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
          <front>
            <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
            <seriesInfo name="DOI" value="10.17487/RFC5280"/>
            <seriesInfo name="RFC" value="5280"/>
            <author initials="D." surname="Cooper" fullname="D. Cooper">
              <organization/>
            </author>
            <author initials="S." surname="Santesson" fullname="S. Santesson">
              <organization/>
            </author>
            <author initials="S." surname="Farrell" fullname="S. Farrell">
              <organization/>
            </author>
            <author initials="S." surname="Boeyen" fullname="S. Boeyen">
              <organization/>
            </author>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <author initials="W." surname="Polk" fullname="W. Polk">
              <organization/>
            </author>
            <date year="2008" month="May"/>
            <abstract>
              <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7595" target="https://www.rfc-editor.org/info/rfc7595" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
          <front>
            <title>Guidelines and Registration Procedures for URI Schemes</title>
            <seriesInfo name="DOI" value="10.17487/RFC7595"/>
            <seriesInfo name="RFC" value="7595"/>
            <seriesInfo name="BCP" value="35"/>
            <author initials="D." surname="Thaler" fullname="D. Thaler" role="editor">
              <organization/>
            </author>
            <author initials="T." surname="Hansen" fullname="T. Hansen">
              <organization/>
            </author>
            <author initials="T." surname="Hardie" fullname="T. Hardie">
              <organization/>
            </author>
            <date year="2015" month="June"/>
            <abstract>
              <t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8252" target="https://www.rfc-editor.org/info/rfc8252" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
          <front>
            <title>OAuth 2.0 for Native Apps</title>
            <seriesInfo name="DOI" value="10.17487/RFC8252"/>
            <seriesInfo name="RFC" value="8252"/>
            <seriesInfo name="BCP" value="212"/>
            <author initials="W." surname="Denniss" fullname="W. Denniss">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2017" month="October"/>
            <abstract>
              <t>OAuth 2.0 authorization requests from native apps should only be made through external user-agents, primarily the user's browser.  This specification details the security and usability reasons why this is the case and how native apps and authorization servers can implement this best practice.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-security-topics" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-security-topics-14.txt">
          <front>
            <title>OAuth 2.0 Security Best Current Practice</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-security-topics-14"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="A" surname="Labunets" fullname="Andrey Labunets">
              <organization/>
            </author>
            <author initials="D" surname="Fett" fullname="Daniel Fett">
              <organization/>
            </author>
            <date month="February" day="10" year="2020"/>
            <abstract>
              <t>This document describes best current security practice for OAuth 2.0. It updates and extends the OAuth 2.0 Security Threat Model to incorporate practical experiences gathered since OAuth 2.0 was published and covers new threats relevant due to the broader application of OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="USASCII">
          <front>
            <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
            <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
              <organization/>
            </author>
            <date year="1986"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-html401-19991224" target="http://www.w3.org/TR/1999/REC-html401-19991224" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
          <front>
            <title>HTML 4.01 Specification</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-html401-19991224"/>
            <author initials="D." surname="Raggett" fullname="Dave Raggett">
              <organization/>
            </author>
            <author initials="A." surname="Hors" fullname="Arnaud Le Hors">
              <organization/>
            </author>
            <author initials="I." surname="Jacobs" fullname="Ian Jacobs">
              <organization/>
            </author>
            <date month="December" day="24" year="1999"/>
          </front>
        </reference>
        <reference anchor="W3C.REC-xml-20081126" target="http://www.w3.org/TR/2008/REC-xml-20081126" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
          <front>
            <title>Extensible Markup Language (XML) 1.0 (Fifth Edition)</title>
            <seriesInfo name="World Wide Web Consortium Recommendation" value="REC-xml-20081126"/>
            <author initials="T." surname="Bray" fullname="Tim Bray">
              <organization/>
            </author>
            <author initials="J." surname="Paoli" fullname="Jean Paoli">
              <organization/>
            </author>
            <author initials="M." surname="Sperberg-McQueen" fullname="Michael Sperberg-McQueen">
              <organization/>
            </author>
            <author initials="E." surname="Maler" fullname="Eve Maler">
              <organization/>
            </author>
            <author initials="F." surname="Yergeau" fullname="FranÃ§ois Yergeau">
              <organization/>
            </author>
            <date month="November" day="26" year="2008"/>
          </front>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC7522" target="https://www.rfc-editor.org/info/rfc7522" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
          <front>
            <title>Security Assertion Markup Language (SAML) 2.0 Profile for OAuth 2.0 Client Authentication and Authorization Grants</title>
            <seriesInfo name="DOI" value="10.17487/RFC7522"/>
            <seriesInfo name="RFC" value="7522"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore" fullname="C. Mortimore">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <date year="2015" month="May"/>
            <abstract>
              <t>This specification defines the use of a Security Assertion Markup Language (SAML) 2.0 Bearer Assertion as a means for requesting an OAuth 2.0 access token as well as for client authentication.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6819" target="https://www.rfc-editor.org/info/rfc6819" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
          <front>
            <title>OAuth 2.0 Threat Model and Security Considerations</title>
            <seriesInfo name="DOI" value="10.17487/RFC6819"/>
            <seriesInfo name="RFC" value="6819"/>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="McGloin" fullname="M. McGloin">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2013" month="January"/>
            <abstract>
              <t>This document gives additional security considerations for OAuth, beyond those in the OAuth 2.0 specification, based on a comprehensive threat model for the OAuth 2.0 protocol.  This document is not an  Internet Standards Track specification; it is published for  informational purposes.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC6265" target="https://www.rfc-editor.org/info/rfc6265" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
          <front>
            <title>HTTP State Management Mechanism</title>
            <seriesInfo name="DOI" value="10.17487/RFC6265"/>
            <seriesInfo name="RFC" value="6265"/>
            <author initials="A." surname="Barth" fullname="A. Barth">
              <organization/>
            </author>
            <date year="2011" month="April"/>
            <abstract>
              <t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7591" target="https://www.rfc-editor.org/info/rfc7591" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
          <front>
            <title>OAuth 2.0 Dynamic Client Registration Protocol</title>
            <seriesInfo name="DOI" value="10.17487/RFC7591"/>
            <seriesInfo name="RFC" value="7591"/>
            <author initials="J." surname="Richer" fullname="J. Richer" role="editor">
              <organization/>
            </author>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Machulak" fullname="M. Machulak">
              <organization/>
            </author>
            <author initials="P." surname="Hunt" fullname="P. Hunt">
              <organization/>
            </author>
            <date year="2015" month="July"/>
            <abstract>
              <t>This specification defines mechanisms for dynamically registering OAuth 2.0 clients with authorization servers.  Registration requests send a set of desired client metadata values to the authorization server.  The resulting registration responses return a client identifier to use at the authorization server and the client metadata values registered for the client.  The client can then use this registration information to communicate with the authorization server using the OAuth 2.0 protocol.  This specification also defines a set of common client metadata fields and values for clients to use during registration.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8707" target="https://www.rfc-editor.org/info/rfc8707" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="DOI" value="10.17487/RFC8707"/>
            <seriesInfo name="RFC" value="8707"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="H." surname="Tschofenig" fullname="H. Tschofenig">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8414" target="https://www.rfc-editor.org/info/rfc8414" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
          <front>
            <title>OAuth 2.0 Authorization Server Metadata</title>
            <seriesInfo name="DOI" value="10.17487/RFC8414"/>
            <seriesInfo name="RFC" value="8414"/>
            <author initials="M." surname="Jones" fullname="M. Jones">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <date year="2018" month="June"/>
            <abstract>
              <t>This specification defines a metadata format that an OAuth 2.0 client can use to obtain the information needed to interact with an OAuth 2.0 authorization server, including its endpoint locations and authorization server capabilities.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8418" target="https://www.rfc-editor.org/info/rfc8418" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
          <front>
            <title>Use of the Elliptic Curve Diffie-Hellman Key Agreement Algorithm with X25519 and X448 in the Cryptographic Message Syntax (CMS)</title>
            <seriesInfo name="DOI" value="10.17487/RFC8418"/>
            <seriesInfo name="RFC" value="8418"/>
            <author initials="R." surname="Housley" fullname="R. Housley">
              <organization/>
            </author>
            <date year="2018" month="August"/>
            <abstract>
              <t>This document describes the conventions for using the Elliptic Curve Diffie-Hellman (ECDH) key agreement algorithm with curve25519 and curve448 in the Cryptographic Message Syntax (CMS).</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC8705" target="https://www.rfc-editor.org/info/rfc8705" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
          <front>
            <title>OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens</title>
            <seriesInfo name="DOI" value="10.17487/RFC8705"/>
            <seriesInfo name="RFC" value="8705"/>
            <author initials="B." surname="Campbell" fullname="B. Campbell">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura">
              <organization/>
            </author>
            <author initials="T." surname="Lodderstedt" fullname="T. Lodderstedt">
              <organization/>
            </author>
            <date year="2020" month="February"/>
            <abstract>
              <t>This document describes OAuth client authentication and certificate-bound access and refresh tokens using mutual Transport Layer Security (TLS) authentication with X.509 certificates.  OAuth clients are provided a mechanism for authentication to the authorization server using mutual TLS, based on either self-signed certificates or public key infrastructure (PKI). OAuth authorization servers are provided a mechanism for binding access tokens to a client's mutual-TLS certificate, and OAuth protected resources are provided a method for ensuring that such an access token presented to it was issued to the client presenting the token.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7230" target="https://www.rfc-editor.org/info/rfc7230" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
            <seriesInfo name="DOI" value="10.17487/RFC7230"/>
            <seriesInfo name="RFC" value="7230"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7235" target="https://www.rfc-editor.org/info/rfc7235" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7235.xml">
          <front>
            <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
            <seriesInfo name="DOI" value="10.17487/RFC7235"/>
            <seriesInfo name="RFC" value="7235"/>
            <author initials="R." surname="Fielding" fullname="R. Fielding" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Reschke" fullname="J. Reschke" role="editor">
              <organization/>
            </author>
            <date year="2014" month="June"/>
            <abstract>
              <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="RFC7636" target="https://www.rfc-editor.org/info/rfc7636" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
          <front>
            <title>Proof Key for Code Exchange by OAuth Public Clients</title>
            <seriesInfo name="DOI" value="10.17487/RFC7636"/>
            <seriesInfo name="RFC" value="7636"/>
            <author initials="N." surname="Sakimura" fullname="N. Sakimura" role="editor">
              <organization/>
            </author>
            <author initials="J." surname="Bradley" fullname="J. Bradley">
              <organization/>
            </author>
            <author initials="N." surname="Agarwal" fullname="N. Agarwal">
              <organization/>
            </author>
            <date year="2015" month="September"/>
            <abstract>
              <t>OAuth 2.0 public clients utilizing the Authorization Code Grant are susceptible to the authorization code interception attack.  This specification describes the attack as well as a technique to mitigate against the threat through the use of Proof Key for Code Exchange (PKCE, pronounced "pixy").</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-rar" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-rar-01.txt">
          <front>
            <title>OAuth 2.0 Rich Authorization Requests</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-rar-01"/>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="J" surname="Richer" fullname="Justin Richer">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <date month="February" day="19" year="2020"/>
            <abstract>
              <t>This document specifies a new parameter "authorization_details" that is used to carry fine grained authorization data in the OAuth authorization request.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-resource-indicators" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-resource-indicators-08.txt">
          <front>
            <title>Resource Indicators for OAuth 2.0</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-resource-indicators-08"/>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="H" surname="Tschofenig" fullname="Hannes Tschofenig">
              <organization/>
            </author>
            <date month="September" day="11" year="2019"/>
            <abstract>
              <t>This document specifies an extension to the OAuth 2.0 Authorization Framework defining request parameters that enable a client to explicitly signal to an authorization server about the identity of the protected resource(s) to which it is requesting access.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.bradley-oauth-jwt-encoded-state" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml" target="http://www.ietf.org/internet-drafts/draft-bradley-oauth-jwt-encoded-state-09.txt">
          <front>
            <title>Encoding claims in the OAuth 2 state parameter using a JWT</title>
            <seriesInfo name="Internet-Draft" value="draft-bradley-oauth-jwt-encoded-state-09"/>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="T" surname="Lodderstedt" fullname="Torsten Lodderstedt">
              <organization/>
            </author>
            <author initials="H" surname="Zandbelt" fullname="Hans Zandbelt">
              <organization/>
            </author>
            <date month="November" day="4" year="2018"/>
            <abstract>
              <t>This draft provides a method for a client to encode one or more elements encoding information about the session into the OAuth 2 "state" parameter.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-token-binding" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-token-binding-08.txt">
          <front>
            <title>OAuth 2.0 Token Binding</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-token-binding-08"/>
            <author initials="M" surname="Jones" fullname="Michael Jones">
              <organization/>
            </author>
            <author initials="B" surname="Campbell" fullname="Brian Campbell">
              <organization/>
            </author>
            <author initials="J" surname="Bradley" fullname="John Bradley">
              <organization/>
            </author>
            <author initials="W" surname="Denniss" fullname="William Denniss">
              <organization/>
            </author>
            <date month="October" day="19" year="2018"/>
            <abstract>
              <t>This specification enables OAuth 2.0 implementations to apply Token Binding to Access Tokens, Authorization Codes, Refresh Tokens, JWT Authorization Grants, and JWT Client Authentication.  This cryptographically binds these tokens to a client's Token Binding key pair, possession of which is proven on the TLS connections over which the tokens are intended to be used.  This use of Token Binding protects these tokens from man-in-the-middle and token export and replay attacks.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="I-D.ietf-oauth-browser-based-apps" xml:base="https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-browser-based-apps.xml" target="http://www.ietf.org/internet-drafts/draft-ietf-oauth-browser-based-apps-05.txt">
          <front>
            <title>OAuth 2.0 for Browser-Based Apps</title>
            <seriesInfo name="Internet-Draft" value="draft-ietf-oauth-browser-based-apps-05"/>
            <author initials="A" surname="Parecki" fullname="Aaron Parecki">
              <organization/>
            </author>
            <author initials="D" surname="Waite" fullname="David Waite">
              <organization/>
            </author>
            <date month="February" day="28" year="2020"/>
            <abstract>
              <t>This specification details the security considerations and best practices that must be taken into account when developing browser- based applications that use OAuth 2.0.</t>
            </abstract>
          </front>
        </reference>
        <reference anchor="OpenID" target="https://openiD.net/specs/openiD-connect-core-1_0.html">
          <front>
            <title>OpenID Connect Core 1.0</title>
            <author initials="N." surname="Sakimora">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <date year="2014" month="November"/>
          </front>
        </reference>
        <reference anchor="OMAP" target="https://www.oatc.us/Standards/Download-Standards">
          <front>
            <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
            <author initials="J." surname="Huff">
              <organization/>
            </author>
            <author initials="D." surname="Schlacht">
              <organization/>
            </author>
            <author initials="A." surname="Nadalin">
              <organization/>
            </author>
            <author initials="J." surname="Simmons">
              <organization/>
            </author>
            <author initials="P." surname="Rosenberg">
              <organization/>
            </author>
            <author initials="P." surname="Madsen">
              <organization/>
            </author>
            <author initials="T." surname="Ace">
              <organization/>
            </author>
            <author initials="C." surname="Rickelton-Abdi">
              <organization/>
            </author>
            <author initials="B." surname="Boyer">
              <organization/>
            </author>
            <date year="2012" month="April"/>
          </front>
        </reference>
        <reference anchor="NIST800-63" target="http://csrc.nist.gov/publications/">
          <front>
            <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
            <author initials="W." surname="Burr">
              <organization/>
            </author>
            <author initials="D." surname="Dodson">
              <organization/>
            </author>
            <author initials="E." surname="Newton">
              <organization/>
            </author>
            <author initials="R." surname="Perlner">
              <organization/>
            </author>
            <author initials="T." surname="Polk">
              <organization/>
            </author>
            <author initials="S." surname="Gupta">
              <organization/>
            </author>
            <author initials="E." surname="Nabbus">
              <organization/>
            </author>
            <date year="2011" month="December"/>
          </front>
        </reference>
        <reference anchor="OpenID.Messages" target="http://openid.net/specs/openid-connect-messages-1_0.html">
          <front>
            <title>OpenID Connect Messages 1.0</title>
            <author initials="N." surname="Sakimura">
              <organization/>
            </author>
            <author initials="J." surname="Bradley">
              <organization/>
            </author>
            <author initials="M." surname="Jones">
              <organization/>
            </author>
            <author initials="B." surname="de Medeiros">
              <organization/>
            </author>
            <author initials="C." surname="Mortimore">
              <organization/>
            </author>
            <author initials="E." surname="Jay">
              <organization/>
            </author>
            <date year="2012" month="June"/>
          </front>
        </reference>
        <reference anchor="owasp_redir" target="https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html">
          <front>
            <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
            <author>
              <organization/>
            </author>
            <date year="2020"/>
          </front>
        </reference>
        <reference anchor="CSP-2" target="https://www.w3.org/TR/CSP2">
          <front>
            <title>Content Security Policy Level 2</title>
            <author>
              <organization/>
            </author>
            <date year="2016" month="December"/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="augmented-backus-naur-form-abnf-syntax" numbered="true" toc="default">
      <name>Augmented Backus-Naur Form (ABNF) Syntax</name>
      <t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234" format="default"/>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126" format="default"/>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>
      <t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986" format="default"/>.</t>
      <t>Some of the definitions that follow use these common definitions:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork>
      <t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126" format="default"/>, but omitting the Carriage
Return and Linefeed characters.)</t>
      <section anchor="clientid-syntax" numbered="true" toc="default">
        <name>"client_id" Syntax</name>
        <t>The "client_id" element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-id     = *VSCHAR
]]></artwork>
      </section>
      <section anchor="clientsecret-syntax" numbered="true" toc="default">
        <name>"client_secret" Syntax</name>
        <t>The "client_secret" element is defined in <xref target="client-password" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
client-secret = *VSCHAR
]]></artwork>
      </section>
      <section anchor="responsetype-syntax" numbered="true" toc="default">
        <name>"response_type" Syntax</name>
        <t>The "response_type" element is defined in <xref target="response-type" format="default"/> and <xref target="new-response-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="scope-syntax" numbered="true" toc="default">
        <name>"scope" Syntax</name>
        <t>The "scope" element is defined in <xref target="access-token-scope" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork>
      </section>
      <section anchor="state-syntax" numbered="true" toc="default">
        <name>"state" Syntax</name>
        <t>The "state" element is defined in <xref target="authorization-request" format="default"/>, <xref target="authorization-response" format="default"/>, and <xref target="authorization-code-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 state      = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="redirecturi-syntax" numbered="true" toc="default">
        <name>"redirect_uri" Syntax</name>
        <t>The "redirect_uri" element is defined in <xref target="authorization-request" format="default"/>, and <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 redirect-uri      = URI-reference
]]></artwork>
      </section>
      <section anchor="error-syntax" numbered="true" toc="default">
        <name>"error" Syntax</name>
        <t>The "error" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
7.2, and 8.5:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error             = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="errordescription-syntax" numbered="true" toc="default">
        <name>"error_description" Syntax</name>
        <t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>,
<xref target="access-token-error-response" format="default"/>, and <xref target="bearer-token-error-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork>
      </section>
      <section anchor="erroruri-syntax" numbered="true" toc="default">
        <name>"error_uri" Syntax</name>
        <t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response" format="default"/>, <xref target="access-token-error-response" format="default"/>,
and 7.2:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 error-uri         = URI-reference
]]></artwork>
      </section>
      <section anchor="granttype-syntax" numbered="true" toc="default">
        <name>"grant_type" Syntax</name>
        <t>The "grant_type" element is defined in Sections <xref target="access-token-request" format="default"/>, <xref target="access-token-response" format="default"/>, <xref target="client-credentials-access-token-request" format="default"/>,
<xref target="extension-grants" format="default"/>, and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="code-syntax" numbered="true" toc="default">
        <name>"code" Syntax</name>
        <t>The "code" element is defined in <xref target="access-token-request" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 code       = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="accesstoken-syntax" numbered="true" toc="default">
        <name>"access_token" Syntax</name>
        <t>The "access_token" element is defined in <xref target="access-token-response" format="default"/> and <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 access-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="tokentype-syntax" numbered="true" toc="default">
        <name>"token_type" Syntax</name>
        <t>The "token_type" element is defined in <xref target="access-token-successful-response" format="default"/>, and <xref target="defining-access-token-types" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="expiresin-syntax" numbered="true" toc="default">
        <name>"expires_in" Syntax</name>
        <t>The "expires_in" element is defined in <xref target="access-token-successful-response" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 expires-in = 1*DIGIT
]]></artwork>
      </section>
      <section anchor="refreshtoken-syntax" numbered="true" toc="default">
        <name>"refresh_token" Syntax</name>
        <t>The "refresh_token" element is defined in <xref target="access-token-successful-response" format="default"/> and <xref target="refreshing-an-access-token" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork>
      </section>
      <section anchor="endpoint-parameter-syntax" numbered="true" toc="default">
        <name>Endpoint Parameter Syntax</name>
        <t>The syntax for new endpoint parameters is defined in <xref target="defining-new-endpoint-parameters" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork>
      </section>
      <section anchor="codeverifier-syntax" numbered="true" toc="default">
        <name>"code_verifier" Syntax</name>
        <t>ABNF for "code_verifier" is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
      <section anchor="codechallenge-syntax" numbered="true" toc="default">
        <name>"code_challenge" Syntax</name>
        <t>ABNF for "code_challenge" is as follows.</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork>
      </section>
    </section>
    <section anchor="use-of-applicationx-www-form-urlencoded-media-type" numbered="true" toc="default">
      <name>Use of application/x-www-form-urlencoded Media Type</name>
      <t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224" format="default"/> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>
      <t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629" format="default"/> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224" format="default"/>.</t>
      <t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>
      <t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork>
      <t>and then represented in the payload as:</t>
      <artwork name="" type="" align="left" alt=""><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork>
    </section>
    <section anchor="acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>TBD</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAJLYY14AA+x9e3cbx5Xn//Up+tAnMZkBYD70sjzaXeplK2M9IsrxJjlZ
uQk0ybYANAbdEMU42s++91l1q7oapGxPZmc3OjOxBKCr63Hrvu/vjsdj19Xd
vLpfvLmoipfHm+6iOJwcFPiXZl3/rezqZlk8XZeL6rJZv3OzZrqEv98vZuvy
rBuvynU1fVePmxJ+P35/+PZgvL/vZmUHvzjcP9wf7x+N9287V6/W94tuvWm7
w/39L/cPHTxX3uf3uXeX94tny65aL6tu/BjHddOyu1+03cxNm2VbLdtNS49X
8txJNd2s6+7Kwfezenl+v9i047Kd1rVb1fddUXTN9H5xVbXw17ZZd+vqrPX/
vlqEf7qS1omPjIt6CZ8+nhTflOtZB58URbM+L5eyCfDW+nz5bDl5uT6nL3kf
HtfTd+aJalHWc9gd+HRygZ/+j3P8ZDJtFvT9tNksu/XV/eK7Zd1Vs+Kkg71q
w+uPJ8Ur3lPzjuNyDYdgP5fXlPjF/5BD8O+IZ/3yXVfSx7Bj94uLrlu197/4
gp5MH7xucm8mxbfNbFatW/i2MxN80+BHy963Ms2Ov/4f8/D1BM46M9k/VW1/
Nl9X60W5hMNeNvCXrn5f4Xm9fvro8ODgS/3rnYM74a939a/3Du7JX4/uHOpv
j768p7+9dedQf3vry1v6g9uHh3f8X49uyV/vHBze1r/e9b+9c/f2vvz13q1b
4bF7+und21/qY/cObx/iX5+NH0/qqjuTa9MKNY+7ZlVPW/zFdyfHJ4+ePbtP
GyEXdOdRM4NDeQRkVU7htsAt6IrxuLg7Pq274nhRretpucRDW86A8gr8eXHW
rOFunfHGARHRPZtelMvzalQcvzh5VvzPo8mtHXpPuAvhZHf8uC9ogHLuX9DC
YC3MbdNV/Dxf+wPYXfjn90ePJq+fPBpfdIv5rf2D8cGXX355cHhIm6nffVjM
x8AP7h0c4H67WufpD/gunITu8z1/1ncO79wOm3ugm3t3/64/iINb4a/3sr/1
Ixwe7Ye/+k/vHN3JnNS6XOc+rdpms55W43oJ975Eatdfna7L2by6kh/+eNmN
q+UUj3Hc4t3KDNY176olnOiS+Fr/+9N1c9lW6/Fp2cIo5Qpus4NfvVxVy2eP
I3rhj4AMlstq2sF/11VxMNnnn5Tr86oL7KCB39aP8VJ+0a6qaSsfjKf8MPx3
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
WEdT+x1dsvdxeF8lohdyc1PvkZgHo5xxijrdZi3VwxTaYPYrc0b2C+PfHboP
fYslfyUGKHE4gBtTWwhwZ32vkS3KDhJrwqqT42pVeXputqS+rbAGsqZg0r1f
8RJGSxq6fv0N3YUfMvWqGTS/GskPoyHRvvB0PEIihv+5vcdvAtlKG9Nsupbr
1hLXkUtcR2ViaP/0E88KDmjsadHDH0iO7ptvT4o/gv7NJYLdvB2/5399tEa4
c5hLSwr8GwwjULXXt+hICsnbuzDUHpsuajT259hx/ua6Wa1rjFfIy8hnL39v
93CBOK9LkA6w2+srR5nvXPoR0Qk6ZFqgw3KG6RLz5mqhh4lXeuldH+79Buu5
OWpSs8+WDVOyg9UXdwm/hd0abf2StkznfTA54ugboomglGKqWjQtZ6/AbOSn
WFoTpbu2xfPjP3FyuNbP2diobvOY/HVhJT6sKsnaC6xqhnfWQ44eOGSqDdAq
ZHx1P6SdrVdgfiZh3fdVIdUINNzaDIchHPZ1WkNXcgiyF3E4Evp5FOeksCiz
0xnFDdRe/f6invOdkIqY1qfjxGvATCX63SYUPdECjvYPC4T12LQSicTkZM4V
liyI8n1Zz8ltrNlMycymWNo2r/E6X1Bww28Jh0JAR6lmUqHF3uVZJUnmp+wK
jxOgZ1WH6EOOSncr8u9JoK93YJpQj7lpJoi4Jn/zQIU2aTro/xxL7Nh5ignO
RNjbb2DanEcdhsRCtPr8Akx9jfLPK5cMvaAdVO0S96ZZIgmOTNholDsj2B30
PnDocUX1elXP3bpsluM6bAu8Pt69lorX/B0aZRyNVOfpg63exx5m6ig5nR0v
WCWLf0EPMEfa1Q2rIvW85rpzTB/LUjll/AvLGWE1waqBFZAzDDnaFTrRvpfw
akeFi3bTtDyNyjUpP2/JPiEqWNR1YVwVSAv05g1Va2FNLGaBhSjQtcni6iiu
TbV02Omu0mImc9ylqWQywe6qJH8m3AEpjUcOxcXGTugEWDrvJ+kPIK1W5MuH
Uz+rNRvSp8yhHx5FGGZtUP3cBTmz8GCAkE/HLay/MnPly4IX6EXDUwBCfNQs
36PQz/I9z/yq4l11VVDVcbHz/LuTNzsj/m/x4iX9/fWTP3z37PWTx/j3k2+O
v/3W/4V/4eAfL7/7Vr7Hv4UnH718/vzJi8f8MLD9HRbxOy9fIeDJ8bc7A8wL
5b9W38AaYcc6DuEmgl7QtUikZ/i4L0g83pzjfYHHHpbTd5t2/KLcrBHwYlHs
Hj988XTPLWXf8MbRuAipBePakBdqM8S4N7D5371+Nqb0sQqVWaxEVT8sZcTs
fLes0c8YXCXPgpdyFx7eQ8SwJaJWFSdXcJU/7Dh6L8J+0XoeAV9Cj7gvMVpX
c7IXMaOnNVtkQk4SF0QsusqliTIIHUYrekNXjoeRWYN+geXe6K5suiJE9uF0
y66DPcMDjFVZ/cRfMfxgisyU9r9CyqALKvEKWAL9wgcw8F+weRjckaf5p/w7
vGQ4hA8/4odU7Ih/UZ1VCYpCnVc7sG3fLeeERaEGCi4IbRmuCa9CDSEWaoDA
q9aEIdaqKgy6LZXOTkHfoo2s8Z7i1RKf1mvD/yI0CQ8qIelC9RIeLaPaKHxx
UiaNg2nJ/bYAwRvKhS0pTsFZKBxkzQ3mtib2mLjsdco1UUXIjwCTq5m/D0Xs
UZ0Ou8KxIPP5t84KCQr7Tfz+RV9hrVTBtf8klKiQG3WJoRIgZwyXoQVOpASu
l/WbT3OKJoRRyzVKZGQFpH/xpsMaHChiIH9r9vIQKSalTGqts3TliQYNw4kc
teoSMIKRtfpQMkblzunkMG8n6F8+Y7vk5ACJ75EG6uu99dOybXEiKLUZ5WXY
rKzWeGaUG8Bz86Jb3+e07hi18mWFyhvtudIgT0pTsgyRzhCvB7ekIBnCcB9M
dFepDZzh+ILOQimUHz+O6GlFOCE4EiWyaI/bzEjmJ2NVUXBENrtpYGGOQUOO
ciz8SW/ZShxNjt2W7yHHGaEkB+5SjWRmK1bf5s05qCGL8pyTBGk+VA5WoqCB
a4oF2XNm33uGL72hTNafPot2yOV0Z5MFa3e7NUamqTu80joJJiOX4Cp04TeU
eJgk5kkcNLc3WAFrBQRVIT4S5c8UjS7gdtkblggVMW5q3OsoHS7SWr3OLNlV
LFa9b0k8PwYAJ0ZU6afbcRGImaZUCQ85fqSyIrAULMbk2vRo4UBzv+7SWykW
lTQ2ikpTPWhSU5FmQWnaJbnagPMhXEeBduj7uBSV6h6BlGGIqKjc/khcO9Ha
5AAkRbhI9wtNz3DvdMfeJAyClXFvTUVOkhzNgZXNGdmq68kskpfTZDutw6QZ
Uw4nHvAcGZjNroyhlwZ9cEE3duhfQHa8WazYI1KeInxBwv0oCO991pRoYqmY
jNQZCgfKX5l53BNjSlVgOThJUwppOBGHJRAYsYYxtwxsEM+xnB3eJjWfNjSk
JUdZppy9n4RjlzwTekIg/kd72xMgnNcSlNOr4whj8USnSuqYcZ/82J1vQFVE
3klTBwGFIJl8r+t1bM7aI+DzcirQaC/DlHn7fbmvyXfuWSEeKcJbjuWa8QWi
iI5cBDUIkTvCrbK3iPjEcZF8KqUX9ihUCG6WS7n1ekO9gpRCMBmIFnmaLyCp
c+T/cQXrZGclOfSX7NKhZCDjHro5h4kd9VHOrq2uuJKpucKHCTI5TKjSCm6L
ukhhl5IkJq7Ip4ss2UyKo4NenYEEFTiGQbYmBzL4vSAuMO2rIFoGxT0IC63v
mAm+qJqRZboOX/iPxExZnoXdfrm5+JDMam/4SGx8S4/E14X6DNA0m7oq23p+
ZTcO/f44xBmCa7+v6cO9fCGlj/6wdDGgZkwfeLllZbHfcRTUDOKebVUuyNAL
7s14J6wPilOjhmpZ8Ij7ck3ONiPwsoeqAtKcEZKiK67b++GdT4Q67r3Z9KHt
fcZp6yhcqhm9viQctwG1xL7BezB491Emm2WLFgjygcAqZvCul3xKLKIvMPpT
zK5AtxX3XKF31b7EqxVRtl6zTnOupoRFIpWwGuwVWUwiGE9dwjvsGj9G7x8Y
LfVisyByaavMFoboJF0wQi+Z+3Qs8RWbCxrjiVx5u5SXT8nSq3nZUcmFvNW+
E0ZY1OcX5MhMXi1AXhbYj26AUdQQdsIpfkcwoY0ryev7IQnuYz7KsT25kGmJ
RV0Q9mrBOZNiR6Blm2WN6XlD+YBWqEaZ7CKT/S2IEvv0MoV31SzJS3TYr6vu
K0l5NCy8fwfoCqoDs5AyF1fOsagZ9YXsPdg2A1mrpCIOVFrkn5b9aeu/EXef
V2ed8atnY4XxTNqLZjPHiExTzxTOJqs42hPC191AE1VIJKY0eMYJtqFdficE
MklLRPXCBLWWUWO9KkbO9LP5ppJgP1gpApHztp7t4I3faTenO+xzI1Hstf3p
vKwXGHIm5oWMh6rayN+/aYOzqQBOv0GXer92Sm7Kcczt/G2JTz9zY/jWPIug
EElh5oiW17UilXGoKKTwniN/o/JZ9MAda2ZxWvaQjW36MrZhV2F2GhR4JTZK
m03+6aEqMQqwcs1am58F8qO+1ime6eAzZBGAgW6/C3ukOhM4aEb9IymJ6x9I
WMqvTTQfrc4YiYT+YrWu36OGjlGOVVmv966jZFQo8jsCBAl8h8QvxtyIFZkY
h69Naa8WC8w/nha7PIkxvpy0wz1f6oAOxfxrVEIuMODOQfa7+7c/fqQrI8t5
CyO+/fGyw6ABY6OTZ59ccOb95mUDa9Lk/tFAFvOsIQ6MZSEBbte7xQv/KgcT
akfKolgM6tu5gKU5JYepj9MtNwS+jTyHIgxq3mdZFlLuTS8RG7yRghZFdwfd
nl5ooAPYobSKlLzkZYoVsNqsVwIsKozzSpGzoypYGcW/BEllweDFwOBQOuVZ
AihjZMaHHCpbGPpKUSU9a9Mb8FGZIGUIIOFWvgbWb6AHpcQN1sJhShN4CGr+
1KWkOb2oFtVAFfZdINHU/ecRobewqqzQlQYkAYvV7RhN6YsP48vLyzEysPFm
PZcf7/BTJCPn5/C27mKBvmx3vEJIkfpD8XDkAwf6AhY/mr4jZcZa8PWV4e4B
wDM3PUYIC6/F15gR/cPb5DKRhro2bnQQGS7pxS+KzssqFP2ULjnzGFm12KVr
Q+p9Qf1HTtdV+Y55x6xuQcm9Ulpvqfhhj1q6FHH2932ebzH9258flV+/PimP
nu4//1tz9HqxWkwfPyz/sHz24eTo9ZPvFr/f/Hn+53en382PgCHPsTMJmVoa
ZB1kA7pBUfV0To7UWhZG92Z82syuzHl5x4vzgUDyuQQVhUHxCo1/b6HWjENi
tlkrzGFPI0YtmIyfEJEAVdDHNowm/zEgHL5lFXj7rPg38We4Z82i7jSYUJjI
Zx3pN/w0mY/Ac0DFvBIFljJMbK36J+82Am6EfcZXIAu0whMvjEhg0NlNbbkS
9IaKJLGGxhfsc61gyrR68pTvii+P93dRHDb0ZPaZVuBoCzP1KTFrkA+nVSHQ
Al3nbeZ4/aklkhrYmm783etnPZhjm4uspnGvqAujWJp3Pi6XY2lAQN9+/LjH
B0D8l+ZjlvEpt93Z2/7qJaznC34/7twXBxNuS/MNWNL3lbPLOnyXNOneMcYg
1f3iWk7Or6Ls77eodT+QZb6l9/42+teD7uu/vT/6/ct3T/f/59e3//Dh8M38
375/dkwj/Nbf5gftnYcXs9fv/r07+m10oR7cffrj2Wr/zw/XB//WPX59ujz7
42zx7HKbLoInqvHqLmTYobqWhBlBO7OppR/ZEdVWDHiaQJsOdBEwYMZ1u916
kPh8azoajAYD37wO8UmQPeATtfheCWCFaGzudL3pSOJgjprX2FAVeUlGW6xU
P2fd7xqVzieAwtu96ZO5j07u8KLsphdilAzW95ISbMJtqewUtfQ6RVCytUq3
AHLFwTLwOUYK7EYcHhgUlYijGy/LWlCN+25pPC6iq2Ut0WxYwcc5qg8cpTak
uFn2fDlwWJEGLL+MoidbUFPTBC1Ko6Ntb236rj+TEv511dYKt/y+ri7R3KtJ
G43T1jCqhQ41C2f6REixzWTY5GhKJapIBI5tZ8+28iPvSj6v4ktxKkJMxv5K
jCPnbQAj4OQP1yuhGUIGw6iK8VKbJATp+cHVDNe9Fs6cuiP2inKc8k3WDZdJ
oYnBOkH+n/eFgT4WIjBomMjPdFb3pYlHSLEYmG/2ALg6d7NeSmOQFfZO5Z4Q
OUTgtOVCHKFyXr2Kdjns8IRSIouKcldyKDfk1PFkQ4FNTyIT9yQDYsgJ7Moe
Au37x3Db0GCuZn1kNSXsrRmZZZ4G61Dyr17o4BSJy9RNYtJQ3dYW4GPif2f1
uqUsfk3M0ey8ra0gLslF7kJu2g3rURKwqm3AG5ghUwMtqz07bZp3hAYRsS+3
DfSZt/madDrF2MKP5k3UQcANnNC2zLoE8cSdSsTfD401FP56eke5T+mUfgzi
tLXr8K8HPZJoM+QtFTewmh2751GJ3cW8rGAt7xWgoKyvTNR71+SoYgkMTfxo
cmtvJEdOpENALgJURxoP3pIYA48HDgqpFE7FS1HV2a8HU7EpkzdMyatHAZuy
yRCeH3hNDXpwWymonUn8IHslAQ0LHaHiRBtR5FWSEC/bu06zyOuOrp+idhPd
USCU8qvd6lJLvQ1pocjO10/e7GhNiIHa856voUuwnEXKXRf6eeBTO2hB7KjK
KrF+mOirYJwQmpPvQSUuGqWsjhqJ0ZNsvl6Rm8M1YogZycsOs+s8LvX5Eps3
os40bc6XhP2hxldEoApwHvoWtNY0dFlTz7r4KIaHGvNrfRrtoeKnz3Q0ytr7
eCMhkBWxlEaAhcOTKCC1ZEC4QUtAG09VLeUzWsG4zV8iLSxo5mSmDTgn4vPb
wUnuEBHZiLw0I82sp+w5SqIfjWWUjx9HnIsWVF8eMgAR80T64y2ry3F0BFwk
GIS/P+0g/xWHCwtOymk1nlXqs9j9zYfD/T2wqluKcHBOOWJiVXLnudikOZN0
86DJExf2oQx9qaOT2CmL0x2ts2NnY1vsnBbljjopUJwphtdGc5UwwdQl06+D
+5apiNKgUDyxT9/KKaouOuvrEHpBYCxik0IlCT2E20E5x7VXHMJ0NMYbqhiG
2acT9kkAn6UU/YbhMoWgEaEQ5i0940+bzplvZNBmVUeji5lJEgadjlpfUBa2
D5L1k+H7es0Wa3xbZaC1GARntA+Lkx11Xdlx4zK+4Db9PK7h87zGQA764Mt1
qIPi+bSKVM73ea1kws0t5cKgMUdZ3MyOWkqDFN+k4x/WLUrvflyCVZWR11Xu
TA4nB/Ly7Jq94sGViiX2J0XHB35e2ovjcqrQrYmCDWxRym4UyrhOKXM3UcqK
65Uyd61SltmbSClzWaUMb9Vn4Sqp7HwUZzBvOQhxBt/A0eaGlCWjBVSzPtth
SUScyfw8TEV5HBXvBb0xox+6EBG16qE0LiuwlzNYhB2WAg4AU2PPIBYBy5kC
2prlngqub7mtQJu3KgoCNVIfToMwhBeoO/Re2OKLzXomuQZYw6pBFF+iIagR
8ixl4mhp8BYmLQd3Wa7zfYd9rrN21rIMpyY0OGePQcSheqXLQnphW04T+0Dk
4DDU/y2yS9ypgbryAFOIKQnvKV5G7qjQnFd+GLfFVEMhhwrISUoBSc55EEG5
UKoND82pbk23KKxzxRNG1LsBSF71fpkoZqnZHU46+FWzULaVGD2xd0m22zaz
RpoZ10s1Qvf89ba1cHTF1Q17U/c5VuUZYvXJ1qSUuAGhxDRivNTDxsg2MZNh
MMHBFromV07kfMwckBdaDGAbQN/B+nrQfoQOg8bM1fNczAv3S1XXYroBzWch
89u7LhGC86zi+fqd03ZR2c1rzY0oe8tJPNj+NOmOMEYpSi92/vNidMVDpmDr
2Z++DFV0LMKI9DT8xTj8QjA6iMQec0IpC45zQfMlndQ0xkqKvUIjP+MGt2cF
JOiCUyHdh4HqST0sk5KgT76Fe+uPOwhQLYrrv6KOs22H1OvrojeqJBGGKsZG
aNps5kjq7Mz5lJsOcQDQKFmaNrh+f3q7iAFT+EtQNNq9YQ0rKFgjVPMxoGMG
dDQgZSOEN4aij5ye6LeHjM/NfO7Wad3kdi9LToF0GQWyuIkC2dMfmTgVAs57
dbfaSmcgO1uF2yGpz6jWpZpQI+cBkFAk162Pd9147Sp92ebPyV85ebadbIQa
6azBPF32QOor85aDh19KZtbX/CT029f0ErAtb4p47hG8oWvfVdtpSYrPXlW1
bqRiMDhHTBjA05qUJ4sqiIoY7tssJBWE9n6o7/l70ps3tl69KrhwM43sJ1Mk
BVKqApi7EEGnTdtjFqEaRpRk0anfISmGM1m4tmjVdn3mmbaxfHfSwRyjddh7
clS0zRSTOVfzzTmIfMRnnqnqii72npbsrGeVNtW2Ma791KRuoLckdNeRMatr
HqI7YmMWGMe/WDs1+DYL6TvETUuvwCSLeVuRN8bXnRlVR3aJ0JLlUEep7IBX
YylgQTlW2hdAnnS7GqPRFYeGs9nF68z2iEyckgmFXwipiuEl83EjizY/5CJM
g5UZbEBn8vd7TU7FH5iWaPziIIrg9v2c4EmRBk/cP4Mnv2rwJKGo7cbv9uCI
wmb1fed716k3v2qSTXZlmdzcKAs2DlbQwFqFYbEn9SX/H4UxbBJyr8qCEUx1
k8cDRRf58gHfxSZkpXARWT/nkPT4Xr7xlrBzj3DyM/sYnfQ1FKRtZ9JQYh0q
GThh4gm1FFH5dFozfQJNp2jjaRUJhUHw9ZrtoBxdiSakoIYmOP3ZqBcBR2HG
kiqqWoVq8xr72gk+7zmDuri8L0fwQIohpxrypouSsCbRoZRaacAzUDeaSIoJ
gY7gNkk1LHIu+FvdBoIAKTerW3ROx17nhsA3KE1GxVrUo6S72HCXoSrA26pl
y2875fRJRGPtmjnN0x4U7rWOrl1AfBG+ohrE6ltr3W/YPK0Ubwehzrxv3mnv
THhgrYNxnkz0ZtodD6uoOTM2xw00unM23k+JAVBgYlppbxYek7kriK26mWHO
tmnfJ3BYyC4MMlY0NRyjT71SJgr7PoctOydYyUsCLVzbgbRrCkHdmi3bvl9Y
e0xm9XHW7WLKy3qcj7JmpD4DiaGan7lPERSo1LLRH92ZtxzN3Am5quHd2YGw
AgGYtOVas0j+4HyIWu1yyCNFpKpzJxKtl+UMLgjaV1KSveoEeYeusu1Z4Gs+
uHbOBTwI8yL1TotbMwIEoDe2m9O2q7uNHKSv7TC0R03zimL3WRcQGpdNNktQ
q9z6XtTJXtK9qjghffCnz2yO85iUxFz5Xs6FRhZVdBht1pdm0IhsFpGHK+45
good+lnOA4Rk4zBeucVd4WHqwjCpVEbmb0x6ZXFnqabcg1RGuSBKjhRa2mdM
JUBrugCT/1ji1xLedj6+PSJotLGpASM3ivq25V+kzcdR5mtan/D01LwN3r0k
vO7kBSMJXHMwPQmhSw8vROwQJw9QX0vOy15/GQba9GJOo0W0QRNuzlGeLs8Y
lZt2jf884H8xIRa/2y1OXkWf7IUn5JMHxQH87DcfDg+KL/A/R+PbD+lvtx+P
7z6BBwhrfrvvl7E5sf20R+xkxS+cqguLiCzA0fXwOAwojeO7vufo85ZwDrBz
EyUG+JPTAiNLeTwTzDQI3Z9Uo22WdqOTOfajOZGSuwy5zltvi3GAufi2gCDc
IA+io5RWNZO01Be18DZ7URIoiZior/NJVnUnCOmKtuJiZoKo9JXC1OL9KdHu
8iXS6EG0dOpQiZTCLwOJzrR7bQW48w4qSqenhcb45Mt0Drtgq8jsKAr00mPf
xWmuP33mUfHivsQfc5CJktVtenn38pb7HoV8vnXSzC+7CRGvq7UvPddCI4vo
Oz9GfccGM+0w5cB7nSLB99HWTBLx/YzuPdBxmFE9EDHb2eZ2Ia/p+pbD5sX9
nGRsOizdgEC89lNmuE30QMZyXtSS+mHyyOpetzKGkDIbpqUCiaJral/qNo6k
SP0W5rtFFKLAwQFszPncHFtHvi3NZjd4kxg7ycPp0BkFGDMOs5CFsQTrJNIk
qYOxmfBeaBielYX5VlDc0Cm03KE2KS/Jl297pkSdT/AZ+ux/OfkK/3f3cI9/
8nf+SXi0Dywy0BQlvG5MX1J3KerAFJt4+F2+Ucx3uMnFTVrF5BoLFcd0PPp2
7CZFIyYp5eHt2YZCN3t7ZvLx2rFfU6aBN779X3Ntaf6ue399d6/+zsuMbt5h
53/xf9476j1PLUNu+OfvOuVPfqd5kl7//tOfDCu/YQ80/2SY5t//Gx7PreHj
4T+fmyflBpil9om6/2r7zhsvtffkv459g6ttnY5k0pkd2r38YqC90R7Vv1T3
SQzOSRD53kO+jxASyAi5g3TgOOIOHMDyyIhYYrohSC9UOVuJj11ROUZhO2Lb
optM76SMYLENlDLn9BS+vr5r0sC417dOolthvL+C16y/xxeSb2m46fvn3DIl
Ex0dyEZJ3sfT4zEMeG2oKhylBsmIIh5zauAA/3j1b4+esKxVf0s1kra9NGjq
eIPZXVOZQ6FKckF0Wi6eJp+iA1jVMxDJ2u1xl1SPZc2aIRDTJ/WjSYLUu1Lb
VSSUxeI3JKO2Fqk2LSKi52l6DAyJk7Mejc/bxKLHeSOXPEaEpfyR63jaSrpv
rtBbr0u/lSzeWKHUtJLs0fmYVlWu51RwGlec0woN6EAmp0ITxXvJKHpPtiXh
I1Etryz5DYB5SdI9zxJ39FZ8zQZblOV1I7ufn7eJ/wbfHOFA5JRq2U7OhlF9
X1ObiRt4dFoZiO4irpo7aOMyaJDvTVTAbP0onFq/oLJqrwlKgEVVU4pVxB2E
KVgOlh5bv9Nzbue4JITbDNkCOJA3P6dhFJm/ioI0ipuaDRFP8rN4a7XdOgbU
A6B0utjkECkvRkazWxHlDng2KyREDcweSczf9BkbSJxHp8Ks5ZvqG4P1iJZA
D+N2V2mUHANlsXTTCFxqbWklC9nCp3Bzc54aS3Q+BrKp57M2QwIGYYL6nXEo
2eBAZOWVx0oeSOvjPJ/vfWQzwg8ZJdBLxSVB2J0i5mdLDmqBr8yGn9hSo581
GpDR2hkboaEO6jyOfyK7fs35FkXlfbmma89pC4LSM8A5hlMmJnhAHjpB8uvI
RtUZGwzbrv/TRyevnyqIwsj2juKi23NsDELXJSAtMjbLSu5mhhxYsDMrcdgp
hNsUI/DhEHaaXyVy8ipcPot5GcTSQKzwQsuRzEM0UlBdatB8JKzAYSh8kDqV
YdHjzqt105yN/63ieACpfk+kvn2HMuFQzYEtPZPM4EJbQO0bHwgnV9y9c3Tn
48c9xwQDm4Ede2DScJXIltfU9tlE0tRE7X9E0Xjcb1KpaA5/FA4VpQjwAU3j
nycM7Qf891v99w8jWhZheGXZwCj4oFRFXWAMdS2IK9FoxQPqRzWGuayb1VVB
7VMaUEpWcPzoy56BED158/rZi68TjQITAyTXDfaWMFzh/v/wl+Pxn/9afFH8
pRz/jf67P/4S/7sz3sH/ndD/vqX//d87P9BIJKg1f+VwcuR75mixjaAzChZr
gXopfAC/unVk3m06di7KD8kvDw7vmZ9ixO/hi6e0kcnuMtqt7B3+ULdsbLbs
1tHvYMCwA+mGPCiOv331zTEs8vGzr5+9GVo+w13RLx8Uv/lw62B8+5gc+HcO
xncZcYafx2+P9sdHX4L19fLNE7a+IirRtDhKVa6WxJv0TOFCEsZx3WGrL74y
2PGhKc43CtJN7lgP9xuhEOotBt682lAAuQzgKkIhAr4njAbbgVReiDJxw6kc
HY4b2P7OtUiomPbBGgN9WOiHwgSWFF24c2uzno8VHc12NXO3jng0kB7fjtvy
zOffetjEvnIwcEvxd+GePlLTJ24PgFPK3VNvKQEzWJM24RVPEkD+hE4VwMrk
S4crSjkSHti29R087RBygVfzUpUQvsxhCg/i282/Pzm8fWfo5w+PT57cuYVb
+OTFo5ePn+yefHMMP989Pnn07NluNNje3l4a1qijxhq8uh/wdT9QqqbPf9LP
ytbxX/HJ51Sa1KyvChB+Pvmg2H3+5pkHGfdBPYUeRHxJEFohmYSGpx35gXC0
fPYTiC0M4GnVuLyXEP6bReVAfl4s6R7AmbYSzUUZQpAqQOtjkCGn5Jy1lQL+
OmgYScZvdRISHKV/JIeKiybkTEwQB7WF0WoEOKvm8E9ov8naBP8ew2ScwVct
39frZsk/UDjbzzuvddBZx6+1zG4nJoCdYW5nieQ/kd3Z6/oscqhkZV90ZXnf
NqEKNqe7RrfQ9TXZNOkyC5VrNVlnwvg3rsscFXGy501K4f8Y5f9h1gtMmaTZ
D5OfBTw42B2phyAYE1F//EcRY+w/8pYTIPVJbd830ugg7b7e6vpM2m9QSnEC
jCcvI+JZelab3DuFM2uVC6DY99c1rrpJpoQ48Dds9YRDcQi5P8abgbQKH6CM
MQSYW2vj4Sg3hV9D9WCZqWJxVIn6PYdX82nb2gVI7ViUzhaMzObWYsgKTdYs
DLR1TRnXQt3K6yW2Hbs8E6+VeOWs6ypOoh0uZPdP6T2HxbL1LggQaYNdU9vB
HctsR7bQpRZtwE571Trrho4xFbv8JGPvLWleMZOJEph5spiG/LMhFL9+AizX
l4f+94hvPMCLl4ctpIN/8OHqb6IbFMVv7U14cNF1q/Y3R8e/OXwK/8dD/Obw
iSwf/gZMEb84Dc/Ht/zBnbPZuz+Urxa3D+YHR49PNu+mx98cPZ99uPsWTOzp
N3+aHbyvj5b7F8///KehMYRTPMB7e0N8yOGEl9htZNLqbP1FSaVh0orNyANu
9sA8yLc5D0krBsCCfUGDMMXXe6sD2Fbrel6NWTWt2UJFIda+G/ArE4HHLQap
YThMjjWcQPp7oa7QD445DQGiYYtjy1C+68ctvEvXO2tTn6OkmuDRul/1qmb9
ZOK96TvKBL7DK7h5L32fc29JMNLG9tmsaE6FmdcEil4nRWt4cjn1JONoy6sn
aW1j8bN0EtfXSSg7Na9P5BI2xO9kejb1HLrDXQZ4DM5z+rCq1/J4C7+g7FRy
33BtfIBMBsOgPlfAg3XdvuMOh8BHUTzyCOodyLxtXp9VCoZwsI8eB2qOVEtQ
zdjFCSiyRWHfFjdI6h6IfQzmzZP49k/wAPjY9VCjy6uIKQUwZHV8vweVAiSO
9b7vcU9bzp0xUC2yuZrsp2G0ssvMevgcEUyPu5Q1IRCX0UGXuRLQWOFRwlP8
Hy2PN0l1ZZvqizYMkvV4KjjJB6yxi0ueQzYYG9GqpfS0gU/DzIFbrsni8TWP
4N9EyKvsK472D4unuJP08bdSsHa/IHF9/4svZHZGIn4xPf3veAYPTlbzD/OX
D6s//+EPfzr908md7z+cnAqycfhj9IJeLZOkhiY1Qb2SH6kfy1DBP6iBDXtN
6AzxVTfpo9jrXkOOLrhHAuhvGtd8r3Uo/ZZHOcLPhdKCdFM3CSwCK2U7LT1I
7HQE/h0wohT2a5tPvm3Uk3/qvWGzgrz6qG1rbtpo8OXph8nLnWmYhw0muA03
VwosdAsEqY0LDqjkcoqH6UqL1k+2bNR5zxdbyQYFwCjDcqKsXlummF2QnOky
jSE7AmCTRF9gcFoY3HHbtylnSa4ZXThwC7Evvac0ysNv4qPtWc9hNcJodZta
9EJRxjwZjlzb0Lsdvj6e6u8HNZwcVplRdiygQA9FoBhAEegjKDRpC4C4CYci
u+HPltdpyTcEHnB94IHiU4AH3DDwQOzr9CUBms2ScaYtndnOnEjwjiKLPNdn
DwkQnaeQHfpC6VdcPjuygrfy3h25Efzjt6YZ9E7R+MQWHhn2UH5GiCO+tl7c
lzAK3Es0jeCH9LtRIb2AY9e3Gkxh12L3KJ46uczDLhqkUB/ZSzyXn7KDaWw5
s4O53XMDu1fcbPfc9t0rBnbPL9OFDi9mU+w+JkRvko4SF5LFQ2RfKF9nBsZE
F3cr/IzUzzJzG3uwIMO302CAmsLJX+ZTHTRaPgHgLudI5WPvWy3HWmRJwY7i
L9+d0F/+KsTDmS6R5ucXJUpZ/+7d58/pVZIc1QO2LIu+f2HUz5riP3o0Qbkl
8rW/N98lxkJhTIaGWDBRwGWNvaLKOW4Z0RqvhasIGWPsLR9qfz0h8kP4bf4B
W7uQA5HXP7SrerK4KSQ7/RyYqN9y4l9uN1MnR94pQY+HcyvE6tGsPF2vv29v
U2d78t78W1Je5mtUkjPMKGTDO6AUpa7kPD1pAicjP4l43iwpCYLldO94edZv
9TbcZIV4uTZLrqSGQ90sgbdRXWV8okuuC2EFSOpKKU2Dr8/ZZn5Wz+fBUSXH
YMbYpXQOc+9qhbwPUIXF7f394tmSdMW55OHbMVgDItsJTZiN5NxJHJBhMEBY
pK2V7BC+R7XxG2PlKG9gVwHDWpfren71Fu6KOqFuuJcYK92s11xay82HcCLY
5nYekanVyLwupu++ogp5bOksrJuc+dUSG5JHd95K4cmNN/jIjnEiMCffhbXe
ZHujtaQNFoa3949sxSgYuArrwNt6qn2S+oHqcisYeyTdETd5nC+ORLU5I+H7
EZVvNosS/YPljJafSgoCKWEnp8+UNWVSplXtyOdDgDlQt1FKoQfI9MmFgl5c
Bu8AHx1bJVMipNlky8bFisvwJopHIyTwfNomGvUnE43ibGDTxLAsLuL9xMbi
K8TeDBmRtr1vwPYU9Un30MApRtc47CTnDGWPIh126z6SZpfsH2YEkFHSBBED
S4VlUWkqtiO/WnblB8Hc2rQ/i3YH93zQGVb+0xV2A1cYneuDSNGwPi+OG9ii
GZNea+OxJrs2XGUM97VxtzVcUD/N3CzXZR38n+SyF9ioRPnVxDlPbKGhJciH
7948Hd8rDKiSz+4lh8cV9ZxD/dlgUdwwCyGHaTH55PDBAM0NlDpmw/j6kpH3
FccQm/E96TesH7oh12LDmyYCArxXi7Ii3jrdMWaP03K+NWdjlPpVgvqtSBkm
K3d4nzLzvhG2Ukj70ByLoayPkHp2fbNrNai1FqBMwJlcBP9FSK+I34KuQTJk
E6AQW2suWGDWef0zgZ3cp+3SUIYAM4Ysc0sSAdzP7pz683opRjHSfL/V1fL7
x08Xf1jA3w9//z099Us7MPY5xG+vi1H8kvSE30bE++Dozq2D8nB2cDi7c+dg
/+Dw1pfT2dnd8u6X0/39/enB2b3p/u3ZYVmeTc8Obp3C/9+59eVdJIbtONQM
zKVASNluaJrRlwUq4x5rlP7j007LzMUo0otBFMPdCeXmD94LmmJ0FyxfGere
bgCGeQSbMjEQdDDTNmUh+loS2pmNyHmRW6kBGaWv5TF677JQR3G+GE/edyEb
nnzI44geUK+vZ4Moy4F7I7S6T3FKnKMGek8glGHW6TCcaUrIwdwn03MoE4oN
MZAwRPA/a0kD1xR4H6P23ZxiC0lJkJatGwrqSEBDIg19UBWMRuWIYFC61kYJ
PfNv/wRZLNW0875j6WdKZCyT01eYZTg2wOu1ymkCbjUyOqcebou5JCpjGnqJ
ir/SHKIIuq/a1nvV5Jok1WS+mEzryJx81d+uKNlwQ/8628xtb5tettM0C1WI
jmcU0uvIO7XFKkDHAaU6Xd+Bx04y03vneOkbkIclDBoQh/v7xct/u0ae/dg2
y69QhQbl9gEpzfxAOb2oxvjYupnfB3VsTGFLFsSIjFrSh1P8Gb/2J/GMqJOT
FrFzv9g5/FPTLZ/++emTH9cHf3sE4vf596vj452R/p5+KAp4sfOwAppch285
OaZ9W+NYR3f29/03UV9jfDTf2tgORVv31l9FfEg/pAvBSdxAv86FIgovigj0
5RpgF5Vg5TLyF1uy1TKJ+ZUpY+8pg6wDeheu5IYh5k5EjXseN9IFcWI7hUWo
2bn+G+SMwZm4KZ/2iBXXhgNoih+dJqciUwydAwIXd+WaMMJm1yih1A1CODG8
RurxtCclhWa2YBrvxVm0dvMMjg4pxrTRpyFb2Apl2bM2xpIhavkkYI0c/khh
QS5uAHfRh0BJx/hv4/Hu8d54AEeWQVxSDBgZQx65+TwsEEw6j3+FeTzc2wK/
kYFz+dX24xeeSwZqQ6wdQ0MR1EaGEdwMamNg3BtAbRzHGACfUh9firvoBsAB
PWxnONSfUeTuFQ5RKOnteYk9lLca0vhU2whIVkOGhune098MhiFzMY5m3tVR
2+7DW5xjmdP8Ff1lIbT8/6C7TMwVs3U7/7hqEnMan+4nSTvv/IP8JG6w19XP
rqL4r+Q86dPLdQ2yBgz+rQbNP8pI6aGo38gSOY6BMWzLEgM03zNZnBgneZ55
Q5PFiclys6ah/zRZbm6yfIoFEvrpfs3lGT995vEbGGSy7aNMRvyOMjQj6Euj
G2OQhpGbVbKEL50vXIkaeu7GCMVZ2tkTgewi/OQI8Dt4Qmxnkwjye2ZqRDBL
2UhxIxSXFZ5aub7qMdxBbFQPHHuiHPW4hYmTt+V5uX63WRXfgvWywaDt7snx
82/3CDij1B/ZHYz7m/4F8TRuHx7+NeL3lAKcqZLLMf1PrZL7FZzjv5RTA5f4
zdFxXXVn8B86GfRZN0gY8F/6IXWIhn+05WJ+OKYBTum+/NZv6oNXT57+bXr4
x6vZ1/P3p/XD30+PXhz8+bv5Znr0+uJ0+Ycvn/347PL5myfd88ff0QB/mUwm
vvMHFlCh9dldwad/Lb++/Wb29dP9P39/MIdHx68effkQhptPl69Xp4e3xv+v
uKYiPp96qD7RNYX5XL+Yz7tnsBPCNay8HUYw/udB/MccxEkQs9Z5e93aco6t
LXrXJ+/3SIIACWqBTHAgvdZ22hHjydgjKkCiNAq1c1CV2H35b3s2nwsNmFjW
56P1/a4A22QeGjNWI8iOSSIjEngKBJ8oiDlzhqCoifrYwiJkkpZ7AktjAUpX
MoqHTiIt6fM1gNShdkqobZlmCPDrp43E9CNDhuX6Dqo1O5iJ2nQWiC7aOerQ
JiPgxPCViA5z0WzWxg2Bk4loAQMkvrhS0pfg1gnH33KNREm23WjD6wXgBN+W
VAgTGKQtkIpQ3Dn5InI1Z03WSF9XgDHp75KADy6rS0liMNtljXyGCOu7NOLQ
PXtaGLKB3k348cvIL7EFuIGyLnzwR30TAdg+03DgK0nn6iTNepRS+XBzjbLV
HLZgum+32pPq9DRkdh0fGEIqQesBY4AzLKvu6XEMzXXrzuFdum5vsN1KPA+g
NezG/jeaCWWv/r58X55wZ8uXpz9iLc4Lbd6z+/uTly/2HLM8jMIFPkf9NoIu
LBcI4cpQrIQn5pj0Nwmd0ool/Jfhc6Te0MbydJNgUfhq327EvQDyXtNBb/s5
I11pRSF3C2nO7BYkvUMERmOJUIFXW1sxpw0puGNcZLTtBATCi6qcUbC3Av2Z
zuTwzgF2AhTu7s2LHbXzdrg18FUYQ7qjcFAYb9go7mkVoizKRF2U0mpRCZGK
2Ig0LTSGJulykyS7cyc2Vf6vNH8/yfrdavxuC9f9nGjdgKmcuvhydbx8FHx1
fM6E78CK15xKaYmThP4KTB5yYXoJe3lghJLurK38vbbG1/VrfD+pvNflynuL
fHmv65dSblEosw1UB1RYgYBl2pc8+FuohD0sZ+pIR1YYsut3N8s5SoiQieEl
y54BGU49ppYd2fYU6lH6rzDHX6Vs6z+jYsuUFaVVW8WuqcALjpK9kX1+Xa2q
sovqusy7fB8ry6ij13f1nC6qhZqokp4uSeJoFxdK2USs7SVjupm5arFH+fQ3
tgala7RULPk3Lpv+PHpxLd9GGeZnNjutuDKPcBR9bxufeH78p/gQqLA03ICD
Yvc7Ux8XGU2MGkydk6J9ZA2XBkgm1IKIWYiKEYo+1XTO7UGHFUCCeRg58wX8
pog7HuzEi2GKttL4GgyR+HFiCilP2LojPsrKf6Jq/O+//35sQvPVgL5gn/eN
63XSvb3MYJ31qJRuXP/Ce5CinD0hhLq1nnGU5n6Yu7nXa3Tt0WR0a8T3wXrB
bCToLPAXq0lOlUFGfVP1jwct3w7x3azjRMnoyixtm9xPKwqN8jq3logyPk68
A7ltR7aYLdSMoquZaeQG0qkEvmzxiHKT8G6LmIB+SU2mZ56joonqFqsP06qa
2e5w2gLjVFF8ohZk/0n1cv8sl/tnudx/xXK5/zxHyV/ET/LXG7tJxB+R9YS4
G3tCwJoddIW4m7hCimKrL8Rt94UU1/tC3PteTDI19NHmMCbHP9jiV+OjZy34
4PNr71BM4zlgMG7xNg5Feyjgc5wRQq1HqMItXQBxmcarJWPcYaCwbdG+HTnf
wKhhOV8kDbWJ0qbVmvysIuy94jmApjCVpsvd0Kg2pOuwr6x+HftvEQKdzBPK
qaJpmk6SI8x/uNDweA5PMKgG1D6bf06O/i04jItS34oOr+ZdLRcC2B5KFpQo
Cu/YUGRmgb/E4bBA1SHkwbomuHqKyCXbSReD9KmRpAQnP9BcL49+F+Q8g92J
cNfTLqlGDkslhjWAN9K+0rTxXq3r92BZgWwASVbOedfkcfgY+PoCrQU1J0A9
B5G4kQTCerHCUt+0+zoBJ5bnVUCjGQ50zdJONXHtf1SOF5L++Pf/fyf/xW6/
wWBKEkdITQpbZuVV+H9IBmFeB+6JcHS2cRdnGgyZiWmkslXl9Qm0mtKg9kNH
/RhIgMHr0xDN4PCa/5uo1Q8FCCNzw0P3Vmx/M56XXDtgs+pF1/KE0e8Mblll
enyePdh74tvr1bYGMETYt5fW2j5A11cQxqW1aZi+X1p7fcpoXpj8ggLkf6aM
/oJEpIin/Db614N8oOEmta6/RqnrL6h03V7o+rtfVOYqLqy0xDG+uNeXuNqS
yd95BPL+UJO89ic9VER9CZ1jWi0NIiUAVcNp5+K5rSuiXGB5C3jrlNqUgWRr
1kzZcVc1Os3fnVRoSI9tw5GYGd7/3XBObBE3jyJueVovZ21m3zJKqENbFm34
aRXriT/99Gz8eIIpdGPKmxPxg0PD1x8/IjVRaPHe3f3bxChgJa/jrZBo85bp
+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
wZLAXR3FbIywCFamVInSvYK2k3P0/cyStsPcieIAmVYLahxZXfuKnyveL1CJ
9MUORegR013b233/Yk3MMyWUOlFwCqofFlGxwowC/4vEPnKuYhYldKZryBto
y5jeRvSmFa3T8IPfXWfiZfHqYT9yco8r3bUkKtOjSCE5MurvKi3DKRvCXBeR
LIRx7NGRyaXGnCP2Bfb6iBsoI2DHemJgXC0XBOtDSv35pQ588kW2PMgXE48f
HrJpRfZ5ESKe2lf/DtNbBInEC6LIbuUAYkTdNKoTQl8mpRKuPf3vau2EaaRY
9SeYNyK+K6JQKJ5V/seF/+12m77ozfyB3ffPXb1R4vvb67SgReivdE+49HJr
tEmqWWtjG00rt4279axb6FcZOZJKSCOgGHPup9amDeRztVw4+LrvCbKUb0qL
OcUXiBKUXk5h9S19z+X1veJW+p67Ul25mb7nkLX75+h7Tmh/f9P3bqTvheX6
m573D6XnBTl1W2UvPshVBnRr6Sv035hydsSGJ8yRKbXl1Enrzzl9UPwNeZRE
PrY0YGkG9c5IOSlvH+JPv6k+/3Cqz401n8y5fJXGUzT2RxHy5NOLjT3QtWx1
KbLU8G/o1m6uUm/8uiwePrr/5KoW+nH083F1K/8SzdF995Hsjp8xaL9asyK1
3N/sVAJa/LNal8KPiqIpItv94Mu/VkdIhP6yHfm1ds/86JYNzY7rr9Q6sDd+
ZGcEgpx/XlN/1ZHktt56e/1F24i8rBtIpr/E3Fp/1t/wkOEjP0OY/2XX3pdz
IjT5OPlbHknl8PrrLz3lD/vrt0RqJ99kF/zq55iG6pI10vZutaJ3IQ8EgbPb
xO/+zJBetqGu0dC8NyrmPeImZfnryHuNVVkWlbtpUPBKJ5HLBQVv6SRy2aDg
LZ1ELhcUvKWTyBknUXFbJ5FrO4mKvxcnUbKKfnMU/UM5it7Zub2ts+g3j0u3
x4XGc2BcLb5JP8/ZIoHRP8vZQpkTxS8YZ7rR2dl2xLi2Iyaz/oKx9gud9LtK
a1YXuyjuZQ515c2/4Vl+i2O79dX8Cc3lxrgQhqwBGxRn5GsgUwoMbbUTxsLw
iyGsoBTOFtIHPtNwt4txqv6tMED2uHc3wgDd8LS6GgOUO+7d7SBA+dPe3SQk
dMVp724aEvq7Oe3jivztqP/7O+qvOutZDt3qjC+o3taqCtn2sjrklA7VQnSk
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
Pnb/H8de6yvmeAIA

-->

</rfc>
