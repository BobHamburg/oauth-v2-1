<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2246.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC5246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY I-D.ietf-oauth-mtls SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-mtls.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="oauth-2.1" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org</uri>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="February" day="28"/>

    <area>Security Area</area>
    <workgroup>Open Authentication Protocol</workgroup>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 1.0 protocol described
in RFC 5849.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>The OAuth 1.0 protocol (<xref target="RFC5849"/>), published as an informational
document, was the result of a small ad hoc community effort.  This
Standards Track specification builds on the OAuth 1.0 deployment
experience, as well as additional use cases and extensibility
requirements gathered from the wider IETF community.  The OAuth 2.0
protocol is not backward compatible with OAuth 1.0.  The two versions
may co-exist on the network, and implementations may choose to
support both.  However, it is the intention of this specification
that new implementations support OAuth 2.0 as specified in this
document and that OAuth 1.0 is used only to support existing
deployments.  The OAuth 2.0 protocol shares very few implementation
details with the OAuth 1.0 protocol.  Implementers familiar with
OAuth 1.0 should approach this document without any assumptions as to
its structure and details.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.0 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of four grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
Figure 3 in Section 4.1.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines four
grant types &#8211; authorization code, implicit, resource owner password
credentials, and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources are beyond the scope of
this specification and are defined by companion specifications such
as <xref target="RFC6750"/>.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (D) in
Figure 1).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
    +--------+                                           +---------------+
    |        |--(1)------- Authorization Grant --------->|               |
    |        |                                           |               |
    |        |<-(2)----------- Access Token -------------|               |
    |        |               & Refresh Token             |               |
    |        |                                           |               |
    |        |                            +----------+   |               |
    |        |--(3)---- Access Token ---->|          |   |               |
    |        |                            |          |   |               |
    |        |<-(4)- Protected Resource --| Resource |   | Authorization |
    | Client |                            |  Server  |   |     Server    |
    |        |--(5)---- Access Token ---->|          |   |               |
    |        |                            |          |   |               |
    |        |<-(6)- Invalid Token Error -|          |   |               |
    |        |                            +----------+   |               |
    |        |                                           |               |
    |        |--(7)----------- Refresh Token ----------->|               |
    |        |                                           |               |
    |        |<-(8)----------- Access Token -------------|               |
    +--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in Section 7.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.0 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in Section 2.1,</t>
  <t>provide its client redirection URIs as described in Section 3.1.2,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="I-D.ietf-oauth-mtls"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by Section 2.2.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (Section 6) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
Section 1.6 when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in Section 1.6 when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code grant
type and implicit grant type flows.  The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by Section 4.1.1, or a registered
extension value as described by Section 8.4.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in Section 4.1.2.1.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in Section 1.6 when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in Section 10.15.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.  The token
endpoint is used with every authorization grant except for the
implicit grant type (since an access token is issued directly).</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
Section 1.6 when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="client-authentication-1" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
Section 2.3 when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
     +----------+
     | Resource |
     |   Owner  |
     |          |
     +----------+
          ^
          |
         (2)
     +----|-----+          Client Identifier      +---------------+
     |         -+----(1)-- & Redirection URI ---->|               |
     |  User-   |                                 | Authorization |
     |  Agent  -+----(2)-- User authenticates --->|     Server    |
     |          |                                 |               |
     |         -+----(3)-- Authorization Code ---<|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (1)  (3)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |>---(4)-- Authorization Code ---------'      |
     |  Client |          & Redirection URI                  |
     |         |                                             |
     |         |<---(5)----- Access Token -------------------'
     +---------+       (w/ Optional Refresh Token)

   Note: The lines illustrating steps (1), (2), and (3) are broken into
   two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in Section 2.2.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in Section 3.1.2.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in Section 10.12.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in Section 4.1.1, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in Section 3.2.1.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in Section 4.1.1, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure><artwork><![CDATA[
 +---------+                                  +---------------+
 |         |                                  |               |
 |         |>--(A)- Client Authentication --->| Authorization |
 | Client  |                                  |     Server    |
 |         |<--(B)---- Access Token ---------<|               |
 |         |                                  |               |
 +---------+                                  +---------------+

                 Figure 6: Client Credentials Flow
]]></artwork></figure>

<t>The flow illustrated in Figure 6 includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
Section 5.1.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "example_parameter":"example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

<section anchor="successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
Section 7.1.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in Section 6.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by Section 3.3.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="error-response-1" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="I-D.ietf-oauth-mtls"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in Section 5.1.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in Section 5.2.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as <xref target="RFC6750"></xref>.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "bearer" token type defined in <xref target="RFC6750"/> is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.
Developers are advised to consult the <xref target="RFC6750"/>
specification before use.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="I-D.ietf-oauth-mtls"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
<section anchor="error-response-2" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in Section 11.4 for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
Section 11.1), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in Section 11.2.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by Section 11.2.</t>

</section>
<section anchor="defining-new-authorization-endpoint-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in Section 11.3.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (Section 4.1.2.1), the implicit grant error response
(Section 4.2.2.1), the token error response (Section 5.2), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
Section 11.4) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t><list style="symbols">
  <t>External user-agent - the native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
  <t>Embedded user-agent - the native application obtains the response
by directly communicating with the embedded user-agent by
monitoring state changes emitted during the resource load, or
accessing the user-agent's cookies storage.</t>
</list></t>

<t>When choosing between an external or embedded user-agent, developers
should consider the following:</t>

<t><list style="symbols">
  <t>An external user-agent may improve completion rate, as the
resource owner may already have an active session with the
authorization server, removing the need to re-authenticate.  It
provides a familiar end-user experience and functionality.  The
resource owner may also rely on user-agent features or extensions
to assist with authentication (e.g., password manager, 2-factor
device reader).</t>
  <t>An embedded user-agent poses a security challenge because resource
owners are authenticating in an unidentified window without access
to the visual protections found in most external user-agents.  An
embedded user-agent educates end-users to trust unidentified
requests for authentication (making phishing attacks easier to
execute).</t>
</list></t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<t>TODO: bring in the rest of RFC8252 here?</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="client-authentication-2" title="Client Authentication">

<t>The authorization server establishes client credentials with web
application clients for the purpose of client authentication.  The
authorization server is encouraged to consider stronger client
authentication means than a client password.  Web application clients
MUST ensure confidentiality of client passwords and other client
credentials.</t>

<t>The authorization server MUST NOT issue client passwords or other
client credentials to native application or user-agent-based
application clients for the purpose of client authentication.  The
authorization server MAY issue a client password or other credentials
for a specific installation of a native application client on a
specific device.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"></xref>.</t>

<t>When using the implicit grant type, the access token is transmitted
in the URI fragment, which can expose it to unauthorized parties.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>This specification does not provide any methods for the resource
server to ensure that an access token presented to it by a given
client was issued to that client by the authorization server.</t>

</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"></xref>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server SHOULD deploy other means to detect refresh
token abuse.</t>

<t>For example, the authorization server could employ refresh token
rotation in which a new refresh token is issued with every access
token refresh response.  The previous refresh token is invalidated
but retained by the authorization server.  If a refresh token is
compromised and subsequently used by both the attacker and the
legitimate client, one of them will present an invalidated refresh
token, which will inform the authorization server of the breach.</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes SHOULD be made over a secure
channel, and the client SHOULD require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes operate as plaintext bearer credentials, used to
verify that the resource owner who granted authorization at the
authorization server is the same resource owner returning to the
client to complete the process.  Therefore, if the client relies on
the authorization code for its own resource owner authentication, the
client redirection endpoint MUST require the use of TLS.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all access tokens already granted based on
the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

</section>
<section anchor="authorization-code-redirection-uri-manipulation" title="Authorization Code Redirection URI Manipulation">

<t>When requesting authorization using the authorization code grant
type, the client can specify a redirection URI via the "redirect_uri"
parameter.  If an attacker can manipulate the value of the
redirection URI, it can cause the authorization server to redirect
the resource owner user-agent to a URI under the control of the
attacker with the authorization code.</t>

<t>An attacker can create an account at a legitimate client and initiate
the authorization flow.  When the attacker's user-agent is sent to
the authorization server to grant access, the attacker grabs the
authorization URI provided by the legitimate client and replaces the
client's redirection URI with a URI under the control of the
attacker.  The attacker then tricks the victim into following the
manipulated link to authorize access to the legitimate client.</t>

<t>Once at the authorization server, the victim is prompted with a
normal, valid request on behalf of a legitimate and trusted client,
and authorizes the request.  The victim is then redirected to an
endpoint under the control of the attacker with the authorization
code.  The attacker completes the authorization flow by sending the
authorization code to the client using the original redirection URI
provided by the client.  The client exchanges the authorization code
with an access token and links it to the attacker's client account,
which can now gain access to the protected resources authorized by
the victim (via the client).</t>

<t>In order to prevent such an attack, the authorization server MUST
ensure that the redirection URI used to obtain the authorization code
is identical to the redirection URI provided when exchanging the
authorization code for an access token.  The authorization server
MUST require public clients and SHOULD require confidential clients
to register their redirection URIs.  If a redirection URI is provided
in the request, the authorization server MUST validate it against the
registered value.</t>

</section>
<section anchor="resource-owner-password-credentials" title="Resource Owner Password Credentials">

<t>The OAuth 2.0 resource owner password credentials grant type is often used for
legacy or migration reasons.  It reduces the overall risk of storing
usernames and passwords by the client but does not eliminate the need
to expose highly privileged credentials to the client.</t>

<t>This grant type carries a higher risk than other grant types because
it maintains the password anti-pattern this protocol seeks to avoid.
The client could abuse the password, or the password could
unintentionally be disclosed to an attacker (e.g., via log files or
other records kept by the client).</t>

<t>Additionally, because the resource owner does not have control over
the authorization process (the resource owner's involvement ends when
it hands over its credentials to the client), the client can obtain
access tokens with a broader scope than desired by the resource
owner.  The authorization server should consider the scope and
lifetime of access tokens issued via this grant type.</t>

<t>The resource owner password credentials grant MUST NOT be used.  This
grant type insecurely exposes the credentials of the resource owner
to the client.  Even if the client is benign, this results in an
increased attack surface (credentials can leak in more places than
just the AS) and users are trained to enter their credentials in
places other than the AS.</t>

<t>Furthermore, adapting the resource owner password credentials grant
to two-factor authentication, authentication with cryptographic
credentials (cf.  WebCrypto <xref target="webcrypto"/>, WebAuthn <xref target="webauthn"/>), and
authentication processes that require multiple steps can be hard or
impossible.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, resource owner passwords, and client
credentials MUST NOT be transmitted in the clear.  Authorization
codes SHOULD NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"></xref> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="cross-site-request-forgery" title="Cross-Site Request Forgery">

<t>Cross-site request forgery (CSRF) is an exploit in which an attacker
causes the user-agent of a victim end-user to follow a malicious URI
(e.g., provided to the user-agent as a misleading link, image, or
redirection) to a trusting server (usually established via the
presence of a valid session cookie).</t>

<t>A CSRF attack against the client's redirection URI allows an attacker
to inject its own authorization code or access token, which can
result in the client using an access token associated with the
attacker's protected resources rather than the victim's (e.g., save
the victim's bank account information to a protected resource
controlled by the attacker).</t>

<t>The client MUST implement CSRF protection for its redirection URI.
This is typically accomplished by requiring any request sent to the
redirection URI endpoint to include a value that binds the request to
the user-agent's authenticated state (e.g., a hash of the session
cookie used to authenticate the user-agent).  The client SHOULD
utilize the "state" request parameter to deliver this value to the
authorization server when making an authorization request.</t>

<t>Once authorization has been obtained from the end-user, the
authorization server redirects the end-user's user-agent back to the
client with the required binding value contained in the "state"
parameter.  The binding value enables the client to verify the
validity of the request by matching the binding value to the
user-agent's authenticated state.  The binding value used for CSRF
protection MUST contain a non-guessable value (as described in
Section 10.10), and the user-agent's authenticated state (e.g.,
session cookie, HTML5 local storage) MUST be kept in a location
accessible only to the client and the user-agent (i.e., protected by
same-origin policy).</t>

<t>A CSRF attack against the authorization server's authorization
endpoint can result in an attacker obtaining end-user authorization
for a malicious client without involving or alerting the end-user.</t>

<t>The authorization server MUST implement CSRF protection for its
authorization endpoint and ensure that a malicious client cannot
obtain authorization without the awareness and explicit consent of
the resource owner.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>In a clickjacking attack, an attacker registers a legitimate client
and then constructs a malicious site in which it loads the
authorization server's authorization endpoint web page in a
transparent iframe overlaid on top of a set of dummy buttons, which
are carefully constructed to be placed directly under important
buttons on the authorization page.  When an end-user clicks a
misleading visible button, the end-user is actually clicking an
invisible button on the authorization page (such as an "Authorize"
button).  This allows an attacker to trick a resource owner into
granting its client access without the end-user's knowledge.</t>

<t>To prevent this form of attack, native applications SHOULD use
external browsers instead of embedding browsers within the
application when requesting end-user authorization.  For most newer
browsers, avoidance of iframes can be enforced by the authorization
server using the (non-standard) "x-frame-options" header.  This
header can have two values, "deny" and "sameorigin", which will block
any framing, or framing by sites with a different origin,
respectively.  For older browsers, JavaScript frame-busting
techniques can be used but may not be effective in all browsers.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The authorization server, authorization endpoint, and client
redirection endpoint can be improperly configured and operate as open
redirectors.  An open redirector is an endpoint using a parameter to
automatically redirect a user-agent to the location specified by the
parameter value without any validation.</t>

<t>Open redirectors can be used in phishing attacks, or by an attacker
to get end-users to visit malicious sites by using the URI authority
component of a familiar and trusted destination.  In addition, if the
authorization server allows the client to register only part of the
redirection URI, an attacker can use an open redirector operated by
the client to construct a redirection URI that will pass the
authorization server validation but will send the authorization code
or access token to an endpoint under the control of the attacker.</t>

</section>
<section anchor="misuse-of-access-token-to-impersonate-resource-owner-in-implicit-flow" title="Misuse of Access Token to Impersonate Resource Owner in Implicit Flow">

<t>For public clients using implicit flows, this specification does not
provide any method for the client to determine what client an access
token was issued to.</t>

<t>A resource owner may willingly delegate access to a resource by
granting an access token to an attacker's malicious client.  This may
be due to phishing or some other pretext.  An attacker may also steal
a token via some other mechanism.  An attacker may then attempt to
impersonate the resource owner by providing the access token to a
legitimate public client.</t>

<t>In the implicit flow (response_type=token), the attacker can easily
switch the token in the response from the authorization server,
replacing the real access token with the one previously issued to the
attacker.</t>

<t>Servers communicating with native applications that rely on being
passed an access token in the back channel to identify the user of
the client may be similarly compromised by an attacker creating a
compromised application that can inject arbitrary stolen access
tokens.</t>

<t>Any public client that makes the assumption that only the resource
owner can present it with a valid access token for the resource is
vulnerable to this type of attack.</t>

<t>This type of attack may expose information about the resource owner
at the legitimate client to the attacker (malicious client).  This
will also allow the attacker to perform operations at the legitimate
client with the same permissions as the resource owner who originally
granted the access token or authorization code.</t>

<t>Authenticating resource owners to clients is out of scope for this
specification.  Any specification that uses the authorization process
as a form of delegated end-user authentication to the client (e.g.,
third-party sign-in service) MUST NOT use the implicit flow without
additional security mechanisms that would enable the client to
determine if the access token was issued for its use (e.g., audience-
restricting the access token).</t>

<t>TODO: Bring in the rest of the Security BCP attack description here</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="oauth-access-token-types-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
Section 11.2.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
</section>
<section anchor="oauth-parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-authorization-endpoint-response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-extensions-error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(Section 4.1.2.1), implicit grant error response
(Section 4.2.2.1), token error response (Section 5.2), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2246;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC5246;
&RFC6125;
&RFC8446;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

<reference anchor="OAuth-HTTP-MAC" >
  <front>
    <title>Message Authentication Code (MAC) Tokens</title>
    <author initials="J." surname="Richer" fullname="Justin Richer">
      <organization>The MITRE Corporation</organization>
    </author>
    <author initials="W." surname="Mills" fullname="William Mills">
      <organization>Yahoo! Inc.</organization>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle Corporation</organization>
    </author>
    <date year="2014" month="January" day="15"/>
  </front>
</reference>
&RFC7522;
&RFC6819;
&RFC5849;
&RFC6750;
&I-D.ietf-oauth-mtls;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.ietf-oauth-token-binding;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in Section 2.3.1:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in Section 2.3.1:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in Section 3.3:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, 4.1.2.1,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections 4.1.2.1,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="username-syntax" title="&quot;username&quot; Syntax">

<t>The "username" element is defined in Section 4.3.2:</t>

<figure><artwork><![CDATA[
 username = *UNICODECHARNOCRLF
]]></artwork></figure>

</section>
<section anchor="password-syntax" title="&quot;password&quot; Syntax">

<t>The "password" element is defined in Section 4.3.2:</t>

<figure><artwork><![CDATA[
 password = *UNICODECHARNOCRLF
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The initial OAuth 2.0 protocol specification was edited by David
Recordon, based on two previous publications: the OAuth 1.0 community
specification <xref target="RFC5849"></xref>, and OAuth WRAP (OAuth Web Resource
Authorization Profiles).  Eran Hammer then edited many
of the intermediate drafts that evolved into this RFC.  The Security
Considerations section was drafted by Torsten Lodderstedt, Mark
McGloin, Phil Hunt, Anthony Nadalin, and John Bradley.  The section
on use of the "application/x-www-form-urlencoded" media type was
drafted by Julian Reschke.  The ABNF section was drafted by Michael
B. Jones.</t>

<t>The OAuth 1.0 community specification was edited by Eran Hammer and
authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris
Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler,
Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.</t>

<t>The OAuth WRAP specification was edited by Dick Hardt and authored by
Brian Eaton, Yaron Y. Goland, Dick Hardt, and Allen Tom.</t>

<t>This specification is the work of the OAuth Working Group, which
includes dozens of active and dedicated participants.  In particular,
the following individuals contributed ideas, feedback, and wording
that shaped and formed the final specification:</t>

<t>Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden
Bell, John Bradley, Marcos Caceres, Brian Campbell, Scott Cantor,
Blaine Cook, Roger Crew, Leah Culver, Bill de hOra, Andre DeMarre,
Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor
Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert,
Yaron Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer,
Dick Hardt, Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones,
Terry Jones, John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara,
Rasmus Lerdorf, Torsten Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul
Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin,
Laurence Miao, William Mills, Chuck Mortimore, Anthony Nadalin,
Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob
Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner,
Jeremy Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson,
Allen Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar
Woodward.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAM2WV4AA+y9e3sbx5Ev/H9/inmZJxGRALRI3Wzt6mSpmy3HshRRjk+S
J0dnCAzJiYAZLAYgRTs+n/2ta3d1Tw9Iyk6y2bWe3VgCMD19qa57/Woymbh1
vZ5XD4u3Z1Xx6nCzPisO9vYL/Eu7qr8r13XbFM9X5aK6aFfv3aydNvD3h0Vb
wi8m8FM3K9fw74PbB7cntw8mB586Vy9XD4v1atOtD27f/uz2gStXVfmQR3fv
Lx4WL5p1tWqq9eTpqjxZu2m5flh065lz03ZWN6cPi003KbtpXbtl/dAVxbqd
Piwuqw7+2rWr9ao66fy/Lxfhn66kaeMjE/j/oqgb+ObpXvFFuZqt6ROe/dN6
+t58WC3Kev6wmMGne2f46X+c4id703ZB329W9cPibL1ePvzkE/wR/WavXZ3G
LzrcK17DUqfva/Oqw3IFO2g/l7eV+MV/LPmL/qs6eBf9JP6Fed3bveKrdjar
Vt26ilb3tsWPmt638uI1f/0f8/D1HhyGc027WsCBn1e4gW+ePznY3/9M/3pw
977+9f6++esD/eun+5/KX+/cP9DH7nz2qf727v0D/e3dz+7qD+4dHNz3f71z
1//Vv+3+/sE9+eund/nTb44Oj568ePGQ1iTUu/OknVWz4gmcTDkF4iqOqnUx
mRQPJsf1ujhcVKt6WjbF0bpsZnB4Bf68OGlXQIonvGo4JCLL6VnZnFbj4vDr
oxfF/76zd3eH3hMoK+zzjh/3axqgnPsXdDBYB3PbrCt+nm/JPuwH/PPbO0/2
3jx7MjlbL+Z3b+9P9j/77LN92OKH5rsPi/kErs+n+/u4Q67WefLp0F2afPH2
7evJy8Mn8Va8rLquPK3oDlfNGiZIq6Ml78KvR0Ag76umyy1sIkv7Ei5v3RRv
6ulZtZLvhOy+3Es/hovA/OPli7dvnsGLVst2RS9NRv22ns/rclG8hP928ajf
7iWf0qB/LM/a9v+DvZzuJUN9UTZN1RVvu+lZe1I19Wk83Bd7/a/00ddn9bz4
YtOs40de78Uf0gReATnNq96SlOft353g8d1jAn0A1Kxk+6m/Ovc+9dR+/8G9
2/jXF5One3W1PpkwF12s513m41W5yn1ade1mNa0mdTPDo4XLnPlVV02Bk6wv
J+t2WU9zv1gjDcDtaIjjwvcX1TF+0cTE9G11nBASsLSmOHz9gq5POZ0CtcEI
xevN8byeFr+rLosnq2qGvy/nXfFVdV7Ni/08rSl7flzOT8rmu/hz4KZPvqu6
93UXfw7090U7O636H3/ZNumnL7OfwtC/2yzKVe/Tr+qyjT98gx82M2CdTRN/
8wy+2TSz42p1amjiZQkcBCnjM2Hn88DOLy4u9i7uoNz45O2bT/A3n+BN142f
7E/ws9t3bt/9hM9jurpcrtv+gTyhz09X5fLsEo/Cspgvy2ZTri5xCg+GNx32
5dty3Qk5b5/lA5olvJdfC+/DeT64DYwJ5/lqWTUvnsaT5M/g2sAlna53HPyZ
ADcuj7s18mfnYm2jjLSNE9U2iqopj+dwy8tifVavZhMQhetLVy6Xc2Vq67Zo
j9clsKp5vahBlAlF4hfAl5FBFl21Oq+nwNKrGuh4VcCij6szILmiPYGh9UIV
7UUD3x5fws0H9oYzXSNhwzDwxlV7Duy9RgkBC6hpjPVFBVIWxkzHABlAH8ev
b2nwcj5vL3Bc+IEzyyryy5LlwGf1usPhC577XgEcF65Gt6ym9Yk+t6qW83KK
OwYzaI+7dl6t4V9rv9v7e7cLWAsoVO28mFXddFUfVzOHrP75kwJZ1R4f1aKe
zeaVcyATV+1sQ0suvv9Fbf75g3tk/uBP6UWwb7NaxOF0XgMjmOAW4LbEAmkB
Amk+pmf4d25V/ecGNr6jPaeFI7tbg4zFk/WbvIsrqKLPRrhDuKPyKtxo8zbY
7gs4fHqX/GLTySEkh3erc9PAv2CbYVntChQlPBQkgxrE6MC5dYH6XGbi3ThH
LB3oLHBGeLzmxTRfR/uJ7yroXXLo+LsSz7UD5rqCbYZpwT1Z8LHTReDpgN7w
a3pkYLIrnMx/bmp4La6uA2FSRVPESy27Ek0OWf/JZr2Bn286IO31JUgZoGx4
Acy06+D2zuCy4OMgPsvVZF19WO/RbI5o+zMv3yxBxK7D4zG1jJFal3DDcUw+
RpZwwCfL98DhO9zDBu43PAN/8eN0e9s34RRvWQtTgskfr9rScpChrejTHxwt
rPMcSSo+Xj7IdrOGs7nEMcrjeo7ThuGVRIrZhnWLwktU4l+ep3Wb4w702fYE
B/Cv5IW9SV4H6mjTruFX5yDgY26Ish7IdwMUY4gKx9Q50lPE9MJzc/vrGleK
VLYABbGYwbG1cNfonFFv1itlhsftkqPgCT9pF7B/i7qriP82l0O3CVe6ma/x
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

-->

</rfc>

