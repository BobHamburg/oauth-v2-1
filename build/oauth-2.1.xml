<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="oauth-2.1" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org</uri>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="February" day="28"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 1.0 protocol described
in RFC 5849.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>The OAuth 1.0 protocol (<xref target="RFC5849"/>), published as an informational
document, was the result of a small ad hoc community effort.  This
Standards Track specification builds on the OAuth 1.0 deployment
experience, as well as additional use cases and extensibility
requirements gathered from the wider IETF community.  The OAuth 2.0
protocol is not backward compatible with OAuth 1.0.  The two versions
may co-exist on the network, and implementations may choose to
support both.  However, it is the intention of this specification
that new implementations support OAuth 2.0 as specified in this
document and that OAuth 1.0 is used only to support existing
deployments.  The OAuth 2.0 protocol shares very few implementation
details with the OAuth 1.0 protocol.  Implementers familiar with
OAuth 1.0 should approach this document without any assumptions as to
its structure and details.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.0 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.0 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in <xref target="csrf_countermeasures"/>.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t><list style="symbols">
  <t>External user-agent - the native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
  <t>Embedded user-agent - the native application obtains the response
by directly communicating with the embedded user-agent by
monitoring state changes emitted during the resource load, or
accessing the user-agent's cookies storage.</t>
</list></t>

<t>When choosing between an external or embedded user-agent, developers
should consider the following:</t>

<t><list style="symbols">
  <t>An external user-agent may improve completion rate, as the
resource owner may already have an active session with the
authorization server, removing the need to re-authenticate.  It
provides a familiar end-user experience and functionality.  The
resource owner may also rely on user-agent features or extensions
to assist with authentication (e.g., password manager, 2-factor
device reader).</t>
  <t>An embedded user-agent poses a security challenge because resource
owners are authenticating in an unidentified window without access
to the visual protections found in most external user-agents.  An
embedded user-agent educates end-users to trust unidentified
requests for authentication (making phishing attacks easier to
execute).</t>
</list></t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<t>TODO: bring in the rest of RFC8252 here?</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC8446;
&RFC5280;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, <xref target="authorization-code-error-response"/>,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The initial OAuth 2.0 protocol specification was edited by David
Recordon, based on two previous publications: the OAuth 1.0 community
specification <xref target="RFC5849"></xref>, and OAuth WRAP (OAuth Web Resource
Authorization Profiles).  Eran Hammer then edited many
of the intermediate drafts that evolved into this RFC.  The Security
Considerations section was drafted by Torsten Lodderstedt, Mark
McGloin, Phil Hunt, Anthony Nadalin, and John Bradley.  The section
on use of the "application/x-www-form-urlencoded" media type was
drafted by Julian Reschke.  The ABNF section was drafted by Michael
B. Jones.</t>

<t>The OAuth 1.0 community specification was edited by Eran Hammer and
authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris
Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler,
Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.</t>

<t>The OAuth WRAP specification was edited by Dick Hardt and authored by
Brian Eaton, Yaron Y. Goland, Dick Hardt, and Allen Tom.</t>

<t>This specification is the work of the OAuth Working Group, which
includes dozens of active and dedicated participants.  In particular,
the following individuals contributed ideas, feedback, and wording
that shaped and formed the final specification:</t>

<t>Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden
Bell, John Bradley, Marcos Caceres, Brian Campbell, Scott Cantor,
Blaine Cook, Roger Crew, Leah Culver, Bill de hOra, Andre DeMarre,
Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor
Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert,
Yaron Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer,
Dick Hardt, Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones,
Terry Jones, John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara,
Rasmus Lerdorf, Torsten Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul
Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin,
Laurence Miao, William Mills, Chuck Mortimore, Anthony Nadalin,
Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob
Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner,
Jeremy Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson,
Allen Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar
Woodward.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAIX3Xl4AA+x9e3cbx5Xn//Up+tAnMekAkEjJkiyPNkO9bCXWI6IUb5KT
VZpAk+wI6MagAVKMo/3se59Vt6qrQcr2JDOz0e44EtCorset+76/Ox6P3bpe
z6v7xZuzqnh5uFmfFQeT/QL/0q7qv5Xrum2Kp6tyUV20q/du1k4b+Pv9oi3h
iTE86mblGv59cPPg5vjmwfjgnnP1cnW/WK823frg5s2vbh64clWV93l09/7i
fvGsWVerplqPH6/Kk7Wbluv7RbeeOTdtZ3Vzer/YdOOym9a1W9b3XVGs2+n9
4rLq4K9du1qvqpPO//tyEf7pSpo2/mQM/1cUdQPfPJ4U35ar2Zo+4dk/rqfv
zYfVoqzn94sZfDo5w0///RQ/mUzbBX2/WdX3i7P1enn/xg18iJ6ZtKvT+EWH
k+IVLHX6vjavOixXsIP2c3lbiV/8+5K/6L+qg3fRI/ET5nVvJsV37WxWrbp1
Fa3uTYsfNb1v5cVr/vrf5+HrCRyGc027WsCBn1e4ga+fPjrY3/9K/3pn/074
61396739e/LXW3cO9NlbX93TZ2/fOdBnb391Wx/48uDgjv/rrdvy1zv7B1/K
X+/dvh0euHcT//r26PDo0bNn92khQrI7j9pZNSsewXGUU6Co4qhaF+NxcXd8
XK+Lw0W1qqdlUxyty2YGJ1bg48VJuwL6O+GlwskQLU7Pyua0GhWHL46eFf/7
1uT2Dr0nkFPY3B0/7gsaoJz7F3QwWAdz26wr/j1fjX3YD/jn97ceTV4/eTQ+
Wy/mt2/uj/e/+uqr/YMDWr5+92ExH8Odube/jzvkap2nP5K7sHe6X/f86Xx5
z+/tnYM7X/pnv9rXDb17867f2/3b4a/3ss/SCM/Gjyd1tT4Z81Vflavcp1XX
blbTalw3cDFKJK3MU101BbpeX47X7bKe+ieOV+VsXl3KQ3+9WI+rZopHOu7W
uHP9gdbt+6qB022ITcD3F9UxftHEdPF9dUwcrGrWOCk4JbiHTXH46hkdfzmd
Vl0HIxSvNsfzelr8trosHq2qGT5fzrviu+q8mhf7OSIYe57ysJyflM3f4s+B
BTz6W9W9r7v4898AD2pnp1X/49+0Tfrp8+ynMPRvN4ty1fv0u7ps4w9f44fN
DO5708TfPIFvNs3suCLepRT6vIQbACx8/yvhQfPAgy4uLiYXt5DZ3Xjz+gY+
cwMpVTd+vD/Gz27eunn7Bp/HdHW5XLf9A3lEn5+uyuXZJR6FvSK/KZtNubrE
Kdwd3nTYl+/Lddc215jlXZolvJdfC+/Ded69CRcL5/lyWTXPHseT5M+ASzRN
NV3j9F4+P3yVPNPM66Yqnm/m63pRzeoykZSvVi0Iq3ZO9PasmYEMhGV5DoTU
pz8AznVIhAgM2UtEO/JruVvdFjpEutqcnPSI82h6Ni+nZ+sesbwoZyUsoTfK
Ub1YtE1Ccq8mxeu2qxpPLvab5+UMvoo/BpF0OK3izx7BICAzq/m6bcaHx7M6
/voh3KT2sloZajhcruo50sJB/qDbcj2dbLobnu/eeNxeNPO2nI39R/DLF8+O
3ty7eXN851Z8hvh5cbSspnDXhQPw4fHD4/1R8ezF05evnx++efbyRXH05NHb
18/e/MHS6+NqWi1gV3CS+8On8z2sbbNa9U7ncTtTKrY380V1sU4/hqv8qlrN
m2rV2+lX7fx9/OHRpPhms1yX/ZHL4+NNF+8mbOa0W00nTd2tJ6ft+Y1l2Iou
3JHJcyDREjjXtstS6EPF/uTmFnJ9AYRWvq8Xm1XZo8CHLA2uwwqBZkCSPweG
Xa/arkduz0FHrBftqurtw2/KS8t1NnCV+2QGG9PC6uoZakU3OiCUTj4YT3m5
44Usd7z/7uYEBTqM8O2bN6/Gh2/ffBtv1LeXy2q1rj6sizersulOgGiUSRS7
+Jsb+5P9vfuJvLLE9nK6boXWDoa3FgjlaV3NUTD2thY4yfTsPW5He1F2y3cg
6mr/e3Om3x8evQJ1qirXxdFZBdzoCFQdONRx8bY5B7aB85nBaPBr2IWugLtW
PG1XF3jhdvxw0X2d4mgdDtbRWBOaATFq89UNM/47P/47GP+djv+O5vWO5qVb
/ujo1figvw4gStBvcfasduBNqaeXItYPBmYaixAY+sA5NwZ1sjwGJg4KpnOx
jVRGnP9EbaSiasrjOexaWazP6tVsDAr8+tKVy6VnNMDw2+N1WTfFvF7UuKel
lwSgWCJVFLBd5/UUdNKqBsJYFcAYjqsz0DmK9gSGVsULThR4Q3F8WbQgwyuc
6Ro1GxgG3rhqYVuBDEC4wAJqGmN9UYFtAGOmY+Bp4sfx61savJzP2wscFx5w
ZllFflmyHPisBjKB4Que+6QAOxN0I7xU9Yn+blUtQVhVTE/tcdfOqzX8a+13
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
ktjy53KskDkmZTNcTArTeijNzncZtEPItV3OS2WGfIXDFB7Ed5qfPzr48s7Q
4w8Pj57cuQ0bN37y4tHLx092j749hMd3D48ePXu2Gw22t7eXelbrCNCfV7eD
r9uhbDGfgqGflZ3jv+Ivn1N1RLu6BOMmxD+L3edvnnlYYx9XULAzRLSjRvAa
z6bhaUd2uM23JmCAJMYYgtapynsJWbxdVG5dTc8aon44zk4CStiRj0AcgMLH
7cn4mPxDNlnZXwL1ZMv4nU5C4jP0j+RQcdGE1Yc5quta8DEEqqdmD3RoEcgu
NH4ePfWcRFQ15/WqbfgBBdD8fO3DpnTW8Wv7LM4TwBYeZ4nkn8jk7CV9Ftl0
WYkX3Vbet00oxPN4TNRPdOaVzRxamGr1ad5XFpzTJms5E0m8dmnYqIjzza5T
jfv7KAUJA+8wZS6DmvwoqLPBDi49zLKYiPrjP4oYY/8n7zgHS3+pLcZGGqCg
3ddbXZ8I7D9lNSZQXPIyIh7PaZNrp/hJnTIBgtrU2xrn/SczQuDpa3ajwaE4
iNUf481AYNeHSOIqZmbW2hs1io7za6gixW+7l9A4W6zQKBHRmGM8+dxR7T+i
GjVKZQuAZBP80G+OynMWetYaycbIqTt5vQTYYr9LYj+Lf8Aa0Skwm8GO8/ix
IdtHDKQVWDNjLJEOOfrt6pSQYfqE3a1O3k3bDUYSFsD/0WiRznQB5G+wiNdP
VhkMDMvmi1S/p91HTV47t3Oy7apCC0+MdK61kaezLrgYPm6dn2TsuSJFL+Zu
UfImTxZTMH80Wtw3T4DX+9K4X0cM6wHe+DxCG9Hbgw+XfxOlpCh+ae/gg7P1
etn94tbhLw6ewv/nIX5x8ESWD38DboxfHIffx+zlwZ2T2fvfla8WX+7P9289
Ptq8nx5+e+v57MPdd3Dg02//MNs/r281N8+e//EPQ2MIi3qAHOOaUHjDwf7Y
bjYpRTb3vKSyGOlTZQQR49oz8/M9oEPA3hTvS0/yQWP4SnddwBXqXC+hcFZN
a26EjNKzez/gWCMCj/uvUTdlmByrVoH090JNlR8c47mhPH2LZW8o3/V9tt6n
5b1VqdNFwux4tO5nvapZR4GgPzh/aDlnZF8ybEmh0N7e2bxPDvbPa0J5rpOy
HDyfnPZTXFf7Sau3ih+l8ri+ykPKS15dyYWk2casTCuant9qGDadx+BMjg/L
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

-->

</rfc>

