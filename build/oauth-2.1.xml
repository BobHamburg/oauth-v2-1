<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="oauth-2.1" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org</uri>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="February" day="28"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 1.0 protocol described
in RFC 5849.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>The OAuth 1.0 protocol (<xref target="RFC5849"/>), published as an informational
document, was the result of a small ad hoc community effort.  This
Standards Track specification builds on the OAuth 1.0 deployment
experience, as well as additional use cases and extensibility
requirements gathered from the wider IETF community.  The OAuth 2.0
protocol is not backward compatible with OAuth 1.0.  The two versions
may co-exist on the network, and implementations may choose to
support both.  However, it is the intention of this specification
that new implementations support OAuth 2.0 as specified in this
document and that OAuth 1.0 is used only to support existing
deployments.  The OAuth 2.0 protocol shares very few implementation
details with the OAuth 1.0 protocol.  Implementers familiar with
OAuth 1.0 should approach this document without any assumptions as to
its structure and details.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.0 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.0 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in Section 10.15.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in Section 2.2.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in Section 3.1.2.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in Section 10.12.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in Section 4.1.1, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in Section 3.2.1.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in Section 4.1.1, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
Section 5.1.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

<section anchor="successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
Section 7.1.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in Section 6.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by Section 3.3.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in Section 5.1.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in Section 5.2.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in Section 3.3.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
Section ???.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="error-response-1" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in Section 11.4 for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
Section 11.1), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in Section 11.2.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by Section 11.2.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in Section 11.3.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (Section 5.2), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
Section 11.4) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t><list style="symbols">
  <t>External user-agent - the native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
  <t>Embedded user-agent - the native application obtains the response
by directly communicating with the embedded user-agent by
monitoring state changes emitted during the resource load, or
accessing the user-agent's cookies storage.</t>
</list></t>

<t>When choosing between an external or embedded user-agent, developers
should consider the following:</t>

<t><list style="symbols">
  <t>An external user-agent may improve completion rate, as the
resource owner may already have an active session with the
authorization server, removing the need to re-authenticate.  It
provides a familiar end-user experience and functionality.  The
resource owner may also rely on user-agent features or extensions
to assist with authentication (e.g., password manager, 2-factor
device reader).</t>
  <t>An embedded user-agent poses a security challenge because resource
owners are authenticating in an unidentified window without access
to the visual protections found in most external user-agents.  An
embedded user-agent educates end-users to trust unidentified
requests for authentication (making phishing attacks easier to
execute).</t>
</list></t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<t>TODO: bring in the rest of RFC8252 here?</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="oauth-access-token-types-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
Section 11.2.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="oauth-parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-authorization-endpoint-response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-extensions-error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (Section 5.2), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC8446;
&RFC5280;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in Section 3.3:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, <xref target="authorization-code-error-response"/>,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The initial OAuth 2.0 protocol specification was edited by David
Recordon, based on two previous publications: the OAuth 1.0 community
specification <xref target="RFC5849"></xref>, and OAuth WRAP (OAuth Web Resource
Authorization Profiles).  Eran Hammer then edited many
of the intermediate drafts that evolved into this RFC.  The Security
Considerations section was drafted by Torsten Lodderstedt, Mark
McGloin, Phil Hunt, Anthony Nadalin, and John Bradley.  The section
on use of the "application/x-www-form-urlencoded" media type was
drafted by Julian Reschke.  The ABNF section was drafted by Michael
B. Jones.</t>

<t>The OAuth 1.0 community specification was edited by Eran Hammer and
authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris
Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler,
Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.</t>

<t>The OAuth WRAP specification was edited by Dick Hardt and authored by
Brian Eaton, Yaron Y. Goland, Dick Hardt, and Allen Tom.</t>

<t>This specification is the work of the OAuth Working Group, which
includes dozens of active and dedicated participants.  In particular,
the following individuals contributed ideas, feedback, and wording
that shaped and formed the final specification:</t>

<t>Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden
Bell, John Bradley, Marcos Caceres, Brian Campbell, Scott Cantor,
Blaine Cook, Roger Crew, Leah Culver, Bill de hOra, Andre DeMarre,
Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor
Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert,
Yaron Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer,
Dick Hardt, Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones,
Terry Jones, John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara,
Rasmus Lerdorf, Torsten Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul
Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin,
Laurence Miao, William Mills, Chuck Mortimore, Anthony Nadalin,
Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob
Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner,
Jeremy Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson,
Allen Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar
Woodward.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAPfyXl4AA+x9+Xsbx5Xg7/VX9Ed/iUkPAInUaXm0M9RlK7GOiFK8Sb6s
0gSaZEdANwYNkGIc7d++76x6VV0NUrZnsrMbzkQmge46Xr169zEej926Xs+r
B8Xbs6p4dbhZnxUHk/0Cf2lX9d/Kdd02xbNVuagu2tUHN2unDfz+oGhLeGIM
j7pZuYa/D24e3BzfPBgf3HeuXq4eFOvVplsf3Lz59c0DV66q8gGP7j5cPCie
N+tq1VTr8ZNVebJ203L9oOjWM+em7axuTh8Um25cdtO6dsv6gSuKdTt9UFxW
Hfzatav1qjrp/N+Xi/CnK2nZ+MoY/lcUdQPfPJkU35Wr2Zo+4dU/qacfzIfV
oqznD4oZfDo5w0///RQ/mUzbBX2/WdUPirP1evngxg18iJ6ZtKvTeKLDSfEa
tjr9UJupDssVQNB+LrOV+MW/L/mL/lQdzEWPxE+Y6d5Oiu/b2axadesq2t3b
Fj9qet/KxGv++t/n4esJHIZzTbtawIGfVwjAN88eH+zvf62/3t2/G369p7/e
378vv966e6DP3vr6vj57++6BPnv769v6wJ2Dg7v+11u35de7+wd35Nf7t2+H
B+7fxF/fHR0ePX7+/AFtRFB253E7q2bFYziOcgoYVRxV62I8Lu6Nj+t1cbio
VvW0bIqjddnM4MQKfLw4aVeAfye8VTgZwsXpWdmcVqPi8OXR8+J/3prc3qF5
AjoF4O74cV/SAOXcT9DBYB2sbbOu+H2+GvsAD/jzh1uPJ2+ePh6frRfz2zf3
x/tff/31/sEBbV+/+7iYj+HO3N/fRwi5Wtfpj+QewE7hdd+fzp37HrZ3D+7e
8c9+va8AvXfznoft/u3w6/3sszTC8/GTSV2tT8Z81VflKvdp1bWb1bQa1w1c
jBJRK/NUV00Br9eX43W7rKf+ieNVOZtXl/LQXy/W46qZ4pGOuzVCrj/Quv1Q
NXC6DZEJ+P6iOsYvmhgvfqiOiYJVzRoXBacE97ApDl8/p+Mvp9Oq62CE4vXm
eF5Pi99Wl8XjVTXD58t5V3xfnVfzYj+HBGNPUx6V85Oy+Vv8OZCAx3+rug91
F3/+G6BB7ey06n/8m7ZJP32R/RSG/u1mUa56n35fl2384Rv8sJnBfW+a+Jun
8M2mmR1XRLsUQ1+UcAOAhO9/LTRoHmjQxcXF5OIWErsbb9/cwGduIKYq4Mf7
Y/zs5q2bt2/weUxXl8t12z+Qx/T56apcnl3iUdgr8puy2ZSrS1zCvWGgA1x+
KNdd21xjlfdolTAvTwvz4Trv3YSLhet8taya50/iRfJnQCWappqucXmvXhy+
Tp5p5nVTFS8283W9qGZ1mXDK16sWmFU7J3x73syAB8K2PAVC7NMXgHIdEiIC
QfYc0Y78Ru5WtwUPEa82Jyc95Dyans3L6dm6hywvy1kJW+iNclQvFm2ToNzr
SfGm7arGo4v95kU5g6/ij4ElHU6r+LPHMAjwzGq+bpvx4fGsjr9+BDepvaxW
BhsOl6t6jrhwkD/otlxPJ5vuhqe7N560F828LWdj/xG8+fL50dv7N2+O796K
zxA/L46W1RTuulAAPjx+eLw/Kp6/fPbqzYvDt89fvSyOnj5+9+b52z9YfH1S
TasFQAUXuT98Oj/A3jarVe90nrQzxWJ7M19WF+v0Y7jKr6vVvKlWPUi/bucf
4g+PJsW3m+W67I9cHh9vuhiaAMxpt5pOmrpbT07b8xvLAIou3JHJC0DREijX
tstS6EPF/uTmFnR9CYhWfqgXm1XZw8BHzA2uQwoBZ4CTvwCCXa/aroduL0BG
rBftqurB4TflpaU6G7jKfTQDwLSwu3qGUtGNDhClkw/GU97ueCHbHe+/vzlB
hg4jfPf27evx4bu338WA+u5yWa3W1cd18XZVNt0JII0SiWIX37mxP9nfe5Dw
K4tsr6brVnDtYBi0gCjP6mqOjLEHWqAk07MPCI72ouyW74HV1f59c6Y/HB69
BnGqKtfF0VkF1OgIRB041HHxrjkHsoHrmcFo8DZAoSvgrhXP2tUFXrgdP1x0
X6c4WoeDdTTWhFZAhNp8dcOM/96P/x7Gf6/jv6d1vad1KcgfH70eH/T3AUgJ
8i2unsUOvCn19FLY+sHASmMWAkMfOOfGIE6Wx0DEQcB0LtaRyojyn6iOVFRN
eTwHqJXF+qxezcYgwK8vXblcekIDBL89Xpd1U8zrRY0wLT0nAMESsaIAcJ3X
U5BJqxoQY1UAYTiuzkDmKNoTGFoFLzhRoA3F8WXRAg+vcKVrlGxgGJhx1QJY
AQ2AucAGahpjfVGBbgBjpmPgaeLH8fQtDV7O5+0FjgsPOLOtIr8t2Q58VgOa
wPAFr31SgJ4JshFeqvpE31tVS2BWFeNTe9y182oNf609tIGoFEu9NDNA5lV9
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
A+xmiPbacm7n/mDa75v/B2gxj+sTOAIA

-->

</rfc>

