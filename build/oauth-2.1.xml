<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY RFC7595 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7595.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY RFC7591 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7591.xml">
<!ENTITY RFC8707 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8707.xml">
<!ENTITY RFC8414 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8414.xml">
<!ENTITY RFC8418 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8418.xml">
<!ENTITY RFC8705 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8705.xml">
<!ENTITY RFC7230 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.bradley-oauth-jwt-encoded-state SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.bradley-oauth-jwt-encoded-state.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="oauth-2.1" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org</uri>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="February" day="28"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 1.0 protocol described
in RFC 5849.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>The OAuth 1.0 protocol (<xref target="RFC5849"/>), published as an informational
document, was the result of a small ad hoc community effort.  This
Standards Track specification builds on the OAuth 1.0 deployment
experience, as well as additional use cases and extensibility
requirements gathered from the wider IETF community.  The OAuth 2.0
protocol is not backward compatible with OAuth 1.0.  The two versions
may co-exist on the network, and implementations may choose to
support both.  However, it is the intention of this specification
that new implementations support OAuth 2.0 as specified in this
document and that OAuth 1.0 is used only to support existing
deployments.  The OAuth 2.0 protocol shares very few implementation
details with the OAuth 1.0 protocol.  Implementers familiar with
OAuth 1.0 should approach this document without any assumptions as to
its structure and details.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.0 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
<xref target="fig-authorization-code-flow"/> in <xref target="authorization-code-grant"/>.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (4) in
<xref target="fig-refresh-token-flow"/>).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
+--------+                                           +---------------+
|        |--(1)------- Authorization Grant --------->|               |
|        |                                           |               |
|        |<-(2)----------- Access Token -------------|               |
|        |               & Refresh Token             |               |
|        |                                           |               |
|        |                            +----------+   |               |
|        |--(3)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(4)- Protected Resource --| Resource |   | Authorization |
| Client |                            |  Server  |   |     Server    |
|        |--(5)---- Access Token ---->|          |   |               |
|        |                            |          |   |               |
|        |<-(6)- Invalid Token Error -|          |   |               |
|        |                            +----------+   |               |
|        |                                           |               |
|        |--(7)----------- Refresh Token ----------->|               |
|        |                                           |               |
|        |<-(8)----------- Access Token -------------|               |
+--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in <xref target="accessing-protected-resources"/>.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.0 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in <xref target="client-types"/>,</t>
  <t>provide its client redirection URIs as described in <xref target="redirection-endpoint"/>,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by <xref target="client-identifier"/>.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (<xref target="refreshing-an-access-token"/>) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in <xref target="tls-version"/> when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by <xref target="authorization-request"/>, or a registered
extension value as described by <xref target="new-response-types"/>.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in <xref target="authorization-code-error-response"/>.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in <xref target="tls-version"/> when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in <xref target="open-redirectors"/>.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
<xref target="tls-version"/> when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="token-endpoint-client-authentication" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
<xref target="client-authentication"/> when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
+----------+
| Resource |
|   Owner  |
|          |
+----------+
     ^
     |
    (2)
+----|-----+          Client Identifier      +---------------+
|         -+----(1)-- & Redirection URI ---->|               |
|  User-   |                                 | Authorization |
|  Agent  -+----(2)-- User authenticates --->|     Server    |
|          |                                 |               |
|         -+----(3)-- Authorization Code ---<|               |
+-|----|---+                                 +---------------+
  |    |                                         ^      v
 (1)  (3)                                        |      |
  |    |                                         |      |
  ^    v                                         |      |
+---------+                                      |      |
|         |>---(4)-- Authorization Code ---------'      |
|  Client |          & Redirection URI                  |
|         |                                             |
|         |<---(5)----- Access Token -------------------'
+---------+       (w/ Optional Refresh Token)

Note: The lines illustrating steps (1), (2), and (3) are broken into
two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in <xref target="client-identifier"/>.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in <xref target="redirection-endpoint"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in <xref target="csrf_countermeasures"/>.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="authorization-code-error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in <xref target="authorization-request"/>, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in <xref target="authorization-request"/>, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "refresh_token": "tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure title="Client Credentials Flow" anchor="fig-client-credentials-flow"><artwork><![CDATA[
     +---------+                                  +---------------+
     |         |                                  |               |
     |         |>--(A)- Client Authentication --->| Authorization |
     | Client  |                                  |     Server    |
     |         |<--(B)---- Access Token ---------<|               |
     |         |                                  |               |
     +---------+                                  +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-client-credentials-flow"/> includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
<xref target="access-token-successful-response"/>.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in <xref target="access-token-error-response"/>.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token": "2YotnFZFEjr1zCsicMWpAA",
  "token_type": "Bearer",
  "expires_in": 3600,
  "example_parameter": "example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in <xref target="access-token-successful-response"/>.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in <xref target="access-token-error-response"/>.</t>

<section anchor="access-token-successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
<xref target="access-token-types"/>.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in <xref target="refreshing-an-access-token"/>.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by <xref target="access-token-scope"/>.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="access-token-error-response" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
<xref target="access-token-scope"/>.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in <xref target="token-endpoint-client-authentication"/>.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="RFC8705"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in <xref target="access-token-successful-response"/>.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in <xref target="access-token-error-response"/>.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party
in possession of the token (a "bearer") can use the token in any way
that any other party in possession of it can.  Using a bearer token
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in <xref target="access-token-scope"/>.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
<xref target="bearer-token-error-codes"/>.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4)
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of)
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="bearer-token-error-response" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in <xref target="error-registry"/> for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="bearer-token-error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="RFC8705"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
<xref target="access-token-registry"/>), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in <xref target="parameters-registry"/>.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by <xref target="parameters-registry"/>.</t>

</section>
<section anchor="new-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in <xref target="response-types-registry"/>.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (<xref target="authorization-code-error-response"/>), the token error response (<xref target="access-token-error-response"/>), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
<xref target="error-registry"/>) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t>The native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<section anchor="authorization-flow-for-native-apps-using-the-browser" title="Authorization Flow for Native Apps Using the Browser">

<figure title="Native App Authorization via an External User-Agent" anchor="fig-native-app-authorization-flow"><artwork><![CDATA[
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
  |          User Device          |
  |                               |
  | +--------------------------+  | (5) Authorization  +---------------+
  | |                          |  |     Code           |               |
  | |        Client App        |---------------------->|     Token     |
  | |                          |<----------------------|    Endpoint   |
  | +--------------------------+  | (6) Access Token,  |               |
  |   |             ^             |     Refresh Token  +---------------+
  |   |             |             |
  |   |             |             |
  |   | (1)         | (4)         |
  |   | Authorizat- | Authoriza-  |
  |   | ion Request | tion Code   |
  |   |             |             |
  |   |             |             |
  |   v             |             |
  | +---------------------------+ | (2) Authorization  +---------------+
  | |                           | |     Request        |               |
  | |          Browser          |--------------------->| Authorization |
  | |                           |<---------------------|    Endpoint   |
  | +---------------------------+ | (3) Authorization  |               |
  |                               |     Code           +---------------+
  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+
]]></artwork></figure>

<t><xref target="fig-native-app-authorization-flow"/> illustrates the interaction between a native app and the
browser to authorize the user.</t>

<t><list style="numbers">
  <t>Client app opens a browser tab with the authorization request.</t>
  <t>Authorization endpoint receives the authorization request,
authenticates the user, and obtains authorization.
Authenticating the user may involve chaining to other
authentication systems.</t>
  <t>Authorization server issues an authorization code to the
redirect URI.</t>
  <t>Client receives the authorization code from the redirect URI.</t>
  <t>Client app presents the authorization code at the token
endpoint.</t>
  <t>Token endpoint validates the authorization code and issues the
tokens requested.</t>
</list></t>

</section>
<section anchor="using-inter-app-uri-communication-for-oauth-in-native-apps" title="Using Inter-App URI Communication for OAuth in Native Apps">

<t>Just as URIs are used for OAuth on the web to initiate
the authorization request and return the authorization response to
the requesting website, URIs can be used by native apps to initiate
the authorization request in the device's browser and return the
response to the requesting native app.</t>

<t>By adopting the same methods used on the web for OAuth, benefits seen
in the web context like the usability of a single sign-on session and
the security of a separate authentication context are likewise gained
in the native app context.  Reusing the same approach also reduces
the implementation complexity and increases interoperability by
relying on standards-based web flows that are not specific to a
particular platform.</t>

<t>Native apps MUST use an external
user-agent to perform OAuth authorization requests.  This is achieved
by opening the authorization request in the browser (detailed in
<xref target="authorization-request-native-app"/>) and using a redirect URI that will return the
authorization response back to the native app (defined in <xref target="authorization-response-native-app"/>).</t>

</section>
<section anchor="authorization-request-native-app" title="Initiating the Authorization Request from a Native App">

<t>Native apps needing user authorization create an authorization
request URI with the authorization code grant type per <xref target="authorization-code-grant"/>
using a redirect URI capable of being received by the native app.</t>

<t>The function of the redirect URI for a native app authorization
request is similar to that of a web-based authorization request.
Rather than returning the authorization response to the OAuth
client's server, the redirect URI used by a native app returns the
response to the app.  Several options for a redirect URI that will
return the authorization response to the native app in different
platforms are documented in <xref target="authorization-response-native-app"/>.  Any redirect URI that allows
the app to receive the URI and inspect its parameters is viable.</t>

<t>After constructing the authorization request URI, the app uses
platform-specific APIs to open the URI in an external user-agent.
Typically, the external user-agent used is the default browser, that
is, the application configured for handling "http" and "https" scheme
URIs on the system; however, different browser selection criteria and
other categories of external user-agents MAY be used.</t>

<t>This best practice focuses on the browser as the RECOMMENDED external
user-agent for native apps.  An external user-agent designed
specifically for user authorization and capable of processing
authorization requests and responses like a browser MAY also be used.
Other external user-agents, such as a native app provided by the
authorization server may meet the criteria set out in this best
practice, including using the same redirection URI properties, but
their use is out of scope for this specification.</t>

<t>Some platforms support a browser feature known as "in-app browser
tabs", where an app can present a tab of the browser within the app
context without switching apps, but still retain key benefits of the
browser such as a shared authentication state and security context.
On platforms where they are supported, it is RECOMMENDED, for
usability reasons, that apps use in-app browser tabs for the
authorization request.</t>

</section>
<section anchor="authorization-response-native-app" title="Receiving the Authorization Response in a Native App">

<t>There are several redirect URI options available to native apps for
receiving the authorization response from the browser, the
availability and user experience of which varies by platform.</t>

<t>To fully support native apps, authorization servers MUST offer
at least the three redirect URI options described in the following
subsections to native apps.  Native apps MAY use whichever redirect
option suits their needs best, taking into account platform-specific
implementation details.</t>

<section anchor="private-use-uri-scheme" title="Private-Use URI Scheme Redirection">

<t>Many mobile and desktop computing platforms support inter-app
communication via URIs by allowing apps to register private-use URI
schemes (sometimes colloquially referred to as "custom URL schemes")
like <spanx style="verb">com.example.app</spanx>.  When the browser or another app attempts to
load a URI with a private-use URI scheme, the app that registered it
is launched to handle the request.</t>

<t>To perform an authorization request with a private-use URI
scheme redirect, the native app launches the browser with a standard
authorization request, but one where the redirection URI utilizes a
private-use URI scheme it registered with the operating system.</t>

<t>When choosing a URI scheme to associate with the app, apps MUST use a
URI scheme based on a domain name under their control, expressed in
reverse order, as recommended by Section 3.8 of <xref target="RFC7595"/> for
private-use URI schemes.</t>

<t>For example, an app that controls the domain name <spanx style="verb">app.example.com</spanx>
can use <spanx style="verb">com.example.app</spanx> as their scheme.  Some authorization
servers assign client identifiers based on domain names, for example,
<spanx style="verb">client1234.usercontent.example.net</spanx>, which can also be used as the
domain name for the scheme when reversed in the same manner.  A
scheme such as <spanx style="verb">myapp</spanx>, however, would not meet this requirement, as
it is not based on a domain name.</t>

<t>When there are multiple apps by the same publisher, care must be
taken so that each scheme is unique within that group.  On platforms
that use app identifiers based on reverse-order domain names, those
identifiers can be reused as the private-use URI scheme for the OAuth
redirect to help avoid this problem.</t>

<t>Following the requirements of Section 3.2 of <xref target="RFC3986"/>, as there is
no naming authority for private-use URI scheme redirects, only a
single slash (<spanx style="verb">/</spanx>) appears after the scheme component.  A complete
example of a redirect URI utilizing a private-use URI scheme is:</t>

<figure><artwork><![CDATA[
com.example.app:/oauth2redirect/example-provider
]]></artwork></figure>

<t>When the authorization server completes the request, it redirects to
the client's redirection URI as it would normally.  As the
redirection URI uses a private-use URI scheme, it results in the
operating system launching the native app, passing in the URI as a
launch parameter.  Then, the native app uses normal processing for
the authorization response.</t>

</section>
<section anchor="claimed-https-scheme-uri-redirection" title="Claimed &quot;https&quot; Scheme URI Redirection">

<t>Some operating systems allow apps to claim <spanx style="verb">https</spanx> scheme <xref target="RFC7230"/>
URIs in the domains they control.  When the browser encounters a
claimed URI, instead of the page being loaded in the browser, the
native app is launched with the URI supplied as a launch parameter.</t>

<t>Such URIs can be used as redirect URIs by native apps.  They are
indistinguishable to the authorization server from a regular web-
based client redirect URI.  An example is:</t>

<figure><artwork><![CDATA[
https://app.example.com/oauth2redirect/example-provider
]]></artwork></figure>

<t>As the redirect URI alone is not enough to distinguish public native
app clients from confidential web clients, it is REQUIRED in
Section ??? that the client type be recorded during client
registration to enable the server to determine the client type and
act accordingly.</t>

<t>App-claimed <spanx style="verb">https</spanx> scheme redirect URIs have some advantages
compared to other native app redirect options in that the identity of
the destination app is guaranteed to the authorization server by the
operating system.  For this reason, native apps SHOULD use them over
the other options where possible.</t>

</section>
<section anchor="loopback-interface-redirection" title="Loopback Interface Redirection">

<t>Native apps that are able to open a port on the loopback network
interface without needing special permissions (typically, those on
desktop operating systems) can use the loopback interface to receive
the OAuth redirect.</t>

<t>Loopback redirect URIs use the <spanx style="verb">http</spanx> scheme and are constructed with
the loopback IP literal and whatever port the client is listening on.</t>

<t>That is, <spanx style="verb">http://127.0.0.1:{port}/{path}</spanx> for IPv4, and
<spanx style="verb">http://[::1]:{port}/{path}</spanx> for IPv6.  An example redirect using the
IPv4 loopback interface with a randomly assigned port:</t>

<figure><artwork><![CDATA[
http://127.0.0.1:51004/oauth2redirect/example-provider
]]></artwork></figure>

<t>An example redirect using the IPv6 loopback interface with a randomly
assigned port:</t>

<figure><artwork><![CDATA[
http://[::1]:61023/oauth2redirect/example-provider
]]></artwork></figure>

<t>The authorization server MUST allow any port to be specified at the
time of the request for loopback IP redirect URIs, to accommodate
clients that obtain an available ephemeral port from the operating
system at the time of the request.</t>

<t>Clients SHOULD NOT assume that the device supports a particular
version of the Internet Protocol.  It is RECOMMENDED that clients
attempt to bind to the loopback interface using both IPv4 and IPv6
and use whichever is available.</t>

</section>
</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="security-client-authentication" title="Client Authentication">

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="RFC8705"/> or
<spanx style="verb">private_key_jwt</spanx> <xref target="OpenID"/>. When asymmetric methods for client
authentication are used, authorization servers do not need to store
sensitive symmetric keys, making these methods more robust against a
number of attacks.</t>

<t>Authorization server MUST only rely on client authentication if the
process of issuance/registration and distribution of the underlying
credentials ensures their confidentiality.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

<t>The privileges an authorization server associates with a certain
client identity MUST depend on the assessment of the overall process
for client identification and client credential lifecycle management.
For example, authentication of a dynamically registered client just
ensures the authorization server it is talking to the same client again.
In contrast, if there is a web application whose developer's identity
was verified, who signed a contract and is issued a client secret
that is only used in a secure backend service, the authorization
server might allow this client to access more sensible services
or to use the client credential grant type.</t>

<section anchor="client-authentication-of-native-apps" title="Client Authentication of Native Apps">

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, it is NOT
RECOMMENDED for authorization servers to require client
authentication of public native apps clients using a shared secret,
as this serves little value beyond client identification which is
already provided by the <spanx style="verb">client_id</spanx> request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for native app clients MUST treat the client as a public
client (as defined in <xref target="client-types"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="native-app-client-impersonation"/>).</t>

</section>
</section>
<section anchor="native-app-registration" title="Registration of Native App Clients">

<t>Except when using a mechanism like Dynamic Client Registration
<xref target="RFC7591"/> to provision per-instance secrets, native apps are
classified as public clients, as defined in <xref target="client-types"/>;
they MUST be registered with the authorization server as
such.  Authorization servers MUST record the client type in the
client registration details in order to identify and process requests
accordingly.</t>

<t>Authorization servers MUST require clients to register their complete
redirect URI (including the path component) and reject authorization
requests that specify a redirect URI that doesn't exactly match the
one that was registered; the exception is loopback redirects, where
an exact match is required except for the port URI component.</t>

<t>For private-use URI scheme-based redirects, authorization servers
SHOULD enforce the requirement in <xref target="private-use-uri-scheme"/> that clients use
schemes that are reverse domain name based.  At a minimum, any
private-use URI scheme that doesn't contain a period character (<spanx style="verb">.</spanx>)
SHOULD be rejected.</t>

<t>In addition to the collision-resistant properties, requiring a URI
scheme based on a domain name that is under the control of the app
can help to prove ownership in the event of a dispute where two apps
claim the same private-use URI scheme (where one app is acting
maliciously).  For example, if two apps claimed <spanx style="verb">com.example.app</spanx>,
the owner of <spanx style="verb">example.com</spanx> could petition the app store operator to
remove the counterfeit app.  Such a petition is harder to prove if a
generic URI scheme was used.</t>

<t>Authorization servers MAY request the inclusion of other platform-
specific information, such as the app package or bundle name, or
other information that may be useful for verifying the calling app's
identity on operating systems that support such functions.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

<section anchor="native-app-client-impersonation" title="Impersonation of Native Apps">

<t>As stated above, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.  This includes the case where the user has
previously approved an authorization request for a given client id &#8211;
unless the identity of the client can be proven, the request SHOULD
be processed as if no previous request had been approved.</t>

<t>Measures such as claimed <spanx style="verb">https</spanx> scheme redirects MAY be accepted by
authorization servers as identity proof.  Some operating systems may
offer alternative platform-specific identity features that MAY be
accepted, as appropriate.</t>

</section>
</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<section anchor="access-token-privilege-restriction-1" title="Access Token Privilege Restriction">

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>The privileges associated with an access token SHOULD be restricted to
the minimum required for the particular application or use case. This
prevents clients from exceeding the privileges authorized by the
resource owner. It also prevents users from exceeding their privileges
authorized by the respective security policy. Privilege restrictions
also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server. To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server. If not, the resource server MUST refuse to serve the
respective request. Clients and authorization servers MAY utilize the
parameters <spanx style="verb">scope</spanx> or <spanx style="verb">resource</spanx> as specified in
<xref target="RFC8707"/>, respectively, to determine the
resource server they want to access.</t>

</section>
<section anchor="access-token-replay-prevention" title="Access Token Replay Prevention">

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources. To put this into effect,
the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource. If not, the resource server must refuse to serve
the respective request. Clients and authorization servers MAY utilize
the parameter <spanx style="verb">scope</spanx> and <spanx style="verb">authorization_details</spanx> as specified in
<xref target="I-D.ietf-oauth-rar"/> to determine those resources and/or actions.</t>

<t>Authorization and resource servers SHOULD use mechanisms for
sender-constrained access tokens to prevent token replay as described
in (#pop_tokens). A sender-constrained access token scopes the applicability
of an access
token to a certain sender. This sender is obliged to demonstrate knowledge
of a certain secret as prerequisite for the acceptance of that token at
the recipient (e.g., a resource server). The use of Mutual TLS for OAuth 2.0
<xref target="RFC8705"/> is RECOMMENDED.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server MUST issue sender-constrained refresh tokens
or use refresh token rotation as described in (#refresh_token_protection).</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="protecting-redirect-based-flows" title="Protecting Redirect-Based Flows">

<t>When comparing client redirect URIs against pre-registered URIs,
authorization servers MUST utilize exact string matching. This measure
contributes to the prevention of leakage of authorization codes and
access tokens (see (#insufficient_uri_validation)). It can also help to
detect mix-up attacks (see (#mix_up)).</t>

<t>Clients MUST NOT expose URLs that forward the user's browser to
arbitrary URIs obtained from a query parameter ("open redirector").
Open redirectors can enable exfiltration of authorization codes and
access tokens, see (#open_redirector_on_client).</t>

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF). In this
context, CSRF refers to requests to the redirection endpoint that do
not originate at the authorization server, but a malicious third party
(see Section 4.4.1.8. of <xref target="RFC6819"/> for details). Clients that have
ensured that the authorization server supports PKCE MAY
rely the CSRF protection provided by PKCE. In OpenID Connect flows,
the <spanx style="verb">nonce</spanx> parameter provides CSRF protection. Otherwise, one-time
use CSRF tokens carried in the <spanx style="verb">state</spanx> parameter that are securely
bound to the user agent MUST be used for CSRF protection (see
(#csrf_countermeasures)).</t>

<t>In order to prevent mix-up attacks (see (#mix_up)), clients MUST only process redirect
responses of the authorization server they sent the respective request
to and from the same user agent this authorization request was
initiated with. Clients MUST store the authorization server they sent
an authorization request to and bind this information to the user
agent and check that the authorization request was received from the
correct authorization server. Clients MUST ensure that the subsequent
token request, if applicable, is sent to the same authorization
server. Clients SHOULD use distinct redirect URIs for each
authorization server as a means to identify the authorization server a
particular response came from.</t>

<t>An AS that redirects a request potentially containing user credentials
MUST avoid forwarding these user credentials accidentally (see
(#redirect_307) for details).</t>

<section anchor="loopback-redirect-considerations-in-native-apps" title="Loopback Redirect Considerations in Native Apps">

<t>Loopback interface redirect URIs use the <spanx style="verb">http</spanx> scheme (i.e., without
Transport Layer Security (TLS)).  This is acceptable for loopback
interface redirect URIs as the HTTP request never leaves the device.</t>

<t>Clients should open the network port only when starting the
authorization request and close it once the response is returned.</t>

<t>Clients should listen on the loopback network interface only, in
order to avoid interference by other network actors.</t>

<t>While redirect URIs using localhost (i.e.,
<spanx style="verb">http://localhost:{port}/{path}</spanx>) function similarly to loopback IP
redirects described in <xref target="loopback-interface-redirection"/>, the use of <spanx style="verb">localhost</spanx> is NOT
RECOMMENDED.  Specifying a redirect URI with the loopback IP literal
rather than <spanx style="verb">localhost</spanx> avoids inadvertently listening on network
interfaces other than the loopback interface.  It is also less
susceptible to client-side firewalls and misconfigured host name
resolution on the user's device.</t>

</section>
</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes MUST be made over a secure
channel, and the client MUST require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all refresh and access tokens already granted
based on the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

<t>Clients MUST prevent injection (replay) of authorization codes into
the authorization response by attackers. The use of PKCE
is RECOMMENDED to this end. The OpenID Connect <spanx style="verb">nonce</spanx> parameter and
ID Token Claim <xref target="OpenID"/> MAY be used as well. The PKCE challenge or
OpenID Connect <spanx style="verb">nonce</spanx> MUST be transaction-specific and securely bound
to the client and the user agent in which the transaction was started.</t>

<t>Note: although PKCE so far was designed as a mechanism to protect
native apps, this advice applies to all kinds of OAuth clients,
including web applications.</t>

<t>When using PKCE, clients SHOULD use PKCE code challenge methods that
do not expose the PKCE verifier in the authorization request.
Otherwise, attackers that can read the authorization request (cf.
Attacker A4 in (#secmodel)) can break the security provided
by PKCE. Currently, <spanx style="verb">S256</spanx> is the only such method.</t>

<t>Authorization servers MUST support PKCE.</t>

<t>Authorization servers MUST provide a way to detect their support for
PKCE. To this end, they MUST either (a) publish the element
<spanx style="verb">code_challenge_methods_supported</spanx> in their AS metadata (<xref target="RFC8418"/>)
containing the supported PKCE challenge methods (which can be used by
the client to detect PKCE support) or (b) provide a
deployment-specific way to ensure or determine PKCE support by the AS.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, authorization codes, and client
credentials MUST NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="fake-external-user-agents-in-native-apps" title="Fake External User-Agents in Native Apps">

<t>The native app that is initiating the authorization request has a
large degree of control over the user interface and can potentially
present a fake external user-agent, that is, an embedded user-agent
made to appear as an external user-agent.</t>

<t>When all good actors are using external user-agents, the advantage is
that it is possible for security experts to detect bad actors, as
anyone faking an external user-agent is provably bad.  On the other
hand, if good and bad actors alike are using embedded user-agents,
bad actors don't need to fake anything, making them harder to detect.
Once a malicious app is detected, it may be possible to use this
knowledge to blacklist the app's signature in malware scanning
software, take removal action (in the case of apps distributed by app
stores) and other steps to reduce the impact and spread of the
malicious app.</t>

<t>Authorization servers can also directly protect against fake external
user-agents by requiring an authentication factor only available to
true external user-agents.</t>

<t>Users who are particularly concerned about their security when using
in-app browser tabs may also take the additional step of opening the
request in the full browser from the in-app browser tab and complete
the authorization there, as most implementations of the in-app
browser tab pattern offer such functionality.</t>

</section>
<section anchor="malicious-external-user-agents-in-native-apps" title="Malicious External User-Agents in Native Apps">

<t>If a malicious app is able to configure itself as the default handler
for <spanx style="verb">https</spanx> scheme URIs in the operating system, it will be able to
intercept authorization requests that use the default browser and
abuse this position of trust for malicious ends such as phishing the
user.</t>

<t>This attack is not confined to OAuth; a malicious app configured in
this way would present a general and ongoing risk to the user beyond
OAuth usage by native apps.  Many operating systems mitigate this
issue by requiring an explicit user action to change the default
handler for <spanx style="verb">http</spanx> and <spanx style="verb">https</spanx> scheme URIs.</t>

</section>
<section anchor="csrf_countermeasures" title="Cross-Site Request Forgery">

<t>An attacker might attempt to inject a request to the redirect URI of
the legitimate client on the victim's device, e.g., to cause the
client to access resources under the attacker's control. This is a
variant of an attack known as Cross-Site Request Forgery (CSRF).</t>

<t>The traditional countermeasure are CSRF tokens that are bound to the
user agent and passed in the <spanx style="verb">state</spanx> parameter to the authorization
server as described in <xref target="RFC6819"/>. The same protection is provided by
PKCE or the OpenID Connect <spanx style="verb">nonce</spanx> value.</t>

<t>When using PKCE instead of <spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> for CSRF protection, it is
important to note that:</t>

<t><list style="symbols">
  <t>Clients MUST ensure that the AS supports PKCE before using PKCE for
CSRF protection. If an authorization server does not support PKCE,
<spanx style="verb">state</spanx> or <spanx style="verb">nonce</spanx> MUST be used for CSRF protection.</t>
  <t>If <spanx style="verb">state</spanx> is used for carrying application state, and integrity of
its contents is a concern, clients MUST protect <spanx style="verb">state</spanx> against
tampering and swapping. This can be achieved by binding the
contents of state to the browser session and/or signed/encrypted
state values <xref target="I-D.bradley-oauth-jwt-encoded-state"/>.</t>
</list></t>

<t>AS therefore MUST provide a way to detect their support for PKCE
either via AS metadata according to <xref target="RFC8414"/> or provide a
deployment-specific way to ensure or determine PKCE support.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>As described in Section 4.4.1.9 of <xref target="RFC6819"/>, the authorization
request is susceptible to clickjacking. An attacker can use this
vector to obtain the user's authentication credentials, change the
scope of access granted to the client, and potentially access the
user's resources.</t>

<t>Authorization servers MUST prevent clickjacking attacks. Multiple
countermeasures are described in <xref target="RFC6819"/>, including the use of the
X-Frame-Options HTTP response header field and frame-busting
JavaScript. In addition to those, authorization servers SHOULD also
use Content Security Policy (CSP) level 2 <xref target="CSP-2"/> or greater.</t>

<t>To be effective, CSP must be used on the authorization endpoint and,
if applicable, other endpoints used to authenticate the user and
authorize the client (e.g., the device authorization endpoint, login
pages, error pages, etc.). This prevents framing by unauthorized
origins in user agents that support CSP. The client MAY permit being
framed by some other origin than the one used in its redirection
endpoint. For this reason, authorization servers SHOULD allow
administrators to configure allowed origins for particular clients
and/or for clients to register these dynamically.</t>

<t>Using CSP allows authorization servers to specify multiple origins in
a single response header field and to constrain these using flexible
patterns (see <xref target="CSP-2"/> for details). Level 2 of this standard provides
a robust mechanism for protecting against clickjacking by using
policies that restrict the origin of frames (using <spanx style="verb">frame-ancestors</spanx>)
together with those that restrict the sources of scripts allowed to
execute on an HTML page (by using <spanx style="verb">script-src</spanx>). A non-normative
example of such a policy is shown in the following listing:</t>

<t><spanx style="verb">
HTTP/1.1 200 OK
Content-Security-Policy: frame-ancestors https://ext.example.org:8000
Content-Security-Policy: script-src 'self'
X-Frame-Options: ALLOW-FROM https://ext.example.org:8000
...
</spanx></t>

<t>Because some user agents do not support <xref target="CSP-2"/>, this technique
SHOULD be combined with others, including those described in
<xref target="RFC6819"/>, unless such legacy user agents are explicitly unsupported
by the authorization server. Even in such cases, additional
countermeasures SHOULD still be employed.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The following attacks can occur when an AS or client has an open
redirector. An open redirector is an endpoint that forwards a user's
browser to an arbitrary URI obtained from a query parameter.</t>

<section anchor="open_redirector_on_client" title="Client as Open Redirector">

<t>Clients MUST NOT expose open redirectors. Attackers may use open
redirectors to produce URLs pointing to the client and utilize them to
exfiltrate authorization codes and access tokens, as described in
(#redir_uri_open_redir). Another abuse case is to produce URLs that
appear to point to the client. This might trick users into trusting the URL
and follow it in their browser. This can be abused for phishing.</t>

<t>In order to prevent open redirection, clients should only redirect if
the target URLs are whitelisted or if the origin and integrity of a
request can be authenticated. Countermeasures against open redirection
are described by OWASP <xref target="owasp_redir"/>.</t>

</section>
<section anchor="authorization-server-as-open-redirector" title="Authorization Server as Open Redirector">

<t>Just as with clients, attackers could try to utilize a user's trust in
the authorization server (and its URL in particular) for performing
phishing attacks. OAuth authorization servers regularly redirect users
to other web sites (the clients), but must do so in a safe way.</t>

<t><xref target="authorization-code-error-response"/> already prevents open redirects by
stating that the AS MUST NOT automatically redirect the user agent in case
of an invalid combination of <spanx style="verb">client_id</spanx> and <spanx style="verb">redirect_uri</spanx>.</t>

<t>However, an attacker could also utilize a correctly registered
redirect URI to perform phishing attacks. The attacker could, for
example, register a client via dynamic client registration <xref target="RFC7591"/>
and intentionally send an erroneous authorization request, e.g., by
using an invalid scope value, thus instructing the AS to redirect the
user agent to its phishing site.</t>

<t>The AS MUST take precautions to prevent this threat. Based on its risk
assessment, the AS needs to decide whether it can trust the redirect
URI and SHOULD only automatically redirect the user agent if it trusts
the redirect URI. If the URI is not trusted, the AS MAY inform the
user and rely on the user to make the correct decision.</t>

</section>
</section>
<section anchor="authorization-server-mix-up-mitigation-in-native-apps" title="Authorization Server Mix-Up Mitigation in Native Apps">

<t>(TODO: merge this with the regular mix-up section when it is brought in)</t>

<t>To protect against a compromised or malicious authorization server
attacking another authorization server used by the same app, it is
REQUIRED that a unique redirect URI is used for each authorization
server used by the app (for example, by varying the path component),
and that authorization responses are rejected if the redirect URI
they were received on doesn't match the redirect URI in an outgoing
authorization request.</t>

<t>The native app MUST store the redirect URI used in the authorization
request with the authorization session data (i.e., along with "state"
and other related data) and MUST verify that the URI on which the
authorization response was received exactly matches it.</t>

<t>The requirement of <xref target="native-app-registration"/>, specifically that authorization
servers reject requests with URIs that don't match what was
registered, is also required to prevent such attacks.</t>

</section>
<section anchor="embedded-user-agents-in-native-apps" title="Embedded User Agents in Native Apps">

<t>Embedded user-agents are a technically possible method for authorizing native
apps.  These embedded user-agents are unsafe for use by third parties
to the authorization server by definition, as the app that hosts the
embedded user-agent can access the user's full authentication
credential, not just the OAuth authorization grant that was intended
for the app.</t>

<t>In typical web-view-based implementations of embedded user-agents,
the host application can record every keystroke entered in the login
form to capture usernames and passwords, automatically submit forms
to bypass user consent, and copy session cookies and use them to
perform authenticated actions as the user.</t>

<t>Even when used by trusted apps belonging to the same party as the
authorization server, embedded user-agents violate the principle of
least privilege by having access to more powerful credentials than
they need, potentially increasing the attack surface.</t>

<t>Encouraging users to enter credentials in an embedded user-agent
without the usual address bar and visible certificate validation
features that browsers have makes it impossible for the user to know
if they are signing in to the legitimate site; even when they are, it
trains them that it's OK to enter credentials without validating the
site first.</t>

<t>Aside from the security concerns, embedded user-agents do not share
the authentication state with other apps or the browser, requiring
the user to log in for every authorization request, which is often
considered an inferior user experience.</t>

</section>
<section anchor="other-recommendations" title="Other Recommendations">

<t>Authorization servers SHOULD NOT allow clients to influence their
<spanx style="verb">client_id</spanx> or <spanx style="verb">sub</spanx> value or any other claim if that can cause
confusion with a genuine resource owner (see (#client_impersonating)).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="access-token-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
<xref target="parameters-registry"/>.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(<xref target="authorization-code-error-response"/>), token error response (<xref target="access-token-error-response"/>), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC6125;
&RFC8446;
&RFC5280;
&RFC7595;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&RFC7591;
&RFC8707;
&RFC8414;
&RFC8418;
&RFC8705;
&RFC7230;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.bradley-oauth-jwt-encoded-state;
&I-D.ietf-oauth-token-binding;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>
<reference anchor="owasp_redir" >
  <front>
    <title>OWASP Cheat Sheet Series - Unvalidated Redirects and Forwards</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CSP-2" >
  <front>
    <title>Content Security Policy Level 2</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in <xref target="client-password"/>:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in <xref target="access-token-scope"/>:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, <xref target="authorization-code-error-response"/>,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections <xref target="authorization-code-error-response"/>,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections <xref target="authorization-code-error-response"/>, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The initial OAuth 2.0 protocol specification was edited by David
Recordon, based on two previous publications: the OAuth 1.0 community
specification <xref target="RFC5849"></xref>, and OAuth WRAP (OAuth Web Resource
Authorization Profiles).  Eran Hammer then edited many
of the intermediate drafts that evolved into this RFC.  The Security
Considerations section was drafted by Torsten Lodderstedt, Mark
McGloin, Phil Hunt, Anthony Nadalin, and John Bradley.  The section
on use of the "application/x-www-form-urlencoded" media type was
drafted by Julian Reschke.  The ABNF section was drafted by Michael
B. Jones.</t>

<t>The OAuth 1.0 community specification was edited by Eran Hammer and
authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris
Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler,
Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.</t>

<t>The OAuth WRAP specification was edited by Dick Hardt and authored by
Brian Eaton, Yaron Y. Goland, Dick Hardt, and Allen Tom.</t>

<t>This specification is the work of the OAuth Working Group, which
includes dozens of active and dedicated participants.  In particular,
the following individuals contributed ideas, feedback, and wording
that shaped and formed the final specification:</t>

<t>Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden
Bell, John Bradley, Marcos Caceres, Brian Campbell, Scott Cantor,
Blaine Cook, Roger Crew, Leah Culver, Bill de hOra, Andre DeMarre,
Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor
Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert,
Yaron Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer,
Dick Hardt, Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones,
Terry Jones, John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara,
Rasmus Lerdorf, Torsten Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul
Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin,
Laurence Miao, William Mills, Chuck Mortimore, Anthony Nadalin,
Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob
Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner,
Jeremy Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson,
Allen Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar
Woodward.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAUgX14AA+x9aXcbx5Xo9/oVfeiTmEwAWKRWy6OZoTZbibVElOKX5GSU
JtAkOwLQGHSDFGNrfvu7a9Wt6mqQsj3JzHvhTGQS6K7l1q27L+Px2HV1N6/u
F2/OquLl4aY7Kw4m+wX+0qzrv5Vd3SyLp+tyUV006/du1kyX8Pv9oinhiTE8
6mZlB38f3Di4Mb5xMD6451y9Wt8vuvWm7Q5u3PjyxoEr11V5n0d37y/uF8+W
XbVeVt348bo86dy07O4XbTdzbtrM6uXp/WLTjst2WtduVd93RdE10/vFZdXC
r22z7tbVSev/vlyEP11Jy8ZXxvC/oqiX8M3jSfFNuZ519Amv/nE9fW8+rBZl
Pb9fzODTyRl++u+n+Mlk2izo+826vl+cdd3q/hdf4EP0zKRZn8YTHU6KV7DV
6fvaTHVYrgGC9nOZrcQv/n3FX/SnamEueiR+wkz3ZlJ828xm1brtqmh3bxr8
aNn7Vibu+Ot/n4evJ3AYzi2b9QIO/LxCAL5++uhgf/9L/fXO/p3w61399d7+
Pfn15p0Dffbml/f02Vt3DvTZW1/e0gduHxzc8b/evCW/3tk/uC2/3rt1Kzxw
74b8evf2l/TA26PDo0fPnt2nPQn27jxqZtWseAQnU04BuYqjqivG4+Lu+Lju
isNFta6n5bI46srlDA6vwMeLk2YNqHjCu4ZDIrScnpXL02pUHL44elb8n5uT
Wzs0T8CsAOcdP+4LGqCc+wlaGKyFtW26it/nW7IPoIE/v7v5aPL6yaPxWbeY
37qxP97/8ssv9w8OCBL63YfFfAzX597+PgLL1bpOfzp3AYwKunv+oG7f82C+
c3DndgDdvsL27o27Hsz7t8Kv97LP+hEObtI5PBs/ntRVdzJmArAu17lPq7bZ
rKfVuF7CdSkR4TJPtdUUsL27HHfNqp76J47X5WxeXcpDf73oxtVyiqc7bjsE
Yn+grnlfLeGgl0Q84PuL6hi/WMYo8l11THStWna4KDgwuJ3L4vDVM8KEcjqt
2hZGKF5tjuf1tPhtdVk8WlczfL6ct8W31Xk1L/Zz+DD2lOZhOT8pl3+LPwfC
8OhvVfu+buPPfwOUqZmdVv2Pf9Ms00+fZz+FoX+7WZTr3qff1mUTf/gaP1zO
gAosl/E3T+CbzXJ2XBFFU2R9XsJlAMK+/6VQpnmgTBcXF5OLm0gCv3jz+gt8
5gtEWgX8eH+Mn924eePWF3we0/Xlqmv6B/KIPj9dl6uzSzwKe1t+Uy435foS
l3B3GOgAl+/Krm2W11jlXVolzMvTwny4zrs34I7hOl+uquWzx/Ei+TMgGMtl
Ne1weS+fH75KnlnO62VVPN/Mu3pRzeoy4Z+v1g2wsGZO+PZsOQPOCNvyxAix
T18AInZIiAhk2vNJO/JruVvtFjxEvNqcnPSQ82h6Ni+nZ10PWV6UsxK20Bvl
qF4smmWCcq8mxeumrZYeXew3z8sZfBV/DIzqcFrFnz2CQYCTVvOuWY4Pj2d1
/PVDuEnNZbU22HC4WtdzxIWD/EE3ZTedbNovPAn+4nFzsZw35WzsP4I3Xzw7
enPvxo3xnZvxGeLnxdGqmsJdFwrAh8cPj/dHxbMXT1++fn745tnLF8XRk0dv
Xz978weLr4+rabUAqOAi94dP5zvY22a97p3O42amWGxv5ovqoks/hqv8qlrP
l9W6B+lXzfx9/OHRpPh6s+rK/sjl8fGmjaEJwJy26+lkWbfd5LQ5/2IVQNGG
OzJ5DihaAuXadlkKfajYn9zYgq4vANHK9/Visy57GPiQucF1SCHgDDD150Cw
63XT9tDtOUiO9aJZVz04/Ka8tFRnA1e5j2YAmAZ2V89QVvqiBURp5YPxlLc7
Xsh2x/vvbkyQt8MI37x582p8+PbNNzGgvrlcVeuu+tAVb9blsj0BpFEiUezi
O1/sT/b37if8yiLby2nXCK4dDIMWEOVpXc2RMfZAC5RkevYewdFclO3qHbC6
2r9vzvS7w6NXIFlVZVccnVVAjY5A6oFDHRdvl+dANnA9MxgN3gYotAXcteJp
s77AC7fjh4vu6xRHa3Gwlsaa0AqIUJuvvjDjv/Pjv4Px3+n472hd72hdCvJH
R6/GB/19AFKC1IurZ7EDb0o9vRS2fjCw0piFwNAHzrkxSJblMRBxkDWdizWn
MqL8J6o5FdWyPJ4D1MqiO6vXszGI9d2lK1crT2iA4DfHXVkvi3m9qBGmpecE
IGMiVhQArvN6CuJpVQNirAsgDMfVGcgcRXMCQ6vgBScKtKE4viwa4OEVrrRD
yQaGgRnXDYAV0ACYC2ygpjG6iwo0BhgzHQNPEz+Op29o8HI+by5wXHjAmW0V
+W3JduCzGtAEhi947ZMCtE+QjfBS1Sf63rpaAbOqGJ+a47aZVx381XloA1Ep
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
axbxH1wPYavdDlmkCFV17YSi9bKcwQVB/UoysFedlOahq2ybGvgUD06Vc6EI
hJlIrdNi1oyqANCM7ea47epuIwfpUzkM7lFXvaLYfdaFEo7LJhsUqEltfSvq
ZC9pb1UckTz4/Wc2pHlMQmIuWy9nQiONKjqMNmtLM+WKbNCQr2fcMwQVO/RY
zgKEaOPQX7nFXOHr2IVhUq6MxN+o9EriTlJJuVdzGfmCCDmSV2nfMYH/rWkT
TPZj8V+Le9t5//aIaqeNTcoXmVHUti1/kTQfe5mv6I3Cy1P1Nlj3Eve6kwlG
4rhmZ3riQpcmX1imQ4w8gH0tGS97DWi4Eqdnc+otIgBNuHtHebw84bLdBDX+
ecB/MSIWv9otjl5Fn+yFN+STB8U+PPaLDwf7xRf4n5vj2w/pt9uPx3efwAtU
jH677ZeLd2J/al/SkwW/cKoubCLSAEdX18ThitM4vutbjj5vqawBtnaiwAB/
cppPZDGPV4KRBqE9lEq0zdICOllj35sTCbnLENq89bYYA5iLbwswwg3SIDpK
6WUzSTN7UQpvsxclqRwRI/VVNsmq7qSEupZYcTExwbL1ldaxxftTot7lM6LR
gmjx1KEQKXlepmY64+6VCd/OG6goep42GhcwX6Zr2AVdRVZHXqCXvjheHNX6
/We+bF7cuPhjrqaiBHGbZt+9MOW+RSEfXp10+8sCIaJ1tTau59RnJBF948eo
b9hgoh2WHGiv01Lx/XJsJmb4fkb2HmhJzEU8sKS2s93vQlzT1T2JzcT9EGTs
SiztgoC99kNmuI/0QIByntWS+GHiyOpeOzOuG2UAppkBiaBrUl3qNvakSLoW
xrtFGKKVhUOFMedjc2za+LYwm91gTeKCSb56Dp1RqF3GbhbSMJagnUSSJLU4
NgveCx3Fs7ww3yuKOz6FnjzUR+Ul2fJtU5WoNQq+Q5/9h5Ov8N/dgz1+5Ad+
JLzaryMy0DUlTDemL6n9FLVoilU8/C7fSeYtArm4Ti+ZXOeh4pCOR2fHdlM0
YhJBHmbPdhy63uyZxcd7x4ZOmQ7fOPu/5PrW/KCwv7r9Vx/ysqLrt+D5D/7P
uaPm9NRT5Jo/P+iSP3lO8yZNf/7pb4adX7NJmn8zLPOHf8XjuTV8PPzzuXlT
boDZah+p+1PbOa+91d6b/zL2HbC2tUKSRWcgtHvxxUD/oz1Kd6nuExucEyPy
zYl8oyFEkBFSB2nRcZNbdADJIyViieGGwL1Q5GzFP3ZJ2ReFbZltc2wyzZUy
jMV2WMqc01P4+uq2SgPjXt1biW6Fsf5KQWd9Hick29JwV/jPuadKxjs6EI2S
zMfL4zFMdduQRDhKFZIReTzm1OEB/iA2q6aWaiQtfWm81OYGC7siB4e8lGR9
6DQxPI07RduvSmbAjbUT5C5JHcuahULAo0/qVZP4p3cli6tIkIo5b4hDpSJu
JE73B+H3aXlcCBIXZ40Zn7eJMo/rRgJ5iLWU8qet42mb6b6mQrNeFXkrAbyx
LKkRJdmj8+6sqlzPKbU0zi2nHZryAplwCo0R78Wh6BXZFn+PSLW8tJg3ULZL
4u15lQjRW/ENG2xflheLLDw/bxPTDc4cVXzIydMCTg6EUVFfo5qJEPhqtDIQ
XUPcNXfXxm3QIN8Zh4AB/SicWj91smqv8EeAMlVTdFVEGIQeWOKVHlu/C3QO
cpwNwi2IbKobsJof00yKNF+tdzSKG54NIU/yWAxabcWOvnSpT5LZbHKIFBIj
o1lQRGEDnsIKClFzs0fi7jc9yAZi5tGeMGv5pvqmYT2kpfKGcSus1EGOPrKY
sanzLVW0NIlFomdEGnlETkJUe4gh/l4AFzktOS1z6p9MQExBzu/0750RIQTV
D8oubBQUYuWX3Fxeqj1EoxUPqHvOGJaxblaXSSdvoJYzuNZHb14/e/F1QuPQ
SymBN8C+qH7kui3+8qfD8R//XHxR/Kkc/43+e2P8Jf53Z7yD/07o33f073/t
/IVGItKhzvSDyU3f4UMj/6UynNSBLJBTwgfw1K2bZm7TX3BRfkie3D+4Zx5F
98PDF08JkAl0udKmwA4fVJCNDchu3fwVDBggkALkQXH47atvDmGTj599/ezN
0Pa51A49+aD4xYdb++Pbh2RNvLM/vsvVLvh9/PbmjfHNL0EUfPnmCYuCEZZo
jA7FTVZLkuj0TOFqUX3VusPGROxGwvr0TXG60TLBZBvypUajCmh6qZtNt9qQ
N6sMhR0EQ6Tw1yn2SykxQFRqNFKxF8JrOJWbB+MGwN+5FhEVfdBMw+jDQj+U
BKklmTrv3Nqs52OtzGR7MLlbN3k0ICHfFm154oMBfcm2Prma5O8mPke385HK
YXFtclxNcju9xAaCyZqommeAxLb8uRxryRwTshkuJrlpfSnN1ncZtEPItV3N
SyWGfIXDEh7Ed5qfPzq4fWfo8YeHR0/u3ALAjZ+8ePTy8ZPdo28O4fHdw6NH
z57tRoPt7e2lltU6KujPu9vB6XYoWsyHYOhnZev4V3zzOWVHNOtLUG6C/7PY
ff7mmS9r7P0KWuwMK9pRI3j1Z9PwBJEdbvOtARjAidGHoHmqMi9VFm8Wleuq
6dmSsB+OsxWHEnbkoyIOgOHj5mR8TPYhG6zsL4FasmX8Vhch/hn6IzlU3DTV
6sMY1a6W+hhSqqdmC3RoEcgmNH4eLfUcRFQtz+t1s+QHtIDm5513m9JZx9P2
SZxHgC00ziLJP5DI2Uv6LNLpshwvuq0Mt01IxPP1mKif6MwLm7lqYSrVp3Ff
2eKcNljLGU/itVPDRkUcb3adbNzfRyFI6HiHJXMa1ORHlTob7ODSq1kWI1F/
/EcRYey/8o5jsPRNbTE2UgcFQV9vdX0iZf8pqjEpxSWTEfJ4SptcO62f1CoR
oFKbelvjuP9kRVh4+prdaHAodmL1x3gz4Nj1LpI4i5mJtfZGjbzjPA1lpHiw
ew6Nq8UMjRIrGrOPJx87qv1HVKJGrmwLINkAP7Sbo/CcLT1rlWSj5NStTC8O
ttjukujPYh+wSnRamM3UjvP1Y0O0jyhIa9BmxpgiHWL0m/UpVYbpI3a7Pnk3
bTboSVgA/UelRTrThSJ/g0m8frFKYGBYVl8k+z3tPmri2rmdk21XFVp4oqez
00aezprg4vJxXX6RseWKBL2YukXBm7xYDMH80dXivn4CtN6nxv1bRLAe4I3P
V2gjfHvw4fJvIpQUxS/tHXxw1nWr9hc3D39x8BT+n4f4xcET2T78BtQYvzgO
78fk5cGdk9n735WvFrf35/s3Hx9t3k8Pv7n5fPbh7js48Ok3f5jtn9c3lzfO
nv/xD0NjCIl6gBTjmqXwhp39sd5sQops7HlJaTHSp8owIq5rz8TP94AODnuT
vC89yQeV4SvNdaGuUOt6AYWzalpzI2Tknu37AcMaIXjcf426KcPiWLQKqL8X
cqr84OjPDenpWzR7g/mub7P1Ni1vrUqNLuJmx6N1P+tVzRoKpPqD84eWM0b2
OcOWEArt7Z2N+2Rn/7ymKs91kpaD55OTforrSj9p9lbxo0Qe1xd5SHjJiys5
lzTrmJVpRdOzWw2XTecxOJLjw6pey+stPEHxd1QVgrN/Qw1Y0DvqU03pXtft
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
Chtk/A+FAgA=

-->

</rfc>

