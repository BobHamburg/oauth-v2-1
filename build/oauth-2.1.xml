<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2246.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC5246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY RFC8446 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml">
<!ENTITY RFC5280 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5280.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6265 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6265.xml">
<!ENTITY I-D.ietf-oauth-mtls SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-mtls.xml">
<!ENTITY I-D.ietf-oauth-rar SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-rar.xml">
<!ENTITY I-D.ietf-oauth-resource-indicators SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-resource-indicators.xml">
<!ENTITY I-D.ietf-oauth-security-topics SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-security-topics.xml">
<!ENTITY I-D.ietf-oauth-token-binding SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-oauth-token-binding.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="oauth-2.1" category="std">

  <front>
    <title>The OAuth 2.1 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org</uri>
      </address>
    </author>
    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization></organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization></organization>
      <address>
        <email>torsten@lodderstedt.net</email>
      </address>
    </author>

    <date year="2020" month="February" day="28"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.1 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 1.0 protocol described
in RFC 5849.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>The OAuth 1.0 protocol (<xref target="RFC5849"/>), published as an informational
document, was the result of a small ad hoc community effort.  This
Standards Track specification builds on the OAuth 1.0 deployment
experience, as well as additional use cases and extensibility
requirements gathered from the wider IETF community.  The OAuth 2.0
protocol is not backward compatible with OAuth 1.0.  The two versions
may co-exist on the network, and implementations may choose to
support both.  However, it is the intention of this specification
that new implementations support OAuth 2.0 as specified in this
document and that OAuth 1.0 is used only to support existing
deployments.  The OAuth 2.0 protocol shares very few implementation
details with the OAuth 1.0 protocol.  Implementers familiar with
OAuth 1.0 should approach this document without any assumptions as to
its structure and details.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.0 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of two grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
Figure 3 in Section 4.1.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines two
grant types &#8211; authorization code
and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources may be extended beyond
what is described in this specification.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (D) in
Figure 1).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
    +--------+                                           +---------------+
    |        |--(1)------- Authorization Grant --------->|               |
    |        |                                           |               |
    |        |<-(2)----------- Access Token -------------|               |
    |        |               & Refresh Token             |               |
    |        |                                           |               |
    |        |                            +----------+   |               |
    |        |--(3)---- Access Token ---->|          |   |               |
    |        |                            |          |   |               |
    |        |<-(4)- Protected Resource --| Resource |   | Authorization |
    | Client |                            |  Server  |   |     Server    |
    |        |--(5)---- Access Token ---->|          |   |               |
    |        |                            |          |   |               |
    |        |<-(6)- Invalid Token Error -|          |   |               |
    |        |                            +----------+   |               |
    |        |                                           |               |
    |        |--(7)----------- Refresh Token ----------->|               |
    |        |                                           |               |
    |        |<-(8)----------- Access Token -------------|               |
    +--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in Section 7.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, At the time of this writing,
TLS version 1.3 <xref target="RFC8446"/> is the most recent version.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.0 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in Section 2.1,</t>
  <t>provide its client redirection URIs as described in Section 3.1.2,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

<t>Authorization servers SHOULD NOT allow clients to influence their
"client_id" or "sub" value or any other claim if that can cause
confusion with a genuine resource owner.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>Authorization servers SHOULD use client authentication if possible.</t>

<t>It is RECOMMENDED to use asymmetric (public-key based) methods for
client authentication such as mTLS <xref target="I-D.ietf-oauth-mtls"/> or "private_key_jwt"
<xref target="OpenID"/>.  When asymmetric methods for client authentication are
used, authorization servers do not need to store sensitive symmetric
keys, making these methods more robust against a number of attacks.</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by Section 2.2.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (Section 6) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
Section 1.6 when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in Section 1.6 when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code flow.<vspace />
The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be "code" for requesting an
authorization code as described by Section 4.1.1, or a registered
extension value as described by Section 8.4.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in Section 4.1.2.1.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process.</t>

<t>The authorization server MUST compare the two URIs using simple string
comparison as defined in <xref target="RFC3986"/>, Section 6.2.1.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in Section 1.6 when the requested response type is "code",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in Section 10.15.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered the client MUST
include a redirection URI with the authorization request using the
"redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
Section 1.6 when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="client-authentication-1" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
Section 2.3 when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines two grant types: authorization code
and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
     +----------+
     | Resource |
     |   Owner  |
     |          |
     +----------+
          ^
          |
         (2)
     +----|-----+          Client Identifier      +---------------+
     |         -+----(1)-- & Redirection URI ---->|               |
     |  User-   |                                 | Authorization |
     |  Agent  -+----(2)-- User authenticates --->|     Server    |
     |          |                                 |               |
     |         -+----(3)-- Authorization Code ---<|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (1)  (3)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |>---(4)-- Authorization Code ---------'      |
     |  Client |          & Redirection URI                  |
     |         |                                             |
     |         |<---(5)----- Access Token -------------------'
     +---------+       (w/ Optional Refresh Token)

   Note: The lines illustrating steps (1), (2), and (3) are broken into
   two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, code challenge, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step, and including its code verifier.
     When making the request, the
     client authenticates with the authorization server if it can.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client when possible, validates the
     authorization code, validates the code verifier, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<section anchor="client-creates-a-code-verifier" title="Client Creates a Code Verifier">

<t>The client first creates a code verifier, "code_verifier", for each
Authorization Request, in the following manner:</t>

<figure><artwork><![CDATA[
code_verifier = high-entropy cryptographic random STRING using the
unreserved characters `[A-Z] / [a-z] / [0-9] / "-" / "." / "_" / "~"`
from Section 2.3 of {{RFC3986}}, with a minimum length of 43 characters
and a maximum length of 128 characters.
]]></artwork></figure>

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

<t>NOTE: The code verifier SHOULD have enough entropy to make it
impractical to guess the value.  It is RECOMMENDED that the output of
a suitable random number generator be used to create a 32-octet
sequence.  The octet sequence is then base64url-encoded to produce a
43-octet URL safe string to use as the code verifier.</t>

</section>
<section anchor="client-creates-the-code-challenge" title="Client Creates the Code Challenge">

<t>The client then creates a code challenge derived from the code
verifier by using one of the following transformations on the code
verifier:</t>

<figure><artwork><![CDATA[
plain
  code_challenge = code_verifier

S256
  code_challenge = BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))
]]></artwork></figure>

<t>If the client is capable of using "S256", it MUST use "S256", as
"S256" is Mandatory To Implement (MTI) on the server.  Clients are
permitted to use "plain" only if they cannot support "S256" for some
technical reason and know via out-of-band configuration that the
server supports "plain".</t>

<t>The plain transformation is for compatibility with existing
deployments and for constrained environments that can't use the S256
transformation.</t>

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="client-initiates-the-authorization-request" title="Client Initiates the Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in Section 2.2.</t>
  <t hangText='&quot;code_challenge&quot;:'>
  REQUIRED.  Code challenge.</t>
  <t hangText='&quot;code_challenge_method&quot;:'>
  OPTIONAL, defaults to "plain" if not present in the request.  Code
    verifier transformation method is "S256" or "plain".</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in Section 3.1.2.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in Section 10.12.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
    &code_challenge=6fdkQaPm51l13DSukcAH3Mdx7_ntecHYd1vi3n0hMZY
    &code_challenge_method=S256 HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<t>When the server issues the authorization code in the authorization
response, it MUST associate the "code_challenge" and
"code_challenge_method" values with the authorization code so it can
be verified later.</t>

<t>Typically, the "code_challenge" and "code_challenge_method" values
are stored in encrypted form in the "code" itself but could
alternatively be stored on the server associated with the code.  The
server MUST NOT include the "code_challenge" value in client requests
in a form that other entities can extract.</t>

<t>The exact method that the server uses to associate the
"code_challenge" with the issued "code" is out of scope for this
specification.</t>

<section anchor="error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the client does not send the "code_challenge" in
the request, the authorization endpoint MUST return the authorization
error response with the "error" value set to "invalid_request".  The
"error_description" or the response of "error_uri" SHOULD explain the
nature of error, e.g., code challenge required.</t>

<t>If the server supporting PKCE does not support the requested
transformation, the authorization endpoint MUST return the
authorization error response with "error" value set to
"invalid_request".  The "error_description" or the response of
"error_uri" SHOULD explain the nature of error, e.g., transform
algorithm not supported.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in Section 4.1.1, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in Section 3.2.1.</t>
  <t hangText='&quot;code_verifier&quot;:'>
  REQUIRED.  Code verifier</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
&code_verifier=3641a2d12d66101249cdf7a79c000c1f8c05d2aafcf14bf146497bed
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid,</t>
  <t>verify the "code_verifier" by calculating the code challenge from the received
"code_verifier" and comparing it with the previously associated
"code_challenge", after first transforming it according to the
"code_challenge_method" method specified by the client, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in Section 4.1.1, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure><artwork><![CDATA[
 +---------+                                  +---------------+
 |         |                                  |               |
 |         |>--(A)- Client Authentication --->| Authorization |
 | Client  |                                  |     Server    |
 |         |<--(B)---- Access Token ---------<|               |
 |         |                                  |               |
 +---------+                                  +---------------+

                 Figure 6: Client Credentials Flow
]]></artwork></figure>

<t>The flow illustrated in Figure 6 includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
Section 5.1.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "example_parameter":"example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

<section anchor="successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
Section 7.1.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in Section 6.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by Section 3.3.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"Bearer",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="error-response-1" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>Authorization servers SHOULD determine, based on a risk assessment,
whether to issue refresh tokens to a certain client.  If the
authorization server decides not to issue refresh tokens, the client
MAY refresh access tokens by utilizing other grant types, such as the
authorization code grant type.  In such a case, the authorization
server may utilize cookies and persistent grants to optimize the user
experience.</t>

<t>If refresh tokens are issued, those refresh tokens MUST be bound to
the scope and resource servers as consented by the resource owner.
This is to prevent privilege escalation by the legitimate client and
reduce the impact of refresh token leakage.</t>

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>Authorization server MUST utilize one of these methods to detect
refresh token replay by malicious actors for public clients:</t>

<t><list style="symbols">
  <t><spanx style="emph">Sender-constrained refresh tokens:</spanx> the authorization server
cryptographically binds the refresh token to a certain client
instance by utilizing <xref target="I-D.ietf-oauth-token-binding"/> or <xref target="I-D.ietf-oauth-mtls"/>.</t>
  <t><spanx style="emph">Refresh token rotation:</spanx> the authorization server issues a new
refresh token with every access token refresh response.  The
previous refresh token is invalidated but information about the
relationship is retained by the authorization server.  If a
refresh token is compromised and subsequently used by both the
attacker and the legitimate client, one of them will present an
invalidated refresh token, which will inform the authorization
server of the breach.  The authorization server cannot determine
which party submitted the invalid refresh token, but it will
revoke the active refresh token.  This stops the attack at the
cost of forcing the legitimate client to obtain a fresh
authorization grant.  <vspace blankLines='1'/>
Implementation note: the grant to which a refresh token belongs
may be encoded into the refresh token itself.  This can enable an
authorization server to efficiently determine the grant to which a
refresh token belongs, and by extension, all refresh tokens that
need to be revoked.  Authorization servers MUST ensure the
integrity of the refresh token value in this case, for example,
using signatures.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in Section 5.1.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in Section 5.2.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

<t>Authorization servers MAY revoke refresh tokens automatically in case
of a security event, such as:</t>

<t><list style="symbols">
  <t>password change</t>
  <t>logout at the authorization server</t>
</list></t>

<t>Refresh tokens SHOULD expire if the client has been inactive for some
time, i.e., the refresh token has not been used to obtain fresh
access tokens for some time.  The expiration time is at the
discretion of the authorization server.  It might be a global value
or determined based on the client policy or the grant associated with
the refresh token (and its sensitivity).</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as "Bearer", defined below.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "Bearer" token type defined in this specification is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The above example is provided for illustration purposes only.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="bearer-tokens" title="Bearer Tokens">

<t>A Bearer Token is a security token with the property that any party 
in possession of the token (a "bearer") can use the token in any way 
that any other party in possession of it can.  Using a bearer token 
does not require a bearer to prove possession of cryptographic key material
(proof-of-possession).</t>

<t>Bearer tokens may be extended to include proof-of-possession techniques
by other specifications.</t>

<section anchor="authenticated-requests" title="Authenticated Requests">

<t>This section defines two methods of sending Bearer tokens in resource
requetss to resource servers. Clients MUST NOT use more than one method
to transmit the token in each request.</t>

<section anchor="authorization-request-header-field" title="Authorization Request Header Field">

<t>When sending the access token in the "Authorization" request header
field defined by HTTP/1.1 <xref target="RFC2617"/>, the client uses the "Bearer"
authentication scheme to transmit the access token.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
 GET /resource HTTP/1.1
 Host: server.example.com
 Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The syntax of the "Authorization" header field for this scheme
follows the usage of the Basic scheme defined in Section 2 of
<xref target="RFC2617"/>.  Note that, as with Basic, it does not conform to the
generic syntax defined in Section 1.2 of <xref target="RFC2617"/> but is compatible
with the general authentication framework being developed for
HTTP 1.1 <xref target="HTTP-AUTH"/>, although it does not follow the preferred
practice outlined therein in order to reflect existing deployments.
The syntax for Bearer credentials is as follows:</t>

<figure><artwork><![CDATA[
b64token    = 1*( ALPHA / DIGIT /
                 "-" / "." / "_" / "~" / "+" / "/" ) *"="
credentials = "Bearer" 1*SP b64token
]]></artwork></figure>

<t>Clients SHOULD make authenticated requests with a bearer token using
the "Authorization" request header field with the "Bearer" HTTP
authorization scheme.  Resource servers MUST support this method.</t>

</section>
<section anchor="form-encoded-body-parameter" title="Form-Encoded Body Parameter">

<t>When sending the access token in the HTTP request entity-body, the
client adds the access token to the request-body using the
"access_token" parameter.  The client MUST NOT use this method unless
all of the following conditions are met:</t>

<t><list style="symbols">
  <t>The HTTP request entity-header includes the "Content-Type" header
field set to "application/x-www-form-urlencoded".</t>
  <t>The entity-body follows the encoding requirements of the
"application/x-www-form-urlencoded" content-type as defined by
HTML 4.01 <xref target="W3C.REC-html401-19991224"></xref>.</t>
  <t>The HTTP request entity-body is single-part.</t>
  <t>The content to be encoded in the entity-body MUST consist entirely
of ASCII <xref target="USASCII"/> characters.</t>
  <t>The HTTP request method is one for which the request-body has
defined semantics.  In particular, this means that the "GET"
method MUST NOT be used.</t>
</list></t>

<t>The entity-body MAY include other request-specific parameters, in
which case the "access_token" parameter MUST be properly separated
from the request-specific parameters using "&amp;" character(s) (ASCII
code 38).</t>

<t>For example, the client makes the following HTTP request using
transport-layer security:</t>

<figure><artwork><![CDATA[
POST /resource HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

access_token=mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>The "application/x-www-form-urlencoded" method SHOULD NOT be used
except in application contexts where participating clients do not
have access to the "Authorization" request header field.  Resource
servers MAY support this method.</t>

</section>
</section>
<section anchor="the-www-authenticate-response-header-field" title="The WWW-Authenticate Response Header Field">

<t>If the protected resource request does not include authentication
credentials or does not contain an access token that enables access
to the protected resource, the resource server MUST include the HTTP
"WWW-Authenticate" response header field; it MAY include it in
response to other conditions as well.  The "WWW-Authenticate" header
field uses the framework defined by HTTP/1.1 <xref target="RFC2617"/>.</t>

<t>All challenges defined by this specification MUST use the auth-scheme
value "Bearer".  This scheme MUST be followed by one or more
auth-param values.  The auth-param attributes used or defined by this
specification are as follows.  Other auth-param attributes MAY be
used as well.</t>

<t>A "realm" attribute MAY be included to indicate the scope of
protection in the manner described in HTTP/1.1 <xref target="RFC2617"/>.  The
"realm" attribute MUST NOT appear more than once.</t>

<t>The "scope" attribute is defined in Section 3.3.  The
"scope" attribute is a space-delimited list of case-sensitive scope
values indicating the required scope of the access token for
accessing the requested resource. "scope" values are implementation
defined; there is no centralized registry for them; allowed values
are defined by the authorization server.  The order of "scope" values
is not significant.  In some cases, the "scope" value will be used
when requesting a new access token with sufficient scope of access to
utilize the protected resource.  Use of the "scope" attribute is
OPTIONAL.  The "scope" attribute MUST NOT appear more than once.  The
"scope" value is intended for programmatic use and is not meant to be
displayed to end-users.</t>

<t>Two example scope values follow; these are taken from the OpenID
Connect <xref target="OpenID.Messages"></xref> and the Open Authentication Technology
Committee (OATC) Online Multimedia Authorization Protocol <xref target="OMAP"></xref>
OAuth 2.0 use cases, respectively:</t>

<figure><artwork><![CDATA[
scope="openid profile email"
scope="urn:example:channel=HBO&urn:example:rating=G,PG-13"
]]></artwork></figure>

<t>If the protected resource request included an access token and failed
authentication, the resource server SHOULD include the "error"
attribute to provide the client with the reason why the access
request was declined.  The parameter value is described in
Section ???.  In addition, the resource server MAY include the
"error_description" attribute to provide developers a human-readable
explanation that is not meant to be displayed to end-users.  It also
MAY include the "error_uri" attribute with an absolute URI
identifying a human-readable web page explaining the error.  The
"error", "error_description", and "error_uri" attributes MUST NOT
appear more than once.</t>

<t>Values for the "scope" attribute (specified in Appendix A.4) 
MUST NOT include characters outside the set %x21 / %x23-5B
/ %x5D-7E for representing scope values and %x20 for delimiters
between scope values.  Values for the "error" and "error_description"
attributes (specified in Appendixes A.7 and A.8) MUST
NOT include characters outside the set %x20-21 / %x23-5B / %x5D-7E.
Values for the "error_uri" attribute (specified in Appendix A.9 of) 
MUST conform to the URI-reference syntax and thus MUST NOT
include characters outside the set %x21 / %x23-5B / %x5D-7E.</t>

<t>For example, in response to a protected resource request without
authentication:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

<t>And in response to a protected resource request with an
authentication attempt using an expired access token:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
                  error="invalid_token",
                  error_description="The access token expired"
]]></artwork></figure>

</section>
</section>
<section anchor="error-response-2" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in Section 11.4 for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

<section anchor="error-codes" title="Error Codes">

<t>When a request fails, the resource server responds using the
appropriate HTTP status code (typically, 400, 401, 403, or 405) and
includes one of the following error codes in the response:</t>

<t><list style="hanging">
  <t hangText='&quot;invalid_request&quot;:'>
  The request is missing a required parameter, includes an
unsupported parameter or parameter value, repeats the same
parameter, uses more than one method for including an access
token, or is otherwise malformed.  The resource server SHOULD
respond with the HTTP 400 (Bad Request) status code.</t>
  <t hangText='&quot;invalid_token&quot;:'>
  The access token provided is expired, revoked, malformed, or
invalid for other reasons.  The resource SHOULD respond with
the HTTP 401 (Unauthorized) status code.  The client MAY
request a new access token and retry the protected resource
request.</t>
  <t hangText='&quot;insufficient_scope&quot;:'>
  The request requires higher privileges than provided by the
access token.  The resource server SHOULD respond with the HTTP
403 (Forbidden) status code and MAY include the "scope"
attribute with the scope necessary to access the protected
resource.</t>
</list></t>

<t>If the request lacks any authentication information (e.g., the client
was unaware that authentication is necessary or attempted using an
unsupported authentication method), the resource server SHOULD NOT
include an error code or other error information.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example"
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-security-considerations" title="Access Token Security Considerations">

<section anchor="security-threats" title="Security Threats">

<t>The following list presents several common threats against protocols
utilizing some form of tokens.  This list of threats is based on NIST
Special Publication 800-63 <xref target="NIST800-63"></xref>.</t>

<section anchor="token-manufacturemodification" title="Token manufacture/modification">

<t>An attacker may generate a bogus
token or modify the token contents (such as the authentication or
attribute statements) of an existing token, causing the resource
server to grant inappropriate access to the client.  For example,
an attacker may modify the token to extend the validity period; a
malicious client may modify the assertion to gain access to
information that they should not be able to view.</t>

</section>
<section anchor="token-disclosure" title="Token disclosure">

<t>Tokens may contain authentication and attribute
statements that include sensitive information.</t>

</section>
<section anchor="token-redirect" title="Token redirect">

<t>An attacker uses a token generated for consumption
by one resource server to gain access to a different resource
server that mistakenly believes the token to be for it.</t>

</section>
<section anchor="token-replay" title="Token replay">

<t>An attacker attempts to use a token that has already
been used with that resource server in the past.</t>

</section>
</section>
<section anchor="threat-mitigation" title="Threat Mitigation">

<t>A large range of threats can be mitigated by protecting the contents
of the token by using a digital signature.<vspace />
Alternatively, a bearer token can contain a reference to
authorization information, rather than encoding the information
directly.  Such references MUST be infeasible for an attacker to
guess; using a reference may require an extra interaction between a
server and the token issuer to resolve the reference to the
authorization information.  The mechanics of such an interaction are
not defined by this specification.</t>

<t>This document does not specify the encoding or the contents of the
token; hence, detailed recommendations about the means of
guaranteeing token integrity protection are outside the scope of this
document.  The token integrity protection MUST be sufficient to
prevent the token from being modified.</t>

<t>To deal with token redirect, it is important for the authorization
server to include the identity of the intended recipients (the
audience), typically a single resource server (or a list of resource
servers), in the token.  Restricting the use of the token to a
specific scope is also RECOMMENDED.</t>

<t>The authorization server MUST implement TLS.  Which version(s) ought
to be implemented will vary over time and will depend on the
widespread deployment and known security vulnerabilities at the time
of implementation.</t>

<t>To protect against token disclosure, confidentiality protection MUST
be applied using TLS with a ciphersuite that provides
confidentiality and integrity protection.  This requires that the
communication interaction between the client and the authorization
server, as well as the interaction between the client and the
resource server, utilize confidentiality and integrity protection.
Since TLS is mandatory to implement and to use with this
specification, it is the preferred approach for preventing token
disclosure via the communication channel.  For those cases where the
client is prevented from observing the contents of the token, token
encryption MUST be applied in addition to the usage of TLS
protection.  As a further defense against token disclosure, the
client MUST validate the TLS certificate chain when making requests
to protected resources, including checking the Certificate Revocation
List (CRL) <xref target="RFC5280"/>.</t>

<t>Cookies are typically transmitted in the clear.  Thus, any
information contained in them is at risk of disclosure.  Therefore,
Bearer tokens MUST NOT be stored in cookies that can be sent in the
clear, as any information in them is at risk of disclosure.<vspace />
See "HTTP State Management Mechanism" <xref target="RFC6265"/> for security
considerations about cookies.</t>

<t>In some deployments, including those utilizing load balancers, the
TLS connection to the resource server terminates prior to the actual
server that provides the resource.  This could leave the token
unprotected between the front-end server where the TLS connection
terminates and the back-end server that provides the resource.  In
such deployments, sufficient measures MUST be employed to ensure
confidentiality of the token between the front-end and back-end
servers; encryption of the token is one such possible measure.</t>

<t>To deal with token capture and replay, the following recommendations
are made: First, the lifetime of the token MUST be limited; one means
of achieving this is by putting a validity time field inside the
protected part of the token.  Note that using short-lived (one hour
or less) tokens reduces the impact of them being leaked.  Second,
confidentiality protection of the exchanges between the client and
the authorization server and between the client and the resource
server MUST be applied.  As a consequence, no eavesdropper along the
communication path is able to observe the token exchange.
Consequently, such an on-path adversary cannot replay the token.
Furthermore, when presenting the token to a resource server, the
client MUST verify the identity of that resource server, as per
Section 3.1 of "HTTP Over TLS" <xref target="RFC2818"/>.  Note that the client MUST
validate the TLS certificate chain when making these requests to
protected resources.  Presenting the token to an unauthenticated and
unauthorized resource server or failing to validate the certificate
chain will allow adversaries to steal the token and gain unauthorized
access to protected resources.</t>

</section>
<section anchor="summary-of-recommendations" title="Summary of Recommendations">

<section anchor="safeguard-bearer-tokens" title="Safeguard bearer tokens">

<t>Client implementations MUST ensure that
bearer tokens are not leaked to unintended parties, as they will
be able to use them to gain access to protected resources.  This
is the primary security consideration when using bearer tokens and
underlies all the more specific recommendations that follow.</t>

</section>
<section anchor="validate-tls-certificate-chains" title="Validate TLS certificate chains">

<t>The client MUST validate the TLS
certificate chain when making requests to protected resources.
Failing to do so may enable DNS hijacking attacks to steal the
token and gain unintended access.</t>

</section>
<section anchor="always-use-tls-https" title="Always use TLS (https)">

<t>Clients MUST always use TLS
(https) or equivalent transport security when making requests with
bearer tokens.  Failing to do so exposes the token to numerous
attacks that could give attackers unintended access.</t>

</section>
<section anchor="dont-store-bearer-tokens-in-http-cookies" title="Don't store bearer tokens in HTTP cookies">

<t>Implementations MUST NOT store
bearer tokens within cookies that can be sent in the clear (which
is the default transmission mode for cookies).  Implementations
that do store bearer tokens in cookies MUST take precautions
against cross-site request forgery.</t>

</section>
<section anchor="issue-short-lived-bearer-tokens" title="Issue short-lived bearer tokens">

<t>Token servers SHOULD issue
short-lived (one hour or less) bearer tokens, particularly when
issuing tokens to clients that run within a web browser or other
environments where information leakage may occur.  Using
short-lived bearer tokens can reduce the impact of them being
leaked.</t>

</section>
<section anchor="issue-scoped-bearer-tokens" title="Issue scoped bearer tokens">

<t>Token servers SHOULD issue bearer tokens
that contain an audience restriction, scoping their use to the
intended relying party or set of relying parties.</t>

</section>
<section anchor="dont-pass-bearer-tokens-in-page-urls" title="Don't pass bearer tokens in page URLs">

<t>Bearer tokens MUST NOT be
passed in page URLs (for example, as query string parameters).
Instead, bearer tokens SHOULD be passed in HTTP message headers or
message bodies for which confidentiality measures are taken.
Browsers, web servers, and other software may not adequately
secure URLs in the browser history, web server logs, and other
data structures.  If bearer tokens are passed in page URLs,
attackers might be able to steal them from the history data, logs,
or other unsecured locations.</t>

</section>
</section>
<section anchor="token-replay-prevention" title="Token Replay Prevention">

<t>A sender-constrained access token scopes the applicability of an
access token to a certain sender.  This sender is obliged to
demonstrate knowledge of a certain secret as prerequisite for the
acceptance of that token at the recipient (e.g., a resource server).</t>

<t>Authorization and resource servers SHOULD use mechanisms for sender-
constrained access tokens to prevent token replay as described in
Section 4.8.1.1.2.  The use of Mutual TLS for OAuth 2.0 <xref target="I-D.ietf-oauth-mtls"/> is
RECOMMENDED.</t>

<t>It is RECOMMENDED to use end-to-end TLS.  If TLS traffic needs to be
terminated at an intermediary, refer to Security BCP Section 4.11 for further
security advice.</t>

</section>
<section anchor="access-token-privilege-restriction" title="Access Token Privilege Restriction">

<t>The privileges associated with an access token SHOULD be restricted
to the minimum required for the particular application or use case.
This prevents clients from exceeding the privileges authorized by the
resource owner.  It also prevents users from exceeding their
privileges authorized by the respective security policy.  Privilege
restrictions also help to reduce the impact of access token leakage.</t>

<t>In particular, access tokens SHOULD be restricted to certain resource
servers (audience restriction), preferably to a single resource
server.  To put this into effect, the authorization server associates
the access token with certain resource servers and every resource
server is obliged to verify, for every request, whether the access
token sent with that request was meant to be used for that particular
resource server.  If not, the resource server MUST refuse to serve
the respective request.  Clients and authorization servers MAY
utilize the parameters "scope" or "resource" as specified in
this document and <xref target="I-D.ietf-oauth-resource-indicators"/>, respectively, to
determine the resource server they want to access.</t>

<t>Additionally, access tokens SHOULD be restricted to certain resources
and actions on resource servers or resources.  To put this into
effect, the authorization server associates the access token with the
respective resource and actions and every resource server is obliged
to verify, for every request, whether the access token sent with that
request was meant to be used for that particular action on the
particular resource.  If not, the resource server must refuse to
serve the respective request.  Clients and authorization servers MAY
utilize the parameter "scope" and
"authorization_details" as specified in <xref target="I-D.ietf-oauth-rar"/> to
determine those resources and/or actions.</t>

</section>
</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
Section 11.1), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in Section 11.2.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by Section 11.2.</t>

</section>
<section anchor="defining-new-authorization-endpoint-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in Section 11.3.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (Section 4.1.2.1), the token error response (Section 5.2), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
Section 11.4) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent. The best current practice is to
perform the OAuth authorization request in an external user-agent
(typically the browser) rather than an embedded user-agent (such as
one implemented with web-views).</t>

<t><list style="symbols">
  <t>External user-agent - the native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
  <t>Embedded user-agent - the native application obtains the response
by directly communicating with the embedded user-agent by
monitoring state changes emitted during the resource load, or
accessing the user-agent's cookies storage.</t>
</list></t>

<t>When choosing between an external or embedded user-agent, developers
should consider the following:</t>

<t><list style="symbols">
  <t>An external user-agent may improve completion rate, as the
resource owner may already have an active session with the
authorization server, removing the need to re-authenticate.  It
provides a familiar end-user experience and functionality.  The
resource owner may also rely on user-agent features or extensions
to assist with authentication (e.g., password manager, 2-factor
device reader).</t>
  <t>An embedded user-agent poses a security challenge because resource
owners are authenticating in an unidentified window without access
to the visual protections found in most external user-agents.  An
embedded user-agent educates end-users to trust unidentified
requests for authentication (making phishing attacks easier to
execute).</t>
</list></t>

<t>Previously, it was common for native apps to use embedded user-agents
(commonly implemented with web-views) for OAuth authorization
requests.  That approach has many drawbacks, including the host app
being able to copy user credentials and cookies as well as the user
needing to authenticate from scratch in each app.  See Section ???
for a deeper analysis of the drawbacks of using embedded user-agents
for OAuth.</t>

<t>Native app authorization requests that use the browser are more
secure and can take advantage of the user's authentication state.
Being able to use the existing authentication session in the browser
enables single sign-on, as users don't need to authenticate to the
authorization server each time they use a new app (unless required by
the authorization server policy).</t>

<t>Supporting authorization flows between a native app and the browser
is possible without changing the OAuth protocol itself, as the OAuth
authorization request and response are already defined in terms of
URIs.  This encompasses URIs that can be used for inter-app
communication.  Some OAuth server implementations that assume all
clients are confidential web clients will need to add an
understanding of public native app clients and the types of redirect
URIs they use to support this best practice.</t>

<t>TODO: bring in the rest of RFC8252 here?</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/> and <xref target="I-D.ietf-oauth-security-topics"/>.</t>

<section anchor="client-authentication-2" title="Client Authentication">

<t>The authorization server establishes client credentials with web
application clients for the purpose of client authentication.  The
authorization server is encouraged to consider stronger client
authentication means than a client password.  Web application clients
MUST ensure confidentiality of client passwords and other client
credentials.</t>

<t>The authorization server MUST NOT issue client passwords or other
client credentials to native application or user-agent-based
application clients for the purpose of client authentication.  The
authorization server MAY issue a client password or other credentials
for a specific installation of a native application client on a
specific device.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>This specification does not provide any methods for the resource
server to ensure that an access token presented to it by a given
client was issued to that client by the authorization server.</t>

</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"/>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server SHOULD deploy other means to detect refresh
token abuse.</t>

<t>For example, the authorization server could employ refresh token
rotation in which a new refresh token is issued with every access
token refresh response.  The previous refresh token is invalidated
but retained by the authorization server.  If a refresh token is
compromised and subsequently used by both the attacker and the
legitimate client, one of them will present an invalidated refresh
token, which will inform the authorization server of the breach.</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes SHOULD be made over a secure
channel, and the client SHOULD require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes operate as plaintext bearer credentials, used to
verify that the resource owner who granted authorization at the
authorization server is the same resource owner returning to the
client to complete the process.  Therefore, if the client relies on
the authorization code for its own resource owner authentication, the
client redirection endpoint MUST require the use of TLS.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all access tokens already granted based on
the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

</section>
<section anchor="authorization-code-redirection-uri-manipulation" title="Authorization Code Redirection URI Manipulation">

<t>When requesting authorization using the authorization code grant
type, the client can specify a redirection URI via the "redirect_uri"
parameter.  If an attacker can manipulate the value of the
redirection URI, it can cause the authorization server to redirect
the resource owner user-agent to a URI under the control of the
attacker with the authorization code.</t>

<t>An attacker can create an account at a legitimate client and initiate
the authorization flow.  When the attacker's user-agent is sent to
the authorization server to grant access, the attacker grabs the
authorization URI provided by the legitimate client and replaces the
client's redirection URI with a URI under the control of the
attacker.  The attacker then tricks the victim into following the
manipulated link to authorize access to the legitimate client.</t>

<t>Once at the authorization server, the victim is prompted with a
normal, valid request on behalf of a legitimate and trusted client,
and authorizes the request.  The victim is then redirected to an
endpoint under the control of the attacker with the authorization
code.  The attacker completes the authorization flow by sending the
authorization code to the client using the original redirection URI
provided by the client.  The client exchanges the authorization code
with an access token and links it to the attacker's client account,
which can now gain access to the protected resources authorized by
the victim (via the client).</t>

<t>In order to prevent such an attack, the authorization server MUST
ensure that the redirection URI used to obtain the authorization code
is identical to the redirection URI provided when exchanging the
authorization code for an access token.  The authorization server
MUST require public clients and SHOULD require confidential clients
to register their redirection URIs.  If a redirection URI is provided
in the request, the authorization server MUST validate it against the
registered value.</t>

</section>
<section anchor="resource-owner-password-credentials" title="Resource Owner Password Credentials">

<t>The OAuth 2.0 resource owner password credentials grant type is often used for
legacy or migration reasons.  It reduces the overall risk of storing
usernames and passwords by the client but does not eliminate the need
to expose highly privileged credentials to the client.</t>

<t>This grant type carries a higher risk than other grant types because
it maintains the password anti-pattern this protocol seeks to avoid.
The client could abuse the password, or the password could
unintentionally be disclosed to an attacker (e.g., via log files or
other records kept by the client).</t>

<t>Additionally, because the resource owner does not have control over
the authorization process (the resource owner's involvement ends when
it hands over its credentials to the client), the client can obtain
access tokens with a broader scope than desired by the resource
owner.  The authorization server should consider the scope and
lifetime of access tokens issued via this grant type.</t>

<t>The resource owner password credentials grant MUST NOT be used.  This
grant type insecurely exposes the credentials of the resource owner
to the client.  Even if the client is benign, this results in an
increased attack surface (credentials can leak in more places than
just the AS) and users are trained to enter their credentials in
places other than the AS.</t>

<t>Furthermore, adapting the resource owner password credentials grant
to two-factor authentication, authentication with cryptographic
credentials (cf.  WebCrypto <xref target="webcrypto"/>, WebAuthn <xref target="webauthn"/>), and
authentication processes that require multiple steps can be hard or
impossible.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, resource owner passwords, and client
credentials MUST NOT be transmitted in the clear.  Authorization
codes SHOULD NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"/> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="cross-site-request-forgery" title="Cross-Site Request Forgery">

<t>Cross-site request forgery (CSRF) is an exploit in which an attacker
causes the user-agent of a victim end-user to follow a malicious URI
(e.g., provided to the user-agent as a misleading link, image, or
redirection) to a trusting server (usually established via the
presence of a valid session cookie).</t>

<t>A CSRF attack against the client's redirection URI allows an attacker
to inject its own authorization code or access token, which can
result in the client using an access token associated with the
attacker's protected resources rather than the victim's (e.g., save
the victim's bank account information to a protected resource
controlled by the attacker).</t>

<t>The client MUST implement CSRF protection for its redirection URI.
This is typically accomplished by requiring any request sent to the
redirection URI endpoint to include a value that binds the request to
the user-agent's authenticated state (e.g., a hash of the session
cookie used to authenticate the user-agent).  The client SHOULD
utilize the "state" request parameter to deliver this value to the
authorization server when making an authorization request.</t>

<t>Once authorization has been obtained from the end-user, the
authorization server redirects the end-user's user-agent back to the
client with the required binding value contained in the "state"
parameter.  The binding value enables the client to verify the
validity of the request by matching the binding value to the
user-agent's authenticated state.  The binding value used for CSRF
protection MUST contain a non-guessable value (as described in
Section 10.10), and the user-agent's authenticated state (e.g.,
session cookie, HTML5 local storage) MUST be kept in a location
accessible only to the client and the user-agent (i.e., protected by
same-origin policy).</t>

<t>A CSRF attack against the authorization server's authorization
endpoint can result in an attacker obtaining end-user authorization
for a malicious client without involving or alerting the end-user.</t>

<t>The authorization server MUST implement CSRF protection for its
authorization endpoint and ensure that a malicious client cannot
obtain authorization without the awareness and explicit consent of
the resource owner.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>In a clickjacking attack, an attacker registers a legitimate client
and then constructs a malicious site in which it loads the
authorization server's authorization endpoint web page in a
transparent iframe overlaid on top of a set of dummy buttons, which
are carefully constructed to be placed directly under important
buttons on the authorization page.  When an end-user clicks a
misleading visible button, the end-user is actually clicking an
invisible button on the authorization page (such as an "Authorize"
button).  This allows an attacker to trick a resource owner into
granting its client access without the end-user's knowledge.</t>

<t>To prevent this form of attack, native applications SHOULD use
external browsers instead of embedding browsers within the
application when requesting end-user authorization.  For most newer
browsers, avoidance of iframes can be enforced by the authorization
server using the (non-standard) "x-frame-options" header.  This
header can have two values, "deny" and "sameorigin", which will block
any framing, or framing by sites with a different origin,
respectively.  For older browsers, JavaScript frame-busting
techniques can be used but may not be effective in all browsers.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The authorization server, authorization endpoint, and client
redirection endpoint can be improperly configured and operate as open
redirectors.  An open redirector is an endpoint using a parameter to
automatically redirect a user-agent to the location specified by the
parameter value without any validation.</t>

<t>Open redirectors can be used in phishing attacks, or by an attacker
to get end-users to visit malicious sites by using the URI authority
component of a familiar and trusted destination.  In addition, if the
authorization server allows the client to register only part of the
redirection URI, an attacker can use an open redirector operated by
the client to construct a redirection URI that will pass the
authorization server validation but will send the authorization code
or access token to an endpoint under the control of the attacker.</t>

<t>TODO: Bring in the rest of the Security BCP attack description here</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="oauth-access-token-types-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
Section 11.2.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Access Token Types registry's initial contents are:</t>

<t><list style="symbols">
  <t>Type name: Bearer</t>
  <t>Additional Token Endpoint Response Parameters: (none)</t>
  <t>HTTP Authentication Scheme(s): Bearer</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
<section anchor="oauth-parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-authorization-endpoint-response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-2" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-extensions-error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(Section 4.1.2.1), token error response (Section 5.2), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-3" title="Initial Registry Contents">

<t>The OAuth Error registry's initial contents are:</t>

<t><list style="symbols">
  <t>Error name: invalid_request</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: invalid_token</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
  <t>Error name: insufficient_scope</t>
  <t>Error usage location: Resource access error response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): OAuth 2.1</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2246;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC5246;
&RFC6125;
&RFC8446;
&RFC5280;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

<reference anchor="OAuth-HTTP-MAC" >
  <front>
    <title>Message Authentication Code (MAC) Tokens</title>
    <author initials="J." surname="Richer" fullname="Justin Richer">
      <organization>The MITRE Corporation</organization>
    </author>
    <author initials="W." surname="Mills" fullname="William Mills">
      <organization>Yahoo! Inc.</organization>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle Corporation</organization>
    </author>
    <date year="2014" month="January" day="15"/>
  </front>
</reference>
&RFC7522;
&RFC6819;
&RFC5849;
&RFC6265;
&I-D.ietf-oauth-mtls;
&I-D.ietf-oauth-rar;
&I-D.ietf-oauth-resource-indicators;
&I-D.ietf-oauth-security-topics;
&I-D.ietf-oauth-token-binding;
<reference anchor="webauthn" >
  <front>
    <title>Web Authentication: An API for accessing Public Key Credentials Level 1</title>
    <author initials="D." surname="Balfanz">
      <organization></organization>
    </author>
    <author initials="A." surname="Czeskis">
      <organization></organization>
    </author>
    <author initials="J." surname="Hodges">
      <organization></organization>
    </author>
    <author initials="J." surname="Jones">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="A." surname="Kumar">
      <organization></organization>
    </author>
    <author initials="A." surname="Liao">
      <organization></organization>
    </author>
    <author initials="R." surname="Lindemann">
      <organization></organization>
    </author>
    <author initials="E." surname="Lundberg">
      <organization></organization>
    </author>
    <date year="2019" month="March"/>
  </front>
</reference>
<reference anchor="webcrypto" >
  <front>
    <title>Web Cryptography API</title>
    <author initials="M." surname="Watson">
      <organization></organization>
    </author>
    <date year="2017" month="January"/>
  </front>
</reference>
<reference anchor="OpenID" >
  <front>
    <title>OpenID Connect</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="OMAP" >
  <front>
    <title>Online Multimedia Authorization Protocol: An Industry Standard for Authorized Access to Internet Multimedia Resources</title>
    <author initials="J." surname="Huff">
      <organization></organization>
    </author>
    <author initials="D." surname="Schlacht">
      <organization></organization>
    </author>
    <author initials="A." surname="Nadalin">
      <organization></organization>
    </author>
    <author initials="J." surname="Simmons">
      <organization></organization>
    </author>
    <author initials="P." surname="Rosenberg">
      <organization></organization>
    </author>
    <author initials="P." surname="Madsen">
      <organization></organization>
    </author>
    <author initials="T." surname="Ace">
      <organization></organization>
    </author>
    <author initials="C." surname="Rickelton-Abdi">
      <organization></organization>
    </author>
    <author initials="B." surname="Boyer">
      <organization></organization>
    </author>
    <date year="2012" month="April"/>
  </front>
</reference>
<reference anchor="NIST800-63" >
  <front>
    <title>NIST Special Publication 800-63-1, INFORMATION SECURITY</title>
    <author initials="W." surname="Burr">
      <organization></organization>
    </author>
    <author initials="D." surname="Dodson">
      <organization></organization>
    </author>
    <author initials="E." surname="Newton">
      <organization></organization>
    </author>
    <author initials="R." surname="Perlner">
      <organization></organization>
    </author>
    <author initials="T." surname="Polk">
      <organization></organization>
    </author>
    <author initials="S." surname="Gupta">
      <organization></organization>
    </author>
    <author initials="E." surname="Nabbus">
      <organization></organization>
    </author>
    <date year="2011" month="December"/>
  </front>
</reference>
<reference anchor="OpenID.Messages" >
  <front>
    <title>OpenID Connect Messages 1.0</title>
    <author initials="N." surname="Sakimura">
      <organization></organization>
    </author>
    <author initials="J." surname="Bradley">
      <organization></organization>
    </author>
    <author initials="M." surname="Jones">
      <organization></organization>
    </author>
    <author initials="B." surname="de Medeiros">
      <organization></organization>
    </author>
    <author initials="C." surname="Mortimore">
      <organization></organization>
    </author>
    <author initials="E." surname="Jay">
      <organization></organization>
    </author>
    <date year="2012" month="June"/>
  </front>
</reference>
<reference anchor="HTTP-AUTH" >
  <front>
    <title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
    <author initials="R." surname="Fielding">
      <organization></organization>
    </author>
    <author initials="J." surname="Reschke">
      <organization></organization>
    </author>
    <date year="2012" month="October"/>
  </front>
</reference>


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in Section 2.3.1:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in Section 2.3.1:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in Section 3.3:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, 4.1.2.1,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections 4.1.2.1,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="username-syntax" title="&quot;username&quot; Syntax">

<t>The "username" element is defined in Section 4.3.2:</t>

<figure><artwork><![CDATA[
 username = *UNICODECHARNOCRLF
]]></artwork></figure>

</section>
<section anchor="password-syntax" title="&quot;password&quot; Syntax">

<t>The "password" element is defined in Section 4.3.2:</t>

<figure><artwork><![CDATA[
 password = *UNICODECHARNOCRLF
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="codeverifier-syntax" title="&quot;code_verifier&quot; Syntax">

<t>ABNF for "code_verifier" is as follows.</t>

<figure><artwork><![CDATA[
code-verifier = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
<section anchor="codechallenge-syntax" title="&quot;code_challenge&quot; Syntax">

<t>ABNF for "code_challenge" is as follows.</t>

<figure><artwork><![CDATA[
code-challenge = 43*128unreserved
unreserved = ALPHA / DIGIT / "-" / "." / "_" / "~"
ALPHA = %x41-5A / %x61-7A
DIGIT = %x30-39
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The initial OAuth 2.0 protocol specification was edited by David
Recordon, based on two previous publications: the OAuth 1.0 community
specification <xref target="RFC5849"></xref>, and OAuth WRAP (OAuth Web Resource
Authorization Profiles).  Eran Hammer then edited many
of the intermediate drafts that evolved into this RFC.  The Security
Considerations section was drafted by Torsten Lodderstedt, Mark
McGloin, Phil Hunt, Anthony Nadalin, and John Bradley.  The section
on use of the "application/x-www-form-urlencoded" media type was
drafted by Julian Reschke.  The ABNF section was drafted by Michael
B. Jones.</t>

<t>The OAuth 1.0 community specification was edited by Eran Hammer and
authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris
Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler,
Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.</t>

<t>The OAuth WRAP specification was edited by Dick Hardt and authored by
Brian Eaton, Yaron Y. Goland, Dick Hardt, and Allen Tom.</t>

<t>This specification is the work of the OAuth Working Group, which
includes dozens of active and dedicated participants.  In particular,
the following individuals contributed ideas, feedback, and wording
that shaped and formed the final specification:</t>

<t>Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden
Bell, John Bradley, Marcos Caceres, Brian Campbell, Scott Cantor,
Blaine Cook, Roger Crew, Leah Culver, Bill de hOra, Andre DeMarre,
Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor
Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert,
Yaron Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer,
Dick Hardt, Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones,
Terry Jones, John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara,
Rasmus Lerdorf, Torsten Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul
Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin,
Laurence Miao, William Mills, Chuck Mortimore, Anthony Nadalin,
Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob
Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner,
Jeremy Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson,
Allen Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar
Woodward.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIALNdWV4AA+y9aXscx5Eg/D1/Rb3wYwuQu1sEeIparge8JMriYR7W2n68
3EJ3ASizuwrTVQ0QlrW//Y0zMzIrqwFKmvHOrjFjEeiuyiMyMu5jOp26vu6X
1f3i7WlVvDzc9KfFwWy/wF/adf33sq/bpni6LlfVRbv+4BbtvIHf7xdtCU9M
4VG3KHv4++DGwY3pjYPpwT3n6rP1/aJfb7r+4MaNL28cuHJdlfd5dPfh4n7x
rOmrdVP108fr8rh387K/X3T9wrl5u6ibk/vFppuW3byu3Vl93xVF387vF5dV
B7927bpfV8ed//tyFf50JS0bX5nC/4qibuCbx7Pim3K96OkTXv3jev7BfFit
ynp5v1jAp7NT/PTfTvCT2bxd0febdX2/OO37s/tffIEP0TOzdn0ST3Q4K17B
VucfajPVYbkGCNrPZbYSv/i3M/5iOFUHc9Ej8RNmurez4rt2sajWXV9Fu3vb
4kfN4FuZuOev/20Zvp7BYTjXtOsVHPh5hQB8/fTRwf7+l/rrwa07+uudffPr
Xf313v49+fXmnQN97eaX9/TZW3cO9NlbX97SB24fHNzxv9685X/1s93ZP7gt
v967dSs8e+8G/vruzeGbR8+e3aftCSLvPGoX1aJ4BIdUzgHPijdVX0ynxd3p
Ud0Xh6tqXc/LpnjTl80CzrHAx4vjdg1YecwAgPMiDJ2fls1JNSkOX7x5VvyP
m7NbOzRPQLIA8h0/7gsaoFz6CToYrIO1bfqK3+cLsw+ggT+/v/lo9vrJo+lp
v1reurE/3f/yyy/3Adr3zXcfV8sp3KR7+/sILFfrOvmg6FpNv3n79tX0+eGj
GBTPq64rTyq6zlXTwwJpd7TlXXh6D3DlQ9V0uY1NZWvfwj2um+J1PT+t1vKd
YOC3s/RjuBNMSp4/e/v6CUy0PmvXNGky6vf1clmXq+I5/NvFo34/Sz6lQf9U
nrbt/wewnM+Sob4pm6bqirfd/LQ9rpr6JB7um9nwK3311Wm9LL7ZNH38yqtZ
/CEt4CWg07IabEnJ3/6tKR7fbUbQu4DYisH3/C26fc8j/p2DO4TXz6aPZ3XV
H0+ZoK76ZZf5eF2uc59WXbtZz6tp3SzwaOFeZ57qqjkQlf5y2rdn9Tz3RI84
ALejIeIL319UR/hFEyPT99VRgkhA3Zri8NUzuj7lfA7YBiMUrzZHy3pe/L66
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
1sd+HYN6p9E5JguR+hp8UnVPMX2Ub96ocoRW4SBRsdmIv9nWHwsoxGsRy3Ik
YppmD9ruggyyWKoz2dGzMLTNyP1k+iCkgcNHt9KHLVfdJcu84MZjct23368V
iIooLhKjwmr6kW8rBsDYEthsHwhMDjJbyQqaTf5zyYpRltJNMwLTDkyVh+Ra
ekE1d2dFeXKR3kGlCj9Jo83LbL6tRU6jxXQTkhuj5R9tMNlxGEOXlwnJPykK
c3T8DqRSL+awD5lN3TGS1P6q0slxhlGUEqfPq0isrbHEE5QZr1FVfUEtItaV
FFfb3h1PYijjwRzZ9tpV3UlYC/XNkIJBhQazUOgdDe1L7koRwiUoAyAmkrNZ
uoOE/gYrNiYLQStCzJAIPOZY1A1PL9SND/PIHooYF47W6G74JJ6ZkIafwTST
kca5ZkJVR+MNeRtRUQ5UrgZhfTZTDyt9cf1O8blSdSCsmziQhQzHFkVOs7F9
vUzQXIa2FQa1CbWoJYOmpz6mJmGNikm63IKpvIGhdFjx0bhazZxc1A7t7Hjt
rFrHTdawMh+exumaetqbQbSgAG6bsnKkEOVaKzMMsuN5bRwHQz1JqYEaaSpH
g771E2/78bTSC/CxDnYq1cwHupXUDR0z+/YmeNUOyP1RxA/ah4JaZCOjwAff
S5KyPG0BRT0+b4ajKkVtk3G7zbUADOmvF026jKQ3jV2JxRkfGJaaDQy2jZyE
ryiMlVAKroRCFIl7j2+6YP3IA1HqoHXFCls8YudJWxhca6Jpq67M1hNJ7GpD
qvb4YhUYY6cwiC6WhtUdqEihVf9ZF7bUd7Co0FzCmLuOomgJjaseyevEymdj
xiVyeyXaaAYwQZZR/Z9juLkef5a+gcgTU5HnZVOfbZZbXDLbYq+/T/uuRhOG
vgJjIdCOo3cTOGpZ7mFMmRak3dEvqG2RS7JibJVzHG+le2Qgc1SslPVOZqDQ
Do76sz2bBwjNJQvYe5ohNYb6kcWZDG8h0I3j23QJfq1bIsZncVl9WiGWtVdl
iZQu1FiKAduXIsPwIZaoGw6PvnqV+awgEUWAFlxepdcM0zGgcFg1X7NJLJfA
V0ddhkQgbJJWNCOboJImUmfSeTNpiiMSYHktkKvW4WviExDWNZcUw9glGHfF
ZR2iEHcXcAoNcs2H2FAWN8gY7AabkFF0We5qWyuLzk9eWO4pw9tzDZryQJZQ
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
SWyK2h60HNwqKqW8VFE+jkop4FzNT6h+akr4mFXg3Rc5LIkn5Ky22PEEF2uL
QTpUzcgpLSEIEXJqnsR3hEmF+JpC+KBH1oqlkqDsOUyyNEbQSQtNZ78VIYjd
15LqI9m4xqZtSvEeULZHalUFVDhmFK7shfEu2fIpdpKbuJA3cdsi1F8nCTRX
ekbM2SetdLIVxC14b/lCce1X+VQjE8KdxRNug5V7qHZVVvPjWtQTtKcaKRHK
v1KpLZpDH/yz/limlsSDezDvTOGgWESlgfrCXQE4ZkWbU/XanH6SNqeWKiOr
aXOKYjd/iTZnasN81eZW0uYsu37V4v5UWlxYQu8Jqpx7kSLJrLXFNGF+05Rz
GR77hrc3GvwEMZXBhmaryFus8YoTuWy08gQegT1oHUg5AW4QwIavOs6fUMdZ
WcWp2ZeXqTa6tD7EbPUhGYc3S2tgEdsaVmSpAS0sVmOW6THAl3rrxcbLZSME
OsJ8LB/lrzEcs+6oWuEnEO2LDcuZ03+3U8lQXJ8yutA151XuKw28XZKOX+pD
UIR+3g/5UqsHrcNPGmgtXb/Q6KiQ1gfPiPzLhvpFKcljffLy+lXH6Oqo/vaC
0rdW/Y5JRp18gjD/dXnv4y3WOfuQ/J4paVKVf3vWM6kGv/1IJAtolVXwxfcx
428LeGRBrd8nuOB+oVeudjSqNJp6k1NQaPVp5ZBX9esttQSpOr/eEy1Bqtav
90RLkKrz6z3REqQ8S5B+qiVIVS1B+o9iCQq46Ks16E9lDTr15/apFqGvZpXF
ZhUGNXP2FBjSp1lUxLf5iywqmAiuP6PXaKUNsmptUVVrSw3/2RPZZ9rO91wN
cK7QvOrO/YRNutJH/X4cl2tMh15sTu2tKV6uJKOhth55bU3zoMykC38DTn1K
0I6/uauVgnZW3JuWB+3Ube7qaTE79Xu7WsXLs2RvV6t6ef4we7vjyK8b+x9v
Y1+2s7McetKOrjH0fB47aPzYtgHbh6sRJpTG8u7RBVnWs/msMFVPMGmlpuQ7
tCBF37tmcKv6kdxQPtmP5OBGpSWvpnPThO5sdDF2p9cyZ8vwSffcZrffavuo
LLY488JXXsArJAcYLbIq44NJMlnqNeK+RtpLeWj3tBc/bfD53Dq3If4JZT39
JIWNpSr5V61uqVbnyPjH8patrtuF6ssyT5knYAxw/AdnK6pd4doiEdYul88R
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
HkAiqXewm93Dt3WtQ/synV9eqv8Cz/LOz6UrAgA=

-->

</rfc>

