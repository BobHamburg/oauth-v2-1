<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.13 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2246.xml">
<!ENTITY RFC2616 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2616.xml">
<!ENTITY RFC2617 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY RFC2818 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2818.xml">
<!ENTITY RFC3629 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml">
<!ENTITY RFC3986 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC4627 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4627.xml">
<!ENTITY RFC4949 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4949.xml">
<!ENTITY RFC5226 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5226.xml">
<!ENTITY RFC5234 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5234.xml">
<!ENTITY RFC5246 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC6125 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6125.xml">
<!ENTITY W3C.REC-html401-19991224 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml">
<!ENTITY W3C.REC-xml-20081126 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.REC-xml-20081126.xml">
<!ENTITY RFC7522 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7522.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC5849 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5849.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="rfc6749" category="std">

  <front>
    <title>The OAuth 2.0 Authorization Framework</title>

    <author initials="D." surname="Hardt" fullname="Dick Hardt">
      <organization></organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org</uri>
      </address>
    </author>

    <date year="2012" month="October" day="01"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The OAuth 2.0 authorization framework enables a third-party
application to obtain limited access to an HTTP service, either on
behalf of a resource owner by orchestrating an approval interaction
between the resource owner and the HTTP service, or by allowing the
third-party application to obtain access on its own behalf.  This
specification replaces and obsoletes the OAuth 1.0 protocol described
in RFC 5849.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>In the traditional client-server authentication model, the client
requests an access-restricted resource (protected resource) on the
server by authenticating with the server using the resource owner's
credentials.  In order to provide third-party applications access to
restricted resources, the resource owner shares its credentials with
the third party.  This creates several problems and limitations:</t>

<t><list style="symbols">
  <t>Third-party applications are required to store the resource
owner's credentials for future use, typically a password in
clear-text.</t>
  <t>Servers are required to support password authentication, despite
the security weaknesses inherent in passwords.</t>
  <t>Third-party applications gain overly broad access to the resource
owner's protected resources, leaving resource owners without any
ability to restrict duration or access to a limited subset of
resources.</t>
  <t>Resource owners cannot revoke access to an individual third party
without revoking access to all third parties, and must do so by
changing the third party's password.</t>
  <t>Compromise of any third-party application results in compromise of
the end-user's password and all of the data protected by that
password.</t>
</list></t>

<t>OAuth addresses these issues by introducing an authorization layer
and separating the role of the client from that of the resource
owner.  In OAuth, the client requests access to resources controlled
by the resource owner and hosted by the resource server, and is
issued a different set of credentials than those of the resource
owner.</t>

<t>Instead of using the resource owner's credentials to access protected
resources, the client obtains an access token &#8211; a string denoting a
specific scope, lifetime, and other access attributes.  Access tokens
are issued to third-party clients by an authorization server with the
approval of the resource owner.  The client uses the access token to
access the protected resources hosted by the resource server.</t>

<t>For example, an end-user (resource owner) can grant a printing
service (client) access to her protected photos stored at a photo-
sharing service (resource server), without sharing her username and
password with the printing service.  Instead, she authenticates
directly with a server trusted by the photo-sharing service
(authorization server), which issues the printing service delegation-
specific credentials (access token).</t>

<t>This specification is designed for use with HTTP (<xref target="RFC2616"/>).  The
use of OAuth over any protocol other than HTTP is out of scope.</t>

<t>The OAuth 1.0 protocol (<xref target="RFC5849"/>), published as an informational
document, was the result of a small ad hoc community effort.  This
Standards Track specification builds on the OAuth 1.0 deployment
experience, as well as additional use cases and extensibility
requirements gathered from the wider IETF community.  The OAuth 2.0
protocol is not backward compatible with OAuth 1.0.  The two versions
may co-exist on the network, and implementations may choose to
support both.  However, it is the intention of this specification
that new implementations support OAuth 2.0 as specified in this
document and that OAuth 1.0 is used only to support existing
deployments.  The OAuth 2.0 protocol shares very few implementation
details with the OAuth 1.0 protocol.  Implementers familiar with
OAuth 1.0 should approach this document without any assumptions as to
its structure and details.</t>

<section anchor="roles" title="Roles">

<t>OAuth defines four roles:</t>

<t><list style="hanging">
  <t hangText='&quot;resource owner&quot;:'>
  An entity capable of granting access to a protected resource.
When the resource owner is a person, it is referred to as an
end-user.</t>
  <t hangText='&quot;resource server&quot;:'>
  The server hosting the protected resources, capable of accepting
and responding to protected resource requests using access tokens.</t>
  <t hangText='&quot;client&quot;:'>
  An application making protected resource requests on behalf of the
resource owner and with its authorization.  The term "client" does
not imply any particular implementation characteristics (e.g.,
whether the application executes on a server, a desktop, or other
devices).</t>
  <t hangText='&quot;authorization server&quot;:'>
  The server issuing access tokens to the client after successfully
authenticating the resource owner and obtaining authorization.</t>
</list></t>

<t>The interaction between the authorization server and resource server
is beyond the scope of this specification.  The authorization server
may be the same server as the resource server or a separate entity.
A single authorization server may issue access tokens accepted by
multiple resource servers.</t>

</section>
<section anchor="protocol-flow" title="Protocol Flow">

<figure title="Abstract Protocol Flow" anchor="fig-protocol-flow"><artwork><![CDATA[
     +--------+                               +---------------+
     |        |--(1)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(2)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(3)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(4)----- Access Token -------|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(5)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(6)--- Protected Resource ---|               |
     +--------+                               +---------------+
]]></artwork></figure>

<t>The abstract OAuth 2.0 flow illustrated in <xref target="fig-protocol-flow"/> describes the
interaction between the four roles and includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests authorization from the resource owner.  The
authorization request can be made directly to the resource owner
(as shown), or preferably indirectly via the authorization
server as an intermediary.</t>
  <t>The client receives an authorization grant, which is a
credential representing the resource owner's authorization,
expressed using one of four grant types defined in this
specification or using an extension grant type.  The
authorization grant type depends on the method used by the
client to request authorization and the types supported by the
authorization server.</t>
  <t>The client requests an access token by authenticating with the
authorization server and presenting the authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token.</t>
  <t>The client requests the protected resource from the resource
server and authenticates by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
</list></t>

<t>The preferred method for the client to obtain an authorization grant
from the resource owner (depicted in steps (1) and (2)) is to use the
authorization server as an intermediary, which is illustrated in
Figure 3 in Section 4.1.</t>

</section>
<section anchor="authorization-grant" title="Authorization Grant">

<t>An authorization grant is a credential representing the resource
owner's authorization (to access its protected resources) used by the
client to obtain an access token.  This specification defines four
grant types &#8211; authorization code, implicit, resource owner password
credentials, and client credentials &#8211; as well as an extensibility
mechanism for defining additional types.</t>

<section anchor="authorization-code" title="Authorization Code">

<t>The authorization code is obtained by using an authorization server
as an intermediary between the client and resource owner.  Instead of
requesting authorization directly from the resource owner, the client
directs the resource owner to an authorization server (via its
user-agent as defined in <xref target="RFC2616"/>), which in turn directs the
resource owner back to the client with the authorization code.</t>

<t>Before directing the resource owner back to the client with the
authorization code, the authorization server authenticates the
resource owner and obtains authorization.  Because the resource owner
only authenticates with the authorization server, the resource
owner's credentials are never shared with the client.</t>

<t>The authorization code provides a few important security benefits,
such as the ability to authenticate the client, as well as the
transmission of the access token directly to the client without
passing it through the resource owner's user-agent and potentially
exposing it to others, including the resource owner.</t>

</section>
<section anchor="implicit" title="Implicit">

<t>The implicit grant is a simplified authorization code flow optimized
for clients implemented in a browser using a scripting language such
as JavaScript.  In the implicit flow, instead of issuing the client
an authorization code, the client is issued an access token directly
(as the result of the resource owner authorization).  The grant type
is implicit, as no intermediate credentials (such as an authorization
code) are issued (and later used to obtain an access token).</t>

<t>When issuing an access token during the implicit grant flow, the
authorization server does not authenticate the client.  In some
cases, the client identity can be verified via the redirection URI
used to deliver the access token to the client.  The access token may
be exposed to the resource owner or other applications with access to
the resource owner's user-agent.</t>

<t>Implicit grants improve the responsiveness and efficiency of some
clients (such as a client implemented as an in-browser application),
since it reduces the number of round trips required to obtain an
access token.  However, this convenience should be weighed against
the security implications of using implicit grants, such as those
described in Sections 10.3 and 10.16, especially when the
authorization code grant type is available.</t>

</section>
<section anchor="resource-owner-password-credentials" title="Resource Owner Password Credentials">

<t>The resource owner password credentials (i.e., username and password)
can be used directly as an authorization grant to obtain an access
token.  The credentials should only be used when there is a high
degree of trust between the resource owner and the client (e.g., the
client is part of the device operating system or a highly privileged
application), and when other authorization grant types are not
available (such as an authorization code).</t>

<t>Even though this grant type requires direct client access to the
resource owner credentials, the resource owner credentials are used
for a single request and are exchanged for an access token.  This
grant type can eliminate the need for the client to store the
resource owner credentials for future use, by exchanging the
credentials with a long-lived access token or refresh token.</t>

</section>
<section anchor="client-credentials" title="Client Credentials">

<t>The client credentials (or other forms of client authentication) can
be used as an authorization grant when the authorization scope is
limited to the protected resources under the control of the client,
or to protected resources previously arranged with the authorization
server.  Client credentials are used as an authorization grant
typically when the client is acting on its own behalf (the client is
also the resource owner) or is requesting access to protected
resources based on an authorization previously arranged with the
authorization server.</t>

</section>
</section>
<section anchor="access-token" title="Access Token">

<t>Access tokens are credentials used to access protected resources.  An
access token is a string representing an authorization issued to the
client.  The string is usually opaque to the client.  Tokens
represent specific scopes and durations of access, granted by the
resource owner, and enforced by the resource server and authorization
server.</t>

<t>The token may denote an identifier used to retrieve the authorization
information or may self-contain the authorization information in a
verifiable manner (i.e., a token string consisting of some data and a
signature).  Additional authentication credentials, which are beyond
the scope of this specification, may be required in order for the
client to use a token.</t>

<t>The access token provides an abstraction layer, replacing different
authorization constructs (e.g., username and password) with a single
token understood by the resource server.  This abstraction enables
issuing access tokens more restrictive than the authorization grant
used to obtain them, as well as removing the resource server's need
to understand a wide range of authentication methods.</t>

<t>Access tokens can have different formats, structures, and methods of
utilization (e.g., cryptographic properties) based on the resource
server security requirements.  Access token attributes and the
methods used to access protected resources are beyond the scope of
this specification and are defined by companion specifications such
as <xref target="RFC6750"/>.</t>

</section>
<section anchor="refresh-token" title="Refresh Token">

<t>Refresh tokens are credentials used to obtain access tokens.  Refresh
tokens are issued to the client by the authorization server and are
used to obtain a new access token when the current access token
becomes invalid or expires, or to obtain additional access tokens
with identical or narrower scope (access tokens may have a shorter
lifetime and fewer permissions than authorized by the resource
owner).  Issuing a refresh token is optional at the discretion of the
authorization server.  If the authorization server issues a refresh
token, it is included when issuing an access token (i.e., step (D) in
Figure 1).</t>

<t>A refresh token is a string representing the authorization granted to
the client by the resource owner.  The string is usually opaque to
the client.  The token denotes an identifier used to retrieve the
authorization information.  Unlike access tokens, refresh tokens are
intended for use only with authorization servers and are never sent
to resource servers.</t>

<figure title="Refreshing an Expired Access Token" anchor="fig-refresh-token-flow"><artwork><![CDATA[
    +--------+                                           +---------------+
    |        |--(1)------- Authorization Grant --------->|               |
    |        |                                           |               |
    |        |<-(2)----------- Access Token -------------|               |
    |        |               & Refresh Token             |               |
    |        |                                           |               |
    |        |                            +----------+   |               |
    |        |--(3)---- Access Token ---->|          |   |               |
    |        |                            |          |   |               |
    |        |<-(4)- Protected Resource --| Resource |   | Authorization |
    | Client |                            |  Server  |   |     Server    |
    |        |--(5)---- Access Token ---->|          |   |               |
    |        |                            |          |   |               |
    |        |<-(6)- Invalid Token Error -|          |   |               |
    |        |                            +----------+   |               |
    |        |                                           |               |
    |        |--(7)----------- Refresh Token ----------->|               |
    |        |                                           |               |
    |        |<-(8)----------- Access Token -------------|               |
    +--------+           & Optional Refresh Token        +---------------+
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-refresh-token-flow"/> includes the following steps:</t>

<t><list style="numbers">
  <t>The client requests an access token by authenticating with the
authorization server and presenting an authorization grant.</t>
  <t>The authorization server authenticates the client and validates
the authorization grant, and if valid, issues an access token
and a refresh token.</t>
  <t>The client makes a protected resource request to the resource
server by presenting the access token.</t>
  <t>The resource server validates the access token, and if valid,
serves the request.</t>
  <t>Steps (3) and (4) repeat until the access token expires.  If the
client knows the access token expired, it skips to step (7);
otherwise, it makes another protected resource request.</t>
  <t>Since the access token is invalid, the resource server returns
an invalid token error.</t>
  <t>The client requests a new access token by authenticating with
the authorization server and presenting the refresh token.  The
client authentication requirements are based on the client type
and on the authorization server policies.</t>
  <t>The authorization server authenticates the client and validates
the refresh token, and if valid, issues a new access token (and,
optionally, a new refresh token).</t>
</list></t>

<t>Steps (3), (4), (5), and (6) are outside the scope of this
specification, as described in Section 7.</t>

</section>
<section anchor="tls-version" title="TLS Version">

<t>Whenever Transport Layer Security (TLS) is used by this
specification, the appropriate version (or versions) of TLS will vary
over time, based on the widespread deployment and known security
vulnerabilities.  At the time of this writing, TLS version 1.2
<xref target="RFC5246"/> is the most recent version, but has a very limited
deployment base and might not be readily available for
implementation.  TLS version 1.0 <xref target="RFC2246"/> is the most widely
deployed version and will provide the broadest interoperability.</t>

<t>Implementations MAY also support additional transport-layer security
mechanisms that meet their security requirements.</t>

</section>
<section anchor="http-redirections" title="HTTP Redirections">

<t>This specification makes extensive use of HTTP redirections, in which
the client or the authorization server directs the resource owner's
user-agent to another destination.  While the examples in this
specification show the use of the HTTP 302 status code, any other
method available via the user-agent to accomplish this redirection is
allowed and is considered to be an implementation detail.</t>

</section>
<section anchor="interoperability" title="Interoperability">

<t>OAuth 2.0 provides a rich authorization framework with well-defined
security properties.  However, as a rich and highly extensible
framework with many optional components, on its own, this
specification is likely to produce a wide range of non-interoperable
implementations.</t>

<t>In addition, this specification leaves a few required components
partially or fully undefined (e.g., client registration,
authorization server capabilities, endpoint discovery).  Without
these components, clients must be manually and specifically
configured against a specific authorization server and resource
server in order to interoperate.</t>

<t>This framework was designed with the clear expectation that future
work will define prescriptive profiles and extensions necessary to
achieve full web-scale interoperability.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
specification are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF)
notation of <xref target="RFC5234"/>.  Additionally, the rule URI-reference is
included from "Uniform Resource Identifier (URI): Generic Syntax"
<xref target="RFC3986"/>.</t>

<t>Certain security-related terms are to be understood in the sense
defined in <xref target="RFC4949"/>.  These terms include, but are not limited to,
"attack", "authentication", "authorization", "certificate",
"confidentiality", "credential", "encryption", "identity", "sign",
"signature", "trust", "validate", and "verify".</t>

<t>Unless otherwise noted, all the protocol parameter names and values
are case sensitive.</t>

</section>
</section>
<section anchor="client-registration" title="Client Registration">

<t>Before initiating the protocol, the client registers with the
authorization server.  The means through which the client registers
with the authorization server are beyond the scope of this
specification but typically involve end-user interaction with an HTML
registration form.</t>

<t>Client registration does not require a direct interaction between the
client and the authorization server.  When supported by the
authorization server, registration can rely on other means for
establishing trust and obtaining the required client properties
(e.g., redirection URI, client type).  For example, registration can
be accomplished using a self-issued or third-party-issued assertion,
or by the authorization server performing client discovery using a
trusted channel.</t>

<t>When registering a client, the client developer SHALL:</t>

<t><list style="symbols">
  <t>specify the client type as described in Section 2.1,</t>
  <t>provide its client redirection URIs as described in Section 3.1.2,
and</t>
  <t>include any other information required by the authorization server
(e.g., application name, website, description, logo image, the
acceptance of legal terms).</t>
</list></t>

<section anchor="client-types" title="Client Types">

<t>OAuth defines two client types, based on their ability to
authenticate securely with the authorization server (i.e., ability to
maintain the confidentiality of their client credentials):</t>

<t><list style="hanging">
  <t hangText='&quot;confidential&quot;:'>
  Clients capable of maintaining the confidentiality of their
credentials (e.g., client implemented on a secure server with
restricted access to the client credentials), or capable of secure
client authentication using other means.</t>
  <t hangText='&quot;public&quot;:'>
  Clients incapable of maintaining the confidentiality of their
credentials (e.g., clients executing on the device used by the
resource owner, such as an installed native application or a web
browser-based application), and incapable of secure client
authentication via any other means.</t>
</list></t>

<t>The client type designation is based on the authorization server's
definition of secure authentication and its acceptable exposure
levels of client credentials.  The authorization server SHOULD NOT
make assumptions about the client type.</t>

<t>A client may be implemented as a distributed set of components, each
with a different client type and security context (e.g., a
distributed client with both a confidential server-based component
and a public browser-based component).  If the authorization server
does not provide support for such clients or does not provide
guidance with regard to their registration, the client SHOULD
register each component as a separate client.</t>

<t>This specification has been designed around the following client
profiles:</t>

<t><list style="hanging">
  <t hangText='&quot;web application&quot;:'>
  A web application is a confidential client running on a web
server.  Resource owners access the client via an HTML user
interface rendered in a user-agent on the device used by the
resource owner.  The client credentials as well as any access
token issued to the client are stored on the web server and are
not exposed to or accessible by the resource owner.</t>
  <t hangText='&quot;user-agent-based application&quot;:'>
  A user-agent-based application is a public client in which the
client code is downloaded from a web server and executes within a
user-agent (e.g., web browser) on the device used by the resource
owner.  Protocol data and credentials are easily accessible (and
often visible) to the resource owner.  Since such applications
reside within the user-agent, they can make seamless use of the
user-agent capabilities when requesting authorization.</t>
  <t hangText='&quot;native application&quot;:'>
  A native application is a public client installed and executed on
the device used by the resource owner.  Protocol data and
credentials are accessible to the resource owner.  It is assumed
that any client authentication credentials included in the
application can be extracted.  On the other hand, dynamically
issued credentials such as access tokens or refresh tokens can
receive an acceptable level of protection.  At a minimum, these
credentials are protected from hostile servers with which the
application may interact.  On some platforms, these credentials
might be protected from other applications residing on the same
device.</t>
</list></t>

</section>
<section anchor="client-identifier" title="Client Identifier">

<t>The authorization server issues the registered client a client
identifier &#8211; a unique string representing the registration
information provided by the client.  The client identifier is not a
secret; it is exposed to the resource owner and MUST NOT be used
alone for client authentication.  The client identifier is unique to
the authorization server.</t>

<t>The client identifier string size is left undefined by this
specification.  The client should avoid making assumptions about the
identifier size.  The authorization server SHOULD document the size
of any identifier it issues.</t>

</section>
<section anchor="client-authentication" title="Client Authentication">

<t>If the client type is confidential, the client and authorization
server establish a client authentication method suitable for the
security requirements of the authorization server.  The authorization
server MAY accept any form of client authentication meeting its
security requirements.</t>

<t>Confidential clients are typically issued (or establish) a set of
client credentials used for authenticating with the authorization
server (e.g., password, public/private key pair).</t>

<t>The authorization server MAY establish a client authentication method
with public clients.  However, the authorization server MUST NOT rely
on public client authentication for the purpose of identifying the
client.</t>

<t>The client MUST NOT use more than one authentication method in each
request.</t>

<section anchor="client-password" title="Client Password">

<t>Clients in possession of a client password MAY use the HTTP Basic
authentication scheme as defined in <xref target="RFC2617"/> to authenticate with
the authorization server.  The client identifier is encoded using the
"application/x-www-form-urlencoded" encoding algorithm per
Appendix B, and the encoded value is used as the username; the client
password is encoded using the same algorithm and used as the
password.  The authorization server MUST support the HTTP Basic
authentication scheme for authenticating clients that were issued a
client password.</t>

<t>For example (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3
]]></artwork></figure>

<t>Alternatively, the authorization server MAY support including the
client credentials in the request-body using the following
parameters:</t>

<t><list style="hanging">
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier issued to the client during
the registration process described by Section 2.2.</t>
  <t hangText='&quot;client_secret&quot;:'>
  REQUIRED.  The client secret.  The client MAY omit the
parameter if the client secret is an empty string.</t>
</list></t>

<t>Including the client credentials in the request-body using the two
parameters is NOT RECOMMENDED and SHOULD be limited to clients unable
to directly utilize the HTTP Basic authentication scheme (or other
password-based HTTP authentication schemes).  The parameters can only
be transmitted in the request-body and MUST NOT be included in the
request URI.</t>

<t>For example, a request to refresh an access token (Section 6) using
the body parameters (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
&client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]></artwork></figure>

<t>The authorization server MUST require the use of TLS as described in
Section 1.6 when sending requests using password authentication.</t>

<t>Since this client authentication method involves a password, the
authorization server MUST protect any endpoint utilizing it against
brute force attacks.</t>

</section>
<section anchor="other-authorization-methods" title="Other Authorization Methods">

<t>The authorization server MAY support any suitable HTTP authentication
scheme matching its security requirements.  When using other
authentication methods, the authorization server MUST define a
mapping between the client identifier (registration record) and
authentication scheme.</t>

</section>
</section>
<section anchor="unregistered-clients" title="Unregistered Clients">

<t>This specification does not exclude the use of unregistered clients.
However, the use of such clients is beyond the scope of this
specification and requires additional security analysis and review of
its interoperability impact.</t>

</section>
</section>
<section anchor="protocol-endpoints" title="Protocol Endpoints">

<t>The authorization process utilizes two authorization server endpoints
(HTTP resources):</t>

<t><list style="symbols">
  <t>Authorization endpoint - used by the client to obtain
authorization from the resource owner via user-agent redirection.</t>
  <t>Token endpoint - used by the client to exchange an authorization
grant for an access token, typically with client authentication.</t>
</list></t>

<t>As well as one client endpoint:</t>

<t><list style="symbols">
  <t>Redirection endpoint - used by the authorization server to return
responses containing authorization credentials to the client via
the resource owner user-agent.</t>
</list></t>

<t>Not every authorization grant type utilizes both endpoints.
Extension grant types MAY define additional endpoints as needed.</t>

<section anchor="authorization-endpoint" title="Authorization Endpoint">

<t>The authorization endpoint is used to interact with the resource
owner and obtain an authorization grant.  The authorization server
MUST first verify the identity of the resource owner.  The way in
which the authorization server authenticates the resource owner
(e.g., username and password login, session cookies) is beyond the
scope of this specification.</t>

<t>The means through which the client obtains the location of the
authorization endpoint are beyond the scope of this specification,
but the location is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the authorization endpoint result in user
authentication and the transmission of clear-text credentials (in the
HTTP response), the authorization server MUST require the use of TLS
as described in Section 1.6 when sending requests to the
authorization endpoint.</t>

<t>The authorization server MUST support the use of the HTTP "GET"
method <xref target="RFC2616"/> for the authorization endpoint and MAY support the
use of the "POST" method as well.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="response-type" title="Response Type">

<t>The authorization endpoint is used by the authorization code grant
type and implicit grant type flows.  The client informs the
authorization server of the desired grant type using the following
parameter:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  The value MUST be one of "code" for requesting an
authorization code as described by Section 4.1.1, "token" for
requesting an access token (implicit grant) as described by
Section 4.2.1, or a registered extension value as described by
Section 8.4.</t>
</list></t>

<t>Extension response types MAY contain a space-delimited (%x20) list of
values, where the order of values does not matter (e.g., response
type "a b" is the same as "b a").  The meaning of such composite
response types is defined by their respective specifications.</t>

<t>If an authorization request is missing the "response_type" parameter,
or if the response type is not understood, the authorization server
MUST return an error response as described in Section 4.1.2.1.</t>

</section>
<section anchor="redirection-endpoint" title="Redirection Endpoint">

<t>After completing its interaction with the resource owner, the
authorization server directs the resource owner's user-agent back to
the client.  The authorization server redirects the user-agent to the
client's redirection endpoint previously established with the
authorization server during the client registration process or when
making the authorization request.</t>

<t>The redirection endpoint URI MUST be an absolute URI as defined by
<xref target="RFC3986"/> Section 4.3.  The endpoint URI MAY include an
"application/x-www-form-urlencoded" formatted (per Appendix B) query
component (<xref target="RFC3986"/> Section 3.4), which MUST be retained when adding
additional query parameters.  The endpoint URI MUST NOT include a
fragment component.</t>

<section anchor="endpoint-request-confidentiality" title="Endpoint Request Confidentiality">

<t>The redirection endpoint SHOULD require the use of TLS as described
in Section 1.6 when the requested response type is "code" or "token",
or when the redirection request will result in the transmission of
sensitive credentials over an open network.  This specification does
not mandate the use of TLS because at the time of this writing,
requiring clients to deploy TLS is a significant hurdle for many
client developers.  If TLS is not available, the authorization server
SHOULD warn the resource owner about the insecure endpoint prior to
redirection (e.g., display a message during the authorization
request).</t>

<t>Lack of transport-layer security can have a severe impact on the
security of the client and the protected resources it is authorized
to access.  The use of transport-layer security is particularly
critical when the authorization process is used as a form of
delegated end-user authentication by the client (e.g., third-party
sign-in service).</t>

</section>
<section anchor="registration-requirements" title="Registration Requirements">

<t>The authorization server MUST require the following clients to
register their redirection endpoint:</t>

<t><list style="symbols">
  <t>Public clients.</t>
  <t>Confidential clients utilizing the implicit grant type.</t>
</list></t>

<t>The authorization server SHOULD require all clients to register their
redirection endpoint prior to utilizing the authorization endpoint.</t>

<t>The authorization server SHOULD require the client to provide the
complete redirection URI (the client MAY use the "state" request
parameter to achieve per-request customization).  If requiring the
registration of the complete redirection URI is not possible, the
authorization server SHOULD require the registration of the URI
scheme, authority, and path (allowing the client to dynamically vary
only the query component of the redirection URI when requesting
authorization).</t>

<t>The authorization server MAY allow the client to register multiple
redirection endpoints.</t>

<t>Lack of a redirection URI registration requirement can enable an
attacker to use the authorization endpoint as an open redirector as
described in Section 10.15.</t>

</section>
<section anchor="dynamic-configuration" title="Dynamic Configuration">

<t>If multiple redirection URIs have been registered, if only part of
the redirection URI has been registered, or if no redirection URI has
been registered, the client MUST include a redirection URI with the
authorization request using the "redirect_uri" request parameter.</t>

<t>When a redirection URI is included in an authorization request, the
authorization server MUST compare and match the value received
against at least one of the registered redirection URIs (or URI
components) as defined in <xref target="RFC3986"/> Section 6, if any redirection
URIs were registered.  If the client registration included the full
redirection URI, the authorization server MUST compare the two URIs
using simple string comparison as defined in <xref target="RFC3986"/> Section 6.2.1.</t>

</section>
<section anchor="invalid-endpoint" title="Invalid Endpoint">

<t>If an authorization request fails validation due to a missing,
invalid, or mismatching redirection URI, the authorization server
SHOULD inform the resource owner of the error and MUST NOT
automatically redirect the user-agent to the invalid redirection URI.</t>

</section>
<section anchor="endpoint-content" title="Endpoint Content">

<t>The redirection request to the client's endpoint typically results in
an HTML document response, processed by the user-agent.  If the HTML
response is served directly as the result of the redirection request,
any script included in the HTML document will execute with full
access to the redirection URI and the credentials it contains.</t>

<t>The client SHOULD NOT include any third-party scripts (e.g., third-
party analytics, social plug-ins, ad networks) in the redirection
endpoint response.  Instead, it SHOULD extract the credentials from
the URI and redirect the user-agent again to another endpoint without
exposing the credentials (in the URI or elsewhere).  If third-party
scripts are included, the client MUST ensure that its own scripts
(used to extract and remove the credentials from the URI) will
execute first.</t>

</section>
</section>
</section>
<section anchor="token-endpoint" title="Token Endpoint">

<t>The token endpoint is used by the client to obtain an access token by
presenting its authorization grant or refresh token.  The token
endpoint is used with every authorization grant except for the
implicit grant type (since an access token is issued directly).</t>

<t>The means through which the client obtains the location of the token
endpoint are beyond the scope of this specification, but the location
is typically provided in the service documentation.</t>

<t>The endpoint URI MAY include an "application/x-www-form-urlencoded"
formatted (per Appendix B) query component (<xref target="RFC3986"/> Section 3.4),
which MUST be retained when adding additional query parameters.  The
endpoint URI MUST NOT include a fragment component.</t>

<t>Since requests to the token endpoint result in the transmission of
clear-text credentials (in the HTTP request and response), the
authorization server MUST require the use of TLS as described in
Section 1.6 when sending requests to the token endpoint.</t>

<t>The client MUST use the HTTP "POST" method when making access token
requests.</t>

<t>Parameters sent without a value MUST be treated as if they were
omitted from the request.  The authorization server MUST ignore
unrecognized request parameters.  Request and response parameters
MUST NOT be included more than once.</t>

<section anchor="client-authentication-1" title="Client Authentication">

<t>Confidential clients or other clients issued client credentials MUST
authenticate with the authorization server as described in
Section 2.3 when making requests to the token endpoint.  Client
authentication is used for:</t>

<t><list style="symbols">
  <t>Enforcing the binding of refresh tokens and authorization codes to
the client they were issued to.  Client authentication is critical
when an authorization code is transmitted to the redirection
endpoint over an insecure channel or when the redirection URI has
not been registered in full.</t>
  <t>Recovering from a compromised client by disabling the client or
changing its credentials, thus preventing an attacker from abusing
stolen refresh tokens.  Changing a single set of client
credentials is significantly faster than revoking an entire set of
refresh tokens.</t>
  <t>Implementing authentication management best practices, which
require periodic credential rotation.  Rotation of an entire set
of refresh tokens can be challenging, while rotation of a single
set of client credentials is significantly easier.</t>
</list></t>

<t>A client MAY use the "client_id" request parameter to identify itself
when sending requests to the token endpoint.  In the
"authorization_code" "grant_type" request to the token endpoint, an
unauthenticated client MUST send its "client_id" to prevent itself
from inadvertently accepting a code intended for a client with a
different "client_id".  This protects the client from substitution of
the authentication code.  (It provides no additional security for the
protected resource.)</t>

</section>
</section>
<section anchor="access-token-scope" title="Access Token Scope">

<t>The authorization and token endpoints allow the client to specify the
scope of the access request using the "scope" request parameter.  In
turn, the authorization server uses the "scope" response parameter to
inform the client of the scope of the access token issued.</t>

<t>The value of the scope parameter is expressed as a list of space-
delimited, case-sensitive strings.  The strings are defined by the
authorization server.  If the value contains multiple space-delimited
strings, their order does not matter, and each string adds an
additional access range to the requested scope.</t>

<figure><artwork type="abnf"><![CDATA[
    scope       = scope-token *( SP scope-token )
    scope-token = 1*( %x21 / %x23-5B / %x5D-7E )
]]></artwork></figure>

<t>The authorization server MAY fully or partially ignore the scope
requested by the client, based on the authorization server policy or
the resource owner's instructions.  If the issued access token scope
is different from the one requested by the client, the authorization
server MUST include the "scope" response parameter to inform the
client of the actual scope granted.</t>

<t>If the client omits the scope parameter when requesting
authorization, the authorization server MUST either process the
request using a pre-defined default value or fail the request
indicating an invalid scope.  The authorization server SHOULD
document its scope requirements and default value (if defined).</t>

</section>
</section>
<section anchor="obtaining-authorization" title="Obtaining Authorization">

<t>To request an access token, the client obtains authorization from the
resource owner.  The authorization is expressed in the form of an
authorization grant, which the client uses to request the access
token.  OAuth defines four grant types: authorization code, implicit,
resource owner password credentials, and client credentials.  It also
provides an extension mechanism for defining additional grant types.</t>

<section anchor="authorization-code-grant" title="Authorization Code Grant">

<t>The authorization code grant type is used to obtain both access
tokens and refresh tokens and is optimized for confidential clients.
Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<figure title="Authorization Code Flow" anchor="fig-authorization-code-flow"><artwork><![CDATA[
     +----------+
     | Resource |
     |   Owner  |
     |          |
     +----------+
          ^
          |
         (2)
     +----|-----+          Client Identifier      +---------------+
     |         -+----(1)-- & Redirection URI ---->|               |
     |  User-   |                                 | Authorization |
     |  Agent  -+----(2)-- User authenticates --->|     Server    |
     |          |                                 |               |
     |         -+----(3)-- Authorization Code ---<|               |
     +-|----|---+                                 +---------------+
       |    |                                         ^      v
      (1)  (3)                                        |      |
       |    |                                         |      |
       ^    v                                         |      |
     +---------+                                      |      |
     |         |>---(4)-- Authorization Code ---------'      |
     |  Client |          & Redirection URI                  |
     |         |                                             |
     |         |<---(5)----- Access Token -------------------'
     +---------+       (w/ Optional Refresh Token)

   Note: The lines illustrating steps (1), (2), and (3) are broken into
   two parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in <xref target="fig-authorization-code-flow"/> includes the following steps:</t>

<t>(1)  The client initiates the flow by directing the resource owner's
     user-agent to the authorization endpoint.  The client includes
     its client identifier, requested scope, local state, and a
     redirection URI to which the authorization server will send the
     user-agent back once access is granted (or denied).</t>

<t>(2)  The authorization server authenticates the resource owner (via
     the user-agent) and establishes whether the resource owner
     grants or denies the client's access request.</t>

<t>(3)  Assuming the resource owner grants access, the authorization
     server redirects the user-agent back to the client using the
     redirection URI provided earlier (in the request or during
     client registration).  The redirection URI includes an
     authorization code and any local state provided by the client
     earlier.</t>

<t>(4)  The client requests an access token from the authorization
     server's token endpoint by including the authorization code
     received in the previous step.  When making the request, the
     client authenticates with the authorization server.  The client
     includes the redirection URI used to obtain the authorization
     code for verification.</t>

<t>(5)  The authorization server authenticates the client, validates the
     authorization code, and ensures that the redirection URI
     received matches the URI used to redirect the client in
     step (C).  If valid, the authorization server responds back with
     an access token and, optionally, a refresh token.</t>

<section anchor="authorization-request" title="Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "code".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in Section 2.2.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in Section 3.1.2.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in Section 10.12.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  If the request is valid,
the authorization server authenticates the resource owner and obtains
an authorization decision (by asking the resource owner or by
establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
<section anchor="authorization-response" title="Authorization Response">

<t>If the resource owner grants the access request, the authorization
server issues an authorization code and delivers it to the client by
adding the following parameters to the query component of the
redirection URI using the "application/x-www-form-urlencoded" format,
per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code generated by the
authorization server.  The authorization code MUST expire
shortly after it is issued to mitigate the risk of leaks.  A
maximum authorization code lifetime of 10 minutes is
RECOMMENDED.  The client MUST NOT use the authorization code
more than once.  If an authorization code is used more than
once, the authorization server MUST deny the request and SHOULD
revoke (when possible) all tokens previously issued based on
that authorization code.  The authorization code is bound to
the client identifier and redirection URI.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
          &state=xyz
]]></artwork></figure>

<t>The client MUST ignore unrecognized response parameters.  The
authorization code string size is left undefined by this
specification.  The client should avoid making assumptions about code
value sizes.  The authorization server SHOULD document the size of
any value it issues.</t>

<section anchor="error-response" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the query component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an authorization
code using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
authorization code using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb?error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
<section anchor="access-token-request" title="Access Token Request">

<t>The client makes a request to the token endpoint by sending the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "authorization_code".</t>
  <t hangText='&quot;code&quot;:'>
  REQUIRED.  The authorization code received from the
authorization server.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  REQUIRED, if the "redirect_uri" parameter was included in the
authorization request as described in Section 4.1.1, and their
values MUST be identical.</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED, if the client is not authenticating with the
authorization server as described in Section 3.2.1.</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using TLS
(with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
&redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included,</t>
  <t>ensure that the authorization code was issued to the authenticated
confidential client, or if the client is public, ensure that the
code was issued to "client_id" in the request,</t>
  <t>verify that the authorization code is valid, and</t>
  <t>ensure that the "redirect_uri" parameter is present if the
"redirect_uri" parameter was included in the initial authorization
request as described in Section 4.1.1, and if included ensure that
their values are identical.</t>
</list></t>

</section>
<section anchor="access-token-response" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request client
authentication failed or is invalid, the authorization server returns
an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="implicit-grant" title="Implicit Grant">

<t>The implicit grant type is used to obtain access tokens (it does not
support the issuance of refresh tokens) and is optimized for public
clients known to operate a particular redirection URI.  These clients
are typically implemented in a browser using a scripting language
such as JavaScript.</t>

<t>Since this is a redirection-based flow, the client must be capable of
interacting with the resource owner's user-agent (typically a web
browser) and capable of receiving incoming requests (via redirection)
from the authorization server.</t>

<t>Unlike the authorization code grant type, in which the client makes
separate requests for authorization and for an access token, the
client receives the access token as the result of the authorization
request.</t>

<t>The implicit grant type does not include client authentication, and
relies on the presence of the resource owner and the registration of
the redirection URI.  Because the access token is encoded into the
redirection URI, it may be exposed to the resource owner and other
applications residing on the same device.</t>

<figure title="Implicit Grant Flow" anchor="fig-implicit-grant-flow"><artwork><![CDATA[
     +----------+
     | Resource |
     |  Owner   |
     |          |
     +----------+
          ^
          |
         (2)
     +----|-----+          Client Identifier     +---------------+
     |         -+----(1)-- & Redirection URI --->|               |
     |  User-   |                                | Authorization |
     |  Agent  -|----(2)-- User authenticates -->|     Server    |
     |          |                                |               |
     |          |<---(3)--- Redirection URI ----<|               |
     |          |          with Access Token     +---------------+
     |          |            in Fragment
     |          |                                +---------------+
     |          |----(4)--- Redirection URI ---->|   Web-Hosted  |
     |          |          without Fragment      |     Client    |
     |          |                                |    Resource   |
     |     (6)  |<---(5)------- Script ---------<|               |
     |          |                                +---------------+
     +-|--------+
       |    |
      (1)  (7) Access Token
       |    |
       ^    v
     +---------+
     |         |
     |  Client |
     |         |
     +---------+

   Note: The lines illustrating steps (A) and (B) are broken into two
   parts as they pass through the user-agent.
]]></artwork></figure>

<t>The flow illustrated in Figure 4 includes the following steps:</t>

<t><list style="numbers">
  <t>The client initiates the flow by directing the resource owner's
user-agent to the authorization endpoint.  The client includes
its client identifier, requested scope, local state, and a
redirection URI to which the authorization server will send the
user-agent back once access is granted (or denied).</t>
  <t>The authorization server authenticates the resource owner (via
the user-agent) and establishes whether the resource owner
grants or denies the client's access request.</t>
  <t>Assuming the resource owner grants access, the authorization
server redirects the user-agent back to the client using the
redirection URI provided earlier.  The redirection URI includes
the access token in the URI fragment.</t>
  <t>The user-agent follows the redirection instructions by making a
request to the web-hosted client resource (which does not
include the fragment per <xref target="RFC2616"/>).  The user-agent retains the
fragment information locally.</t>
  <t>The web-hosted client resource returns a web page (typically an
HTML document with an embedded script) capable of accessing the
full redirection URI including the fragment retained by the
user-agent, and extracting the access token (and other
parameters) contained in the fragment.</t>
  <t>The user-agent executes the script provided by the web-hosted
client resource locally, which extracts the access token.</t>
  <t>The user-agent passes the access token to the client.</t>
</list></t>

<t>See Sections 1.3.2 and 9 for background on using the implicit grant.
See Sections 10.3 and 10.16 for important security considerations
when using the implicit grant.</t>

<section anchor="authorization-request-1" title="Authorization Request">

<t>The client constructs the request URI by adding the following
parameters to the query component of the authorization endpoint URI
using the "application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;response_type&quot;:'>
  REQUIRED.  Value MUST be set to "token".</t>
  <t hangText='&quot;client_id&quot;:'>
  REQUIRED.  The client identifier as described in Section 2.2.</t>
  <t hangText='&quot;redirect_uri&quot;:'>
  OPTIONAL.  As described in Section 3.1.2.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
  <t hangText='&quot;state&quot;:'>
  RECOMMENDED.  An opaque value used by the client to maintain
state between the request and callback.  The authorization
server includes this value when redirecting the user-agent back
to the client.  The parameter SHOULD be used for preventing
cross-site request forgery as described in Section 10.12.</t>
</list></t>

<t>The client directs the resource owner to the constructed URI using an
HTTP redirection response, or by other means available to it via the
user-agent.</t>

<t>For example, the client directs the user-agent to make the following
HTTP request using TLS (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
GET /authorize?response_type=token&client_id=s6BhdRkqt3&state=xyz
    &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
Host: server.example.com
]]></artwork></figure>

<t>The authorization server validates the request to ensure that all
required parameters are present and valid.  The authorization server
MUST verify that the redirection URI to which it will redirect the
access token matches a redirection URI registered by the client as
described in Section 3.1.2.</t>

<t>If the request is valid, the authorization server authenticates the
resource owner and obtains an authorization decision (by asking the
resource owner or by establishing approval via other means).</t>

<t>When a decision is established, the authorization server directs the
user-agent to the provided client redirection URI using an HTTP
redirection response, or by other means available to it via the
user-agent.</t>

</section>
<section anchor="access-token-response-1" title="Access Token Response">

<t>If the resource owner grants the access request, the authorization
server issues an access token and delivers it to the client by adding
the following parameters to the fragment component of the redirection
URI using the "application/x-www-form-urlencoded" format, per
Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
Section 7.1.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by Section 3.3.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if the "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>The authorization server MUST NOT issue a refresh token.</t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response (with extra line breaks for
display purposes only):</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA
          &state=xyz&token_type=example&expires_in=3600
]]></artwork></figure>

<t>Developers should note that some user-agents do not support the
inclusion of a fragment component in the HTTP "Location" response
header field.  Such clients will require using other methods for
redirecting the client than a 3xx redirection response &#8211; for
example, returning an HTML page that includes a 'continue' button
with an action linked to the redirection URI.</t>

<t>The client MUST ignore unrecognized response parameters.  The access
token string size is left undefined by this specification.  The
client should avoid making assumptions about value sizes.  The
authorization server SHOULD document the size of any value it issues.</t>

<section anchor="error-response-1" title="Error Response">

<t>If the request fails due to a missing, invalid, or mismatching
redirection URI, or if the client identifier is missing or invalid,
the authorization server SHOULD inform the resource owner of the
error and MUST NOT automatically redirect the user-agent to the
invalid redirection URI.</t>

<t>If the resource owner denies the access request or if the request
fails for reasons other than a missing or invalid redirection URI,
the authorization server informs the client by adding the following
parameters to the fragment component of the redirection URI using the
"application/x-www-form-urlencoded" format, per Appendix B:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the
following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
invalid parameter value, includes a parameter more than
once, or is otherwise malformed.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The client is not authorized to request an access token
using this method.</t>
        <t hangText='&quot;access_denied&quot;:'>
        The resource owner or authorization server denied the
request.</t>
        <t hangText='&quot;unsupported_response_type&quot;:'>
        The authorization server does not support obtaining an
access token using this method.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, or malformed.</t>
        <t hangText='&quot;server_error&quot;:'>
        The authorization server encountered an unexpected
condition that prevented it from fulfilling the request.
(This error code is needed because a 500 Internal Server
Error HTTP status code cannot be returned to the client
via an HTTP redirect.)</t>
        <t hangText='&quot;temporarily_unavailable&quot;:'>
        The authorization server is currently unable to handle
the request due to a temporary overloading or maintenance
of the server.  (This error code is needed because a 503
Service Unavailable HTTP status code cannot be returned
to the client via an HTTP redirect.)</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;state&quot;:'>
  REQUIRED if a "state" parameter was present in the client
authorization request.  The exact value received from the
client.</t>
</list></t>

<t>For example, the authorization server redirects the user-agent by
sending the following HTTP response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 302 Found
Location: https://client.example.com/cb#error=access_denied&state=xyz
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="resource-owner-password-credentials-grant" title="Resource Owner Password Credentials Grant">

<t>The resource owner password credentials grant type is suitable in
cases where the resource owner has a trust relationship with the
client, such as the device operating system or a highly privileged
application.  The authorization server should take special care when
enabling this grant type and only allow it when other flows are not
viable.</t>

<t>This grant type is suitable for clients capable of obtaining the
resource owner's credentials (username and password, typically using
an interactive form).  It is also used to migrate existing clients
using direct authentication schemes such as HTTP Basic or Digest
authentication to OAuth by converting the stored credentials to an
access token.</t>

<figure><artwork><![CDATA[
 +----------+
 | Resource |
 |  Owner   |
 |          |
 +----------+
      v
      |    Resource Owner
     (A) Password Credentials
      |
      v
 +---------+                                  +---------------+
 |         |>--(B)---- Resource Owner ------->|               |
 |         |         Password Credentials     | Authorization |
 | Client  |                                  |     Server    |
 |         |<--(C)---- Access Token ---------<|               |
 |         |    (w/ Optional Refresh Token)   |               |
 +---------+                                  +---------------+

        Figure 5: Resource Owner Password Credentials Flow
]]></artwork></figure>

<t>The flow illustrated in Figure 5 includes the following steps:</t>

<t>(A)  The resource owner provides the client with its username and
     password.</t>

<t>(B)  The client requests an access token from the authorization
     server's token endpoint by including the credentials received
     from the resource owner.  When making the request, the client
     authenticates with the authorization server.</t>

<t>(C)  The authorization server authenticates the client and validates
     the resource owner credentials, and if valid, issues an access
     token.</t>

<section anchor="authorization-request-and-response" title="Authorization Request and Response">

<t>The method through which the client obtains the resource owner
credentials is beyond the scope of this specification.  The client
MUST discard the credentials once an access token has been obtained.</t>

</section>
<section anchor="access-token-request-1" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "password".</t>
  <t hangText='&quot;username&quot;:'>
  REQUIRED.  The resource owner username.</t>
  <t hangText='&quot;password&quot;:'>
  REQUIRED.  The resource owner password.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
</list></t>

<t>If the client type is confidential or the client was issued client
credentials (or assigned other authentication requirements), the
client MUST authenticate with the authorization server as described
in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=password&username=johndoe&password=A3ddj3w
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included, and</t>
  <t>validate the resource owner password credentials using its
existing password validation algorithm.</t>
</list></t>

<t>Since this access token request utilizes the resource owner's
password, the authorization server MUST protect the endpoint against
brute force attacks (e.g., using rate-limitation or generating
alerts).</t>

</section>
<section anchor="access-token-response-2" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="client-credentials-grant" title="Client Credentials Grant">

<t>The client can request an access token using only its client
credentials (or other supported means of authentication) when the
client is requesting access to the protected resources under its
control, or those of another resource owner that have been previously
arranged with the authorization server (the method of which is beyond
the scope of this specification).</t>

<t>The client credentials grant type MUST only be used by confidential
clients.</t>

<figure><artwork><![CDATA[
 +---------+                                  +---------------+
 |         |                                  |               |
 |         |>--(A)- Client Authentication --->| Authorization |
 | Client  |                                  |     Server    |
 |         |<--(B)---- Access Token ---------<|               |
 |         |                                  |               |
 +---------+                                  +---------------+

                 Figure 6: Client Credentials Flow
]]></artwork></figure>

<t>The flow illustrated in Figure 6 includes the following steps:</t>

<t>(A)  The client authenticates with the authorization server and
     requests an access token from the token endpoint.</t>

<t>(B)  The authorization server authenticates the client, and if valid,
     issues an access token.</t>

<section anchor="authorization-request-and-response-1" title="Authorization Request and Response">

<t>Since the client authentication is used as the authorization grant,
no additional authorization request is needed.</t>

</section>
<section anchor="access-token-request-2" title="Access Token Request">

<t>The client makes a request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "client_credentials".</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.</t>
</list></t>

<t>The client MUST authenticate with the authorization server as
described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
]]></artwork></figure>

<t>The authorization server MUST authenticate the client.</t>

</section>
<section anchor="access-token-response-3" title="Access Token Response">

<t>If the access token request is valid and authorized, the
authorization server issues an access token as described in
Section 5.1.  A refresh token SHOULD NOT be included.  If the request
failed client authentication or is invalid, the authorization server
returns an error response as described in Section 5.2.</t>

<t>An example successful response:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "example_parameter":"example_value"
}
]]></artwork></figure>

</section>
</section>
<section anchor="extension-grants" title="Extension Grants">

<t>The client uses an extension grant type by specifying the grant type
using an absolute URI (defined by the authorization server) as the
value of the "grant_type" parameter of the token endpoint, and by
adding any additional parameters necessary.</t>

<t>For example, to request an access token using a Security Assertion
Markup Language (SAML) 2.0 assertion grant type as defined by
<xref target="RFC7522"></xref>, the client could make the following HTTP request using
TLS (with extra line breaks for display purposes only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Content-Type: application/x-www-form-urlencoded

grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
[...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]></artwork></figure>

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

</section>
</section>
<section anchor="issuing-an-access-token" title="Issuing an Access Token">

<t>If the access token request is valid and authorized, the
authorization server issues an access token and optional refresh
token as described in Section 5.1.  If the request failed client
authentication or is invalid, the authorization server returns an
error response as described in Section 5.2.</t>

<section anchor="successful-response" title="Successful Response">

<t>The authorization server issues an access token and optional refresh
token, and constructs the response by adding the following parameters
to the entity-body of the HTTP response with a 200 (OK) status code:</t>

<t><list style="hanging">
  <t hangText='&quot;access_token&quot;:'>
  REQUIRED.  The access token issued by the authorization server.</t>
  <t hangText='&quot;token_type&quot;:'>
  REQUIRED.  The type of the token issued as described in
Section 7.1.  Value is case insensitive.</t>
  <t hangText='&quot;expires_in&quot;:'>
  RECOMMENDED.  The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.</t>
  <t hangText='&quot;refresh_token&quot;:'>
  OPTIONAL.  The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in Section 6.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by Section 3.3.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"/>.  The
parameters are serialized into a JavaScript Object Notation (JSON)
structure by adding each parameter at the highest structure level.
Parameter names and string values are included as JSON strings.
Numerical values are included as JSON numbers.  The order of
parameters does not matter and can vary.</t>

<t>The authorization server MUST include the HTTP "Cache-Control"
response header field <xref target="RFC2616"/> with a value of "no-store" in any
response containing tokens, credentials, or other sensitive
information, as well as the "Pragma" response header field <xref target="RFC2616"/>
with a value of "no-cache".</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
  "access_token":"2YotnFZFEjr1zCsicMWpAA",
  "token_type":"example",
  "expires_in":3600,
  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
  "example_parameter":"example_value"
}
]]></artwork></figure>

<t>The client MUST ignore unrecognized value names in the response.  The
sizes of tokens and other values received from the authorization
server are left undefined.  The client should avoid making
assumptions about value sizes.  The authorization server SHOULD
document the size of any value it issues.</t>

</section>
<section anchor="error-response-2" title="Error Response">

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t>The authorization server responds with an HTTP 400 (Bad Request)
status code (unless specified otherwise) and includes the following
parameters with the response:</t>

<t><list style="hanging">
  <t hangText='&quot;error&quot;:'>
  REQUIRED.  A single ASCII <xref target="USASCII"></xref> error code from the following:

      <list style="hanging">
        <t hangText='&quot;invalid_request&quot;:'>
        The request is missing a required parameter, includes an
unsupported parameter value (other than grant type),
repeats a parameter, includes multiple credentials,
utilizes more than one mechanism for authenticating the
client, or is otherwise malformed.</t>
        <t hangText='&quot;invalid_client&quot;:'>
        Client authentication failed (e.g., unknown client, no
client authentication included, or unsupported
authentication method).  The authorization server MAY
return an HTTP 401 (Unauthorized) status code to indicate
which HTTP authentication schemes are supported.  If the
client attempted to authenticate via the "Authorization"
request header field, the authorization server MUST
respond with an HTTP 401 (Unauthorized) status code and
include the "WWW-Authenticate" response header field
matching the authentication scheme used by the client.</t>
        <t hangText='&quot;invalid_grant&quot;:'>
        The provided authorization grant (e.g., authorization
code, resource owner credentials) or refresh token is
invalid, expired, revoked, does not match the redirection
URI used in the authorization request, or was issued to
another client.</t>
        <t hangText='&quot;unauthorized_client&quot;:'>
        The authenticated client is not authorized to use this
authorization grant type.</t>
        <t hangText='&quot;unsupported_grant_type&quot;:'>
        The authorization grant type is not supported by the
authorization server.</t>
        <t hangText='&quot;invalid_scope&quot;:'>
        The requested scope is invalid, unknown, malformed, or
exceeds the scope granted by the resource owner.</t>
      </list>

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_description&quot;:'>
  OPTIONAL.  Human-readable ASCII <xref target="USASCII"></xref> text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.</t>
  <t hangText='&quot;error_uri&quot;:'>
  OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.</t>
</list></t>

<t>The parameters are included in the entity-body of the HTTP response
using the "application/json" media type as defined by <xref target="RFC4627"></xref>.  The
parameters are serialized into a JSON structure by adding each
parameter at the highest structure level.  Parameter names and string
values are included as JSON strings.  Numerical values are included
as JSON numbers.  The order of parameters does not matter and can
vary.</t>

<t>For example:</t>

<figure><artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{
 "error":"invalid_request"
}
]]></artwork></figure>

</section>
</section>
<section anchor="refreshing-an-access-token" title="Refreshing an Access Token">

<t>If the authorization server issued a refresh token to the client, the
client makes a refresh request to the token endpoint by adding the
following parameters using the "application/x-www-form-urlencoded"
format per Appendix B with a character encoding of UTF-8 in the HTTP
request entity-body:</t>

<t><list style="hanging">
  <t hangText='&quot;grant_type&quot;:'>
  REQUIRED.  Value MUST be set to "refresh_token".</t>
  <t hangText='&quot;refresh_token&quot;:'>
  REQUIRED.  The refresh token issued to the client.</t>
  <t hangText='&quot;scope&quot;:'>
  OPTIONAL.  The scope of the access request as described by
Section 3.3.  The requested scope MUST NOT include any scope
not originally granted by the resource owner, and if omitted is
treated as equal to the scope originally granted by the
resource owner.</t>
</list></t>

<t>Because refresh tokens are typically long-lasting credentials used to
request additional access tokens, the refresh token is bound to the
client to which it was issued.  If the client type is confidential or
the client was issued client credentials (or assigned other
authentication requirements), the client MUST authenticate with the
authorization server as described in Section 3.2.1.</t>

<t>For example, the client makes the following HTTP request using
transport-layer security (with extra line breaks for display purposes
only):</t>

<figure><artwork><![CDATA[
POST /token HTTP/1.1
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded

grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]></artwork></figure>

<t>The authorization server MUST:</t>

<t><list style="symbols">
  <t>require client authentication for confidential clients or for any
client that was issued client credentials (or with other
authentication requirements),</t>
  <t>authenticate the client if client authentication is included and
ensure that the refresh token was issued to the authenticated
client, and</t>
  <t>validate the refresh token.</t>
</list></t>

<t>If valid and authorized, the authorization server issues an access
token as described in Section 5.1.  If the request failed
verification or is invalid, the authorization server returns an error
response as described in Section 5.2.</t>

<t>The authorization server MAY issue a new refresh token, in which case
the client MUST discard the old refresh token and replace it with the
new refresh token.  The authorization server MAY revoke the old
refresh token after issuing a new refresh token to the client.  If a
new refresh token is issued, the refresh token scope MUST be
identical to that of the refresh token included by the client in the
request.</t>

</section>
<section anchor="accessing-protected-resources" title="Accessing Protected Resources">

<t>The client accesses protected resources by presenting the access
token to the resource server.  The resource server MUST validate the
access token and ensure that it has not expired and that its scope
covers the requested resource.  The methods used by the resource
server to validate the access token (as well as any error responses)
are beyond the scope of this specification but generally involve an
interaction or coordination between the resource server and the
authorization server.</t>

<t>The method in which the client utilizes the access token to
authenticate with the resource server depends on the type of access
token issued by the authorization server.  Typically, it involves
using the HTTP "Authorization" request header field <xref target="RFC2617"></xref> with an
authentication scheme defined by the specification of the access
token type used, such as <xref target="RFC6750"></xref>.</t>

<section anchor="access-token-types" title="Access Token Types">

<t>The access token type provides the client with the information
required to successfully utilize the access token to make a protected
resource request (along with type-specific attributes).  The client
MUST NOT use an access token if it does not understand the token
type.</t>

<t>For example, the "bearer" token type defined in <xref target="RFC6750"/> is utilized
by simply including the access token string in the request:</t>

<figure><artwork><![CDATA[
GET /resource/1 HTTP/1.1
Host: example.com
Authorization: Bearer mF_9.B5f-4.1JqM
]]></artwork></figure>

<t>while the "mac" token type defined in <xref target="OAuth-HTTP-MAC"/> is utilized by
issuing a Message Authentication Code (MAC) key together with the
access token that is used to sign certain components of the HTTP
requests:</t>

<figure><artwork><![CDATA[
 GET /resource/1 HTTP/1.1
 Host: example.com
 Authorization: MAC id="h480djs93hd8",
                    nonce="274312:dj83hs9s",
                    mac="kDZvddkndxvhGRXZhvuDjEWhGeE="
]]></artwork></figure>

<t>The above examples are provided for illustration purposes only.
Developers are advised to consult the <xref target="RFC6750"/> and <xref target="OAuth-HTTP-MAC"/>
specifications before use.</t>

<t>Each access token type definition specifies the additional attributes
(if any) sent to the client together with the "access_token" response
parameter.  It also defines the HTTP authentication method used to
include the access token when making a protected resource request.</t>

</section>
<section anchor="error-response-3" title="Error Response">

<t>If a resource access request fails, the resource server SHOULD inform
the client of the error.  While the specifics of such error responses
are beyond the scope of this specification, this document establishes
a common registry in Section 11.4 for error values to be shared among
OAuth token authentication schemes.</t>

<t>New authentication schemes designed primarily for OAuth token
authentication SHOULD define a mechanism for providing an error
status code to the client, in which the error values allowed are
registered in the error registry established by this specification.</t>

<t>Such schemes MAY limit the set of valid error codes to a subset of
the registered values.  If the error code is returned using a named
parameter, the parameter name SHOULD be "error".</t>

<t>Other schemes capable of being used for OAuth token authentication,
but not primarily designed for that purpose, MAY bind their error
values to the registry in the same manner.</t>

<t>New authentication schemes MAY choose to also specify the use of the
"error_description" and "error_uri" parameters to return error
information in a manner parallel to their usage in this
specification.</t>

</section>
</section>
<section anchor="extensibility" title="Extensibility">

<section anchor="defining-access-token-types" title="Defining Access Token Types">

<t>Access token types can be defined in one of two ways: registered in
the Access Token Types registry (following the procedures in
Section 11.1), or by using a unique absolute URI as its name.</t>

<t>Types utilizing a URI name SHOULD be limited to vendor-specific
implementations that are not commonly applicable, and are specific to
the implementation details of the resource server where they are
used.</t>

<t>All other types MUST be registered.  Type names MUST conform to the
type-name ABNF.  If the type definition includes a new HTTP
authentication scheme, the type name SHOULD be identical to the HTTP
authentication scheme name (as defined by <xref target="RFC2617"></xref>).  The token type
"example" is reserved for use in examples.</t>

<figure><artwork><![CDATA[
type-name  = 1*name-char
name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="defining-new-endpoint-parameters" title="Defining New Endpoint Parameters">

<t>New request or response parameters for use with the authorization
endpoint or the token endpoint are defined and registered in the
OAuth Parameters registry following the procedure in Section 11.2.</t>

<t>Parameter names MUST conform to the param-name ABNF, and parameter
values syntax MUST be well-defined (e.g., using ABNF, or a reference
to the syntax of an existing parameter).</t>

<figure><artwork><![CDATA[
param-name  = 1*name-char
name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>Unregistered vendor-specific parameter extensions that are not
commonly applicable and that are specific to the implementation
details of the authorization server where they are used SHOULD
utilize a vendor-specific prefix that is not likely to conflict with
other registered values (e.g., begin with 'companyname_').</t>

</section>
<section anchor="defining-new-authorization-grant-types" title="Defining New Authorization Grant Types">

<t>New authorization grant types can be defined by assigning them a
unique absolute URI for use with the "grant_type" parameter.  If the
extension grant type requires additional token endpoint parameters,
they MUST be registered in the OAuth Parameters registry as described
by Section 11.2.</t>

</section>
<section anchor="defining-new-authorization-endpoint-response-types" title="Defining New Authorization Endpoint Response Types">

<t>New response types for use with the authorization endpoint are
defined and registered in the Authorization Endpoint Response Types
registry following the procedure in Section 11.3.  Response type
names MUST conform to the response-type ABNF.</t>

<figure><artwork><![CDATA[
response-type  = response-name *( SP response-name )
response-name  = 1*response-char
response-char  = "_" / DIGIT / ALPHA
]]></artwork></figure>

<t>If a response type contains one or more space characters (%x20), it
is compared as a space-delimited list of values in which the order of
values does not matter.  Only one order of values can be registered,
which covers all other arrangements of the same set of values.</t>

<t>For example, the response type "token code" is left undefined by this
specification.  However, an extension can define and register the
"token code" response type.  Once registered, the same combination
cannot be registered as "code token", but both values can be used to
denote the same response type.</t>

</section>
<section anchor="defining-additional-error-codes" title="Defining Additional Error Codes">

<t>In cases where protocol extensions (i.e., access token types,
extension parameters, or extension grant types) require additional
error codes to be used with the authorization code grant error
response (Section 4.1.2.1), the implicit grant error response
(Section 4.2.2.1), the token error response (Section 5.2), or the
resource access error response (Section 7.2), such error codes MAY be
defined.</t>

<t>Extension error codes MUST be registered (following the procedures in
Section 11.4) if the extension they are used in conjunction with is a
registered access token type, a registered endpoint parameter, or an
extension grant type.  Error codes used with unregistered extensions
MAY be registered.</t>

<t>Error codes MUST conform to the error ABNF and SHOULD be prefixed by
an identifying name when possible.  For example, an error identifying
an invalid value set to the extension parameter "example" SHOULD be
named "example_invalid".</t>

<figure><artwork><![CDATA[
error      = 1*error-char
error-char = %x20-21 / %x23-5B / %x5D-7E
]]></artwork></figure>

</section>
</section>
<section anchor="native-applications" title="Native Applications">

<t>Native applications are clients installed and executed on the device
used by the resource owner (i.e., desktop application, native mobile
application).  Native applications require special consideration
related to security, platform capabilities, and overall end-user
experience.</t>

<t>The authorization endpoint requires interaction between the client
and the resource owner's user-agent.  Native applications can invoke
an external user-agent or embed a user-agent within the application.
For example:</t>

<t><list style="symbols">
  <t>External user-agent - the native application can capture the
response from the authorization server using a redirection URI
with a scheme registered with the operating system to invoke the
client as the handler, manual copy-and-paste of the credentials,
running a local web server, installing a user-agent extension, or
by providing a redirection URI identifying a server-hosted
resource under the client's control, which in turn makes the
response available to the native application.</t>
  <t>Embedded user-agent - the native application obtains the response
by directly communicating with the embedded user-agent by
monitoring state changes emitted during the resource load, or
accessing the user-agent's cookies storage.</t>
</list></t>

<t>When choosing between an external or embedded user-agent, developers
should consider the following:</t>

<t><list style="symbols">
  <t>An external user-agent may improve completion rate, as the
resource owner may already have an active session with the
authorization server, removing the need to re-authenticate.  It
provides a familiar end-user experience and functionality.  The
resource owner may also rely on user-agent features or extensions
to assist with authentication (e.g., password manager, 2-factor
device reader).</t>
  <t>An embedded user-agent may offer improved usability, as it removes
the need to switch context and open new windows.</t>
  <t>An embedded user-agent poses a security challenge because resource
owners are authenticating in an unidentified window without access
to the visual protections found in most external user-agents.  An
embedded user-agent educates end-users to trust unidentified
requests for authentication (making phishing attacks easier to
execute).</t>
</list></t>

<t>When choosing between the implicit grant type and the authorization
code grant type, the following should be considered:</t>

<t><list style="symbols">
  <t>Native applications that use the authorization code grant type
SHOULD do so without using client credentials, due to the native
application's inability to keep client credentials confidential.</t>
  <t>When using the implicit grant type flow, a refresh token is not
returned, which requires repeating the authorization process once
the access token expires.</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>As a flexible and extensible framework, OAuth's security
considerations depend on many factors.  The following sections
provide implementers with security guidelines focused on the three
client profiles described in Section 2.1: web application,
user-agent-based application, and native application.</t>

<t>A comprehensive OAuth security model and analysis, as well as
background for the protocol design, is provided by
<xref target="RFC6819"/>.</t>

<section anchor="client-authentication-2" title="Client Authentication">

<t>The authorization server establishes client credentials with web
application clients for the purpose of client authentication.  The
authorization server is encouraged to consider stronger client
authentication means than a client password.  Web application clients
MUST ensure confidentiality of client passwords and other client
credentials.</t>

<t>The authorization server MUST NOT issue client passwords or other
client credentials to native application or user-agent-based
application clients for the purpose of client authentication.  The
authorization server MAY issue a client password or other credentials
for a specific installation of a native application client on a
specific device.</t>

<t>When client authentication is not possible, the authorization server
SHOULD employ other means to validate the client's identity &#8211; for
example, by requiring the registration of the client redirection URI
or enlisting the resource owner to confirm identity.  A valid
redirection URI is not sufficient to verify the client's identity
when asking for resource owner authorization but can be used to
prevent delivering credentials to a counterfeit client after
obtaining resource owner authorization.</t>

<t>The authorization server must consider the security implications of
interacting with unauthenticated clients and take measures to limit
the potential exposure of other credentials (e.g., refresh tokens)
issued to such clients.</t>

</section>
<section anchor="client-impersonation" title="Client Impersonation">

<t>A malicious client can impersonate another client and obtain access
to protected resources if the impersonated client fails to, or is
unable to, keep its client credentials confidential.</t>

<t>The authorization server MUST authenticate the client whenever
possible.  If the authorization server cannot authenticate the client
due to the client's nature, the authorization server MUST require the
registration of any redirection URI used for receiving authorization
responses and SHOULD utilize other means to protect resource owners
from such potentially malicious clients.  For example, the
authorization server can engage the resource owner to assist in
identifying the client and its origin.</t>

<t>The authorization server SHOULD enforce explicit resource owner
authentication and provide the resource owner with information about
the client and the requested authorization scope and lifetime.  It is
up to the resource owner to review the information in the context of
the current client and to authorize or deny the request.</t>

<t>The authorization server SHOULD NOT process repeated authorization
requests automatically (without active resource owner interaction)
without authenticating the client or relying on other measures to
ensure that the repeated request comes from the original client and
not an impersonator.</t>

</section>
<section anchor="access-tokens" title="Access Tokens">

<t>Access token credentials (as well as any confidential access token
attributes) MUST be kept confidential in transit and storage, and
only shared among the authorization server, the resource servers the
access token is valid for, and the client to whom the access token is
issued.  Access token credentials MUST only be transmitted using TLS
as described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"></xref>.</t>

<t>When using the implicit grant type, the access token is transmitted
in the URI fragment, which can expose it to unauthorized parties.</t>

<t>The authorization server MUST ensure that access tokens cannot be
generated, modified, or guessed to produce valid access tokens by
unauthorized parties.</t>

<t>The client SHOULD request access tokens with the minimal scope
necessary.  The authorization server SHOULD take the client identity
into account when choosing how to honor the requested scope and MAY
issue an access token with less rights than requested.</t>

<t>This specification does not provide any methods for the resource
server to ensure that an access token presented to it by a given
client was issued to that client by the authorization server.</t>

</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Authorization servers MAY issue refresh tokens to web application
clients and native application clients.</t>

<t>Refresh tokens MUST be kept confidential in transit and storage, and
shared only among the authorization server and the client to whom the
refresh tokens were issued.  The authorization server MUST maintain
the binding between a refresh token and the client to whom it was
issued.  Refresh tokens MUST only be transmitted using TLS as
described in Section 1.6 with server authentication as defined by
<xref target="RFC2818"></xref>.</t>

<t>The authorization server MUST verify the binding between the refresh
token and client identity whenever the client identity can be
authenticated.  When client authentication is not possible, the
authorization server SHOULD deploy other means to detect refresh
token abuse.</t>

<t>For example, the authorization server could employ refresh token
rotation in which a new refresh token is issued with every access
token refresh response.  The previous refresh token is invalidated
but retained by the authorization server.  If a refresh token is
compromised and subsequently used by both the attacker and the
legitimate client, one of them will present an invalidated refresh
token, which will inform the authorization server of the breach.</t>

<t>The authorization server MUST ensure that refresh tokens cannot be
generated, modified, or guessed to produce valid refresh tokens by
unauthorized parties.</t>

</section>
<section anchor="authorization-codes" title="Authorization Codes">

<t>The transmission of authorization codes SHOULD be made over a secure
channel, and the client SHOULD require the use of TLS with its
redirection URI if the URI identifies a network resource.  Since
authorization codes are transmitted via user-agent redirections, they
could potentially be disclosed through user-agent history and HTTP
referrer headers.</t>

<t>Authorization codes operate as plaintext bearer credentials, used to
verify that the resource owner who granted authorization at the
authorization server is the same resource owner returning to the
client to complete the process.  Therefore, if the client relies on
the authorization code for its own resource owner authentication, the
client redirection endpoint MUST require the use of TLS.</t>

<t>Authorization codes MUST be short lived and single-use.  If the
authorization server observes multiple attempts to exchange an
authorization code for an access token, the authorization server
SHOULD attempt to revoke all access tokens already granted based on
the compromised authorization code.</t>

<t>If the client can be authenticated, the authorization servers MUST
authenticate the client and ensure that the authorization code was
issued to the same client.</t>

</section>
<section anchor="authorization-code-redirection-uri-manipulation" title="Authorization Code Redirection URI Manipulation">

<t>When requesting authorization using the authorization code grant
type, the client can specify a redirection URI via the "redirect_uri"
parameter.  If an attacker can manipulate the value of the
redirection URI, it can cause the authorization server to redirect
the resource owner user-agent to a URI under the control of the
attacker with the authorization code.</t>

<t>An attacker can create an account at a legitimate client and initiate
the authorization flow.  When the attacker's user-agent is sent to
the authorization server to grant access, the attacker grabs the
authorization URI provided by the legitimate client and replaces the
client's redirection URI with a URI under the control of the
attacker.  The attacker then tricks the victim into following the
manipulated link to authorize access to the legitimate client.</t>

<t>Once at the authorization server, the victim is prompted with a
normal, valid request on behalf of a legitimate and trusted client,
and authorizes the request.  The victim is then redirected to an
endpoint under the control of the attacker with the authorization
code.  The attacker completes the authorization flow by sending the
authorization code to the client using the original redirection URI
provided by the client.  The client exchanges the authorization code
with an access token and links it to the attacker's client account,
which can now gain access to the protected resources authorized by
the victim (via the client).</t>

<t>In order to prevent such an attack, the authorization server MUST
ensure that the redirection URI used to obtain the authorization code
is identical to the redirection URI provided when exchanging the
authorization code for an access token.  The authorization server
MUST require public clients and SHOULD require confidential clients
to register their redirection URIs.  If a redirection URI is provided
in the request, the authorization server MUST validate it against the
registered value.</t>

</section>
<section anchor="resource-owner-password-credentials-1" title="Resource Owner Password Credentials">

<t>The resource owner password credentials grant type is often used for
legacy or migration reasons.  It reduces the overall risk of storing
usernames and passwords by the client but does not eliminate the need
to expose highly privileged credentials to the client.</t>

<t>This grant type carries a higher risk than other grant types because
it maintains the password anti-pattern this protocol seeks to avoid.
The client could abuse the password, or the password could
unintentionally be disclosed to an attacker (e.g., via log files or
other records kept by the client).</t>

<t>Additionally, because the resource owner does not have control over
the authorization process (the resource owner's involvement ends when
it hands over its credentials to the client), the client can obtain
access tokens with a broader scope than desired by the resource
owner.  The authorization server should consider the scope and
lifetime of access tokens issued via this grant type.</t>

<t>The authorization server and client SHOULD minimize use of this grant
type and utilize other grant types whenever possible.</t>

</section>
<section anchor="request-confidentiality" title="Request Confidentiality">

<t>Access tokens, refresh tokens, resource owner passwords, and client
credentials MUST NOT be transmitted in the clear.  Authorization
codes SHOULD NOT be transmitted in the clear.</t>

<t>The "state" and "scope" parameters SHOULD NOT include sensitive
client or resource owner information in plain text, as they can be
transmitted over insecure channels or stored insecurely.</t>

</section>
<section anchor="ensuring-endpoint-authenticity" title="Ensuring Endpoint Authenticity">

<t>In order to prevent man-in-the-middle attacks, the authorization
server MUST require the use of TLS with server authentication as
defined by <xref target="RFC2818"></xref> for any request sent to the authorization and
token endpoints.  The client MUST validate the authorization server's
TLS certificate as defined by <xref target="RFC6125"></xref> and in accordance with its
requirements for server identity authentication.</t>

</section>
<section anchor="credentials-guessing-attacks" title="Credentials-Guessing Attacks">

<t>The authorization server MUST prevent attackers from guessing access
tokens, authorization codes, refresh tokens, resource owner
passwords, and client credentials.</t>

<t>The probability of an attacker guessing generated tokens (and other
credentials not intended for handling by end-users) MUST be less than
or equal to 2^(-128) and SHOULD be less than or equal to 2^(-160).</t>

<t>The authorization server MUST utilize other means to protect
credentials intended for end-user usage.</t>

</section>
<section anchor="phishing-attacks" title="Phishing Attacks">

<t>Wide deployment of this and similar protocols may cause end-users to
become inured to the practice of being redirected to websites where
they are asked to enter their passwords.  If end-users are not
careful to verify the authenticity of these websites before entering
their credentials, it will be possible for attackers to exploit this
practice to steal resource owners' passwords.</t>

<t>Service providers should attempt to educate end-users about the risks
phishing attacks pose and should provide mechanisms that make it easy
for end-users to confirm the authenticity of their sites.  Client
developers should consider the security implications of how they
interact with the user-agent (e.g., external, embedded), and the
ability of the end-user to verify the authenticity of the
authorization server.</t>

<t>To reduce the risk of phishing attacks, the authorization servers
MUST require the use of TLS on every endpoint used for end-user
interaction.</t>

</section>
<section anchor="cross-site-request-forgery" title="Cross-Site Request Forgery">

<t>Cross-site request forgery (CSRF) is an exploit in which an attacker
causes the user-agent of a victim end-user to follow a malicious URI
(e.g., provided to the user-agent as a misleading link, image, or
redirection) to a trusting server (usually established via the
presence of a valid session cookie).</t>

<t>A CSRF attack against the client's redirection URI allows an attacker
to inject its own authorization code or access token, which can
result in the client using an access token associated with the
attacker's protected resources rather than the victim's (e.g., save
the victim's bank account information to a protected resource
controlled by the attacker).</t>

<t>The client MUST implement CSRF protection for its redirection URI.
This is typically accomplished by requiring any request sent to the
redirection URI endpoint to include a value that binds the request to
the user-agent's authenticated state (e.g., a hash of the session
cookie used to authenticate the user-agent).  The client SHOULD
utilize the "state" request parameter to deliver this value to the
authorization server when making an authorization request.</t>

<t>Once authorization has been obtained from the end-user, the
authorization server redirects the end-user's user-agent back to the
client with the required binding value contained in the "state"
parameter.  The binding value enables the client to verify the
validity of the request by matching the binding value to the
user-agent's authenticated state.  The binding value used for CSRF
protection MUST contain a non-guessable value (as described in
Section 10.10), and the user-agent's authenticated state (e.g.,
session cookie, HTML5 local storage) MUST be kept in a location
accessible only to the client and the user-agent (i.e., protected by
same-origin policy).</t>

<t>A CSRF attack against the authorization server's authorization
endpoint can result in an attacker obtaining end-user authorization
for a malicious client without involving or alerting the end-user.</t>

<t>The authorization server MUST implement CSRF protection for its
authorization endpoint and ensure that a malicious client cannot
obtain authorization without the awareness and explicit consent of
the resource owner.</t>

</section>
<section anchor="clickjacking" title="Clickjacking">

<t>In a clickjacking attack, an attacker registers a legitimate client
and then constructs a malicious site in which it loads the
authorization server's authorization endpoint web page in a
transparent iframe overlaid on top of a set of dummy buttons, which
are carefully constructed to be placed directly under important
buttons on the authorization page.  When an end-user clicks a
misleading visible button, the end-user is actually clicking an
invisible button on the authorization page (such as an "Authorize"
button).  This allows an attacker to trick a resource owner into
granting its client access without the end-user's knowledge.</t>

<t>To prevent this form of attack, native applications SHOULD use
external browsers instead of embedding browsers within the
application when requesting end-user authorization.  For most newer
browsers, avoidance of iframes can be enforced by the authorization
server using the (non-standard) "x-frame-options" header.  This
header can have two values, "deny" and "sameorigin", which will block
any framing, or framing by sites with a different origin,
respectively.  For older browsers, JavaScript frame-busting
techniques can be used but may not be effective in all browsers.</t>

</section>
<section anchor="code-injection-and-input-validation" title="Code Injection and Input Validation">

<t>A code injection attack occurs when an input or otherwise external
variable is used by an application unsanitized and causes
modification to the application logic.  This may allow an attacker to
gain access to the application device or its data, cause denial of
service, or introduce a wide range of malicious side-effects.</t>

<t>The authorization server and client MUST sanitize (and validate when
possible) any value received &#8211; in particular, the value of the
"state" and "redirect_uri" parameters.</t>

</section>
<section anchor="open-redirectors" title="Open Redirectors">

<t>The authorization server, authorization endpoint, and client
redirection endpoint can be improperly configured and operate as open
redirectors.  An open redirector is an endpoint using a parameter to
automatically redirect a user-agent to the location specified by the
parameter value without any validation.</t>

<t>Open redirectors can be used in phishing attacks, or by an attacker
to get end-users to visit malicious sites by using the URI authority
component of a familiar and trusted destination.  In addition, if the
authorization server allows the client to register only part of the
redirection URI, an attacker can use an open redirector operated by
the client to construct a redirection URI that will pass the
authorization server validation but will send the authorization code
or access token to an endpoint under the control of the attacker.</t>

</section>
<section anchor="misuse-of-access-token-to-impersonate-resource-owner-in-implicit-flow" title="Misuse of Access Token to Impersonate Resource Owner in Implicit Flow">

<t>For public clients using implicit flows, this specification does not
provide any method for the client to determine what client an access
token was issued to.</t>

<t>A resource owner may willingly delegate access to a resource by
granting an access token to an attacker's malicious client.  This may
be due to phishing or some other pretext.  An attacker may also steal
a token via some other mechanism.  An attacker may then attempt to
impersonate the resource owner by providing the access token to a
legitimate public client.</t>

<t>In the implicit flow (response_type=token), the attacker can easily
switch the token in the response from the authorization server,
replacing the real access token with the one previously issued to the
attacker.</t>

<t>Servers communicating with native applications that rely on being
passed an access token in the back channel to identify the user of
the client may be similarly compromised by an attacker creating a
compromised application that can inject arbitrary stolen access
tokens.</t>

<t>Any public client that makes the assumption that only the resource
owner can present it with a valid access token for the resource is
vulnerable to this type of attack.</t>

<t>This type of attack may expose information about the resource owner
at the legitimate client to the attacker (malicious client).  This
will also allow the attacker to perform operations at the legitimate
client with the same permissions as the resource owner who originally
granted the access token or authorization code.</t>

<t>Authenticating resource owners to clients is out of scope for this
specification.  Any specification that uses the authorization process
as a form of delegated end-user authentication to the client (e.g.,
third-party sign-in service) MUST NOT use the implicit flow without
additional security mechanisms that would enable the client to
determine if the access token was issued for its use (e.g., audience-
restricting the access token).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<section anchor="oauth-access-token-types-registry" title="OAuth Access Token Types Registry">

<t>This specification establishes the OAuth Access Token Types registry.</t>

<t>Access token types are registered with a Specification Required
(<xref target="RFC5226"></xref>) after a two-week review period on the
oauth-ext-review@ietf.org mailing list, on the advice of one or more
Designated Experts.  However, to allow for the allocation of values
prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for access token type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template" title="Registration Template">

<t><list style="hanging">
  <t hangText='Type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Additional Token Endpoint Response Parameters:'>
  Additional response parameters returned together with the
"access_token" parameter.  New parameters MUST be separately
registered in the OAuth Parameters registry as described by
Section 11.2.</t>
  <t hangText='HTTP Authentication Scheme(s):'>
  The HTTP authentication scheme name(s), if any, used to
authenticate protected resource requests using access tokens of
this type.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
</section>
<section anchor="oauth-parameters-registry" title="OAuth Parameters Registry">

<t>This specification establishes the OAuth Parameters registry.</t>

<t>Additional parameters for inclusion in the authorization endpoint
request, the authorization endpoint response, the token endpoint
request, or the token endpoint response are registered with a
Specification Required (<xref target="RFC5226"></xref>) after a two-week review period on
the oauth-ext-review@ietf.org mailing list, on the advice of one or
more Designated Experts.  However, to allow for the allocation of
values prior to publication, the Designated Expert(s) may approve
registration once they are satisfied that such a specification will
be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for parameter: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-1" title="Registration Template">

<t><list style="hanging">
  <t hangText='Parameter name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Parameter usage location:'>
  The location(s) where parameter can be used.  The possible
locations are authorization request, authorization response, token
request, or token response.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the parameter,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents" title="Initial Registry Contents">

<t>The OAuth Parameters registry's initial contents are:</t>

<t><list style="symbols">
  <t>Parameter name: client_id</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: client_secret</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: response_type</t>
  <t>Parameter usage location: authorization request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: redirect_uri</t>
  <t>Parameter usage location: authorization request, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: scope</t>
  <t>Parameter usage location: authorization request, authorization
response, token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: state</t>
  <t>Parameter usage location: authorization request, authorization
response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: code</t>
  <t>Parameter usage location: authorization response, token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_description</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: error_uri</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: grant_type</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: access_token</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: token_type</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: expires_in</t>
  <t>Parameter usage location: authorization response, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: username</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: password</t>
  <t>Parameter usage location: token request</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Parameter name: refresh_token</t>
  <t>Parameter usage location: token request, token response</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-authorization-endpoint-response-types-registry" title="OAuth Authorization Endpoint Response Types Registry">

<t>This specification establishes the OAuth Authorization Endpoint
Response Types registry.</t>

<t>Additional response types for use with the authorization endpoint are
registered with a Specification Required (<xref target="RFC5226"></xref>) after a two-week
review period on the oauth-ext-review@ietf.org mailing list, on the
advice of one or more Designated Experts.  However, to allow for the
allocation of values prior to publication, the Designated Expert(s)
may approve registration once they are satisfied that such a
specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for response type: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-2" title="Registration Template">

<t><list style="hanging">
  <t hangText='Response type name:'>
  The name requested (e.g., "example").</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the type, preferably
including a URI that can be used to retrieve a copy of the
document(s).  An indication of the relevant sections may also be
included but is not required.</t>
</list></t>

</section>
<section anchor="initial-registry-contents-1" title="Initial Registry Contents">

<t>The OAuth Authorization Endpoint Response Types registry's initial
contents are:</t>

<t><list style="symbols">
  <t>Response type name: code</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
  <t>Response type name: token</t>
  <t>Change controller: IETF</t>
  <t>Specification document(s): RFC 6749</t>
</list></t>

</section>
</section>
<section anchor="oauth-extensions-error-registry" title="OAuth Extensions Error Registry">

<t>This specification establishes the OAuth Extensions Error registry.</t>

<t>Additional error codes used together with other protocol extensions
(i.e., extension grant types, access token types, or extension
parameters) are registered with a Specification Required (<xref target="RFC5226"></xref>)
after a two-week review period on the oauth-ext-review@ietf.org
mailing list, on the advice of one or more Designated Experts.
However, to allow for the allocation of values prior to publication,
the Designated Expert(s) may approve registration once they are
satisfied that such a specification will be published.</t>

<t>Registration requests must be sent to the oauth-ext-review@ietf.org
mailing list for review and comment, with an appropriate subject
(e.g., "Request for error code: example").</t>

<t>Within the review period, the Designated Expert(s) will either
approve or deny the registration request, communicating this decision
to the review list and IANA.  Denials should include an explanation
and, if applicable, suggestions as to how to make the request
successful.</t>

<t>IANA must only accept registry updates from the Designated Expert(s)
and should direct all requests for registration to the review mailing
list.</t>

<section anchor="registration-template-3" title="Registration Template">

<t><list style="hanging">
  <t hangText='Error name:'>
  The name requested (e.g., "example").  Values for the error name
MUST NOT include characters outside the set %x20-21 / %x23-5B /
%x5D-7E.</t>
  <t hangText='Error usage location:'>
  The location(s) where the error can be used.  The possible
locations are authorization code grant error response
(Section 4.1.2.1), implicit grant error response
(Section 4.2.2.1), token error response (Section 5.2), or resource
access error response (Section 7.2).</t>
  <t hangText='Related protocol extension:'>
  The name of the extension grant type, access token type, or
extension parameter that the error code is used in conjunction
with.</t>
  <t hangText='Change controller:'>
  For Standards Track RFCs, state "IETF".  For others, give the name
of the responsible party.  Other details (e.g., postal address,
email address, home page URI) may also be included.</t>
  <t hangText='Specification document(s):'>
  Reference to the document(s) that specify the error code,
preferably including a URI that can be used to retrieve a copy of
the document(s).  An indication of the relevant sections may also
be included but is not required.</t>
</list></t>

</section>
</section>
</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC2246;
&RFC2616;
&RFC2617;
&RFC2818;
&RFC3629;
&RFC3986;
&RFC4627;
&RFC4949;
&RFC5226;
&RFC5234;
&RFC5246;
&RFC6125;
<reference anchor="USASCII" >
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange, ANSI X3.4</title>
    <author initials="A.N.S." surname="Institute" fullname="American National Standards Institute">
      <organization></organization>
    </author>
    <date year="1986"/>
  </front>
</reference>
&W3C.REC-html401-19991224;
&W3C.REC-xml-20081126;


    </references>

    <references title='Informative References'>

<reference anchor="OAuth-HTTP-MAC" >
  <front>
    <title>Message Authentication Code (MAC) Tokens</title>
    <author initials="J." surname="Richer" fullname="Justin Richer">
      <organization>The MITRE Corporation</organization>
    </author>
    <author initials="W." surname="Mills" fullname="William Mills">
      <organization>Yahoo! Inc.</organization>
    </author>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
    </author>
    <author initials="P." surname="Hunt" fullname="Phil Hunt">
      <organization>Oracle Corporation</organization>
    </author>
    <date year="2014" month="January" day="15"/>
  </front>
</reference>
&RFC7522;
&RFC6819;
&RFC5849;
&RFC6750;


    </references>


<section anchor="augmented-backus-naur-form-abnf-syntax" title="Augmented Backus-Naur Form (ABNF) Syntax">

<t>This section provides Augmented Backus-Naur Form (ABNF) syntax
descriptions for the elements defined in this specification using the
notation of <xref target="RFC5234"></xref>.  The ABNF below is defined in terms of Unicode
code points <xref target="W3C.REC-xml-20081126"></xref>; these characters are typically
encoded in UTF-8.  Elements are presented in the order first defined.</t>

<t>Some of the definitions that follow use the "URI-reference"
definition from <xref target="RFC3986"></xref>.</t>

<t>Some of the definitions that follow use these common definitions:</t>

<figure><artwork><![CDATA[
VSCHAR     = %x20-7E
NQCHAR     = %x21 / %x23-5B / %x5D-7E
NQSCHAR    = %x20-21 / %x23-5B / %x5D-7E
UNICODECHARNOCRLF = %x09 /%x20-7E / %x80-D7FF /
                    %xE000-FFFD / %x10000-10FFFF
]]></artwork></figure>

<t>(The UNICODECHARNOCRLF definition is based upon the Char definition
in Section 2.2 of <xref target="W3C.REC-xml-20081126"></xref>, but omitting the Carriage
Return and Linefeed characters.)</t>

<section anchor="clientid-syntax" title="&quot;client_id&quot; Syntax">

<t>The "client_id" element is defined in Section 2.3.1:</t>

<figure><artwork><![CDATA[
client-id     = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="clientsecret-syntax" title="&quot;client_secret&quot; Syntax">

<t>The "client_secret" element is defined in Section 2.3.1:</t>

<figure><artwork><![CDATA[
client-secret = *VSCHAR
]]></artwork></figure>

</section>
<section anchor="responsetype-syntax" title="&quot;response_type&quot; Syntax">

<t>The "response_type" element is defined in Sections 3.1.1 and 8.4:</t>

<figure><artwork><![CDATA[
response-type = response-name *( SP response-name )
response-name = 1*response-char
response-char = "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="scope-syntax" title="&quot;scope&quot; Syntax">

<t>The "scope" element is defined in Section 3.3:</t>

<figure><artwork><![CDATA[
 scope       = scope-token *( SP scope-token )
 scope-token = 1*NQCHAR
]]></artwork></figure>

</section>
<section anchor="state-syntax" title="&quot;state&quot; Syntax">

<t>The "state" element is defined in Sections 4.1.1, 4.1.2, 4.1.2.1,
4.2.1, 4.2.2, and 4.2.2.1:</t>

<figure><artwork><![CDATA[
 state      = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="redirecturi-syntax" title="&quot;redirect_uri&quot; Syntax">

<t>The "redirect_uri" element is defined in Sections 4.1.1, 4.1.3,
and 4.2.1:</t>

<figure><artwork><![CDATA[
 redirect-uri      = URI-reference
]]></artwork></figure>

</section>
<section anchor="error-syntax" title="&quot;error&quot; Syntax">

<t>The "error" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2,
7.2, and 8.5:</t>

<figure><artwork><![CDATA[
 error             = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="errordescription-syntax" title="&quot;error_description&quot; Syntax">

<t>The "error_description" element is defined in Sections 4.1.2.1,
4.2.2.1, 5.2, and 7.2:</t>

<figure><artwork><![CDATA[
 error-description = 1*NQSCHAR
]]></artwork></figure>

</section>
<section anchor="erroruri-syntax" title="&quot;error_uri&quot; Syntax">

<t>The "error_uri" element is defined in Sections 4.1.2.1, 4.2.2.1, 5.2,
and 7.2:</t>

<figure><artwork><![CDATA[
 error-uri         = URI-reference
]]></artwork></figure>

</section>
<section anchor="granttype-syntax" title="&quot;grant_type&quot; Syntax">

<t>The "grant_type" element is defined in Sections 4.1.3, 4.3.2, 4.4.2,
4.5, and 6:</t>

<figure><artwork><![CDATA[
 grant-type = grant-name / URI-reference
 grant-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="code-syntax" title="&quot;code&quot; Syntax">

<t>The "code" element is defined in Section 4.1.3:</t>

<figure><artwork><![CDATA[
 code       = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="accesstoken-syntax" title="&quot;access_token&quot; Syntax">

<t>The "access_token" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 access-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="tokentype-syntax" title="&quot;token_type&quot; Syntax">

<t>The "token_type" element is defined in Sections 4.2.2, 5.1, and 8.1:</t>

<figure><artwork><![CDATA[
 token-type = type-name / URI-reference
 type-name  = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
<section anchor="expiresin-syntax" title="&quot;expires_in&quot; Syntax">

<t>The "expires_in" element is defined in Sections 4.2.2 and 5.1:</t>

<figure><artwork><![CDATA[
 expires-in = 1*DIGIT
]]></artwork></figure>

</section>
<section anchor="username-syntax" title="&quot;username&quot; Syntax">

<t>The "username" element is defined in Section 4.3.2:</t>

<figure><artwork><![CDATA[
 username = *UNICODECHARNOCRLF
]]></artwork></figure>

</section>
<section anchor="password-syntax" title="&quot;password&quot; Syntax">

<t>The "password" element is defined in Section 4.3.2:</t>

<figure><artwork><![CDATA[
 password = *UNICODECHARNOCRLF
]]></artwork></figure>

</section>
<section anchor="refreshtoken-syntax" title="&quot;refresh_token&quot; Syntax">

<t>The "refresh_token" element is defined in Sections 5.1 and 6:</t>

<figure><artwork><![CDATA[
 refresh-token = 1*VSCHAR
]]></artwork></figure>

</section>
<section anchor="endpoint-parameter-syntax" title="Endpoint Parameter Syntax">

<t>The syntax for new endpoint parameters is defined in Section 8.2:</t>

<figure><artwork><![CDATA[
 param-name = 1*name-char
 name-char  = "-" / "." / "_" / DIGIT / ALPHA
]]></artwork></figure>

</section>
</section>
<section anchor="use-of-applicationx-www-form-urlencoded-media-type" title="Use of application/x-www-form-urlencoded Media Type">

<t>At the time of publication of this specification, the
"application/x-www-form-urlencoded" media type was defined in
Section 17.13.4 of <xref target="W3C.REC-html401-19991224"></xref> but not registered in
the IANA MIME Media Types registry
(<eref target="http://www.iana.org/assignments/media-types">http://www.iana.org/assignments/media-types</eref>).  Furthermore, that
definition is incomplete, as it does not consider non-US-ASCII
characters.</t>

<t>To address this shortcoming when generating payloads using this media
type, names and values MUST be encoded using the UTF-8 character
encoding scheme <xref target="RFC3629"></xref> first; the resulting octet sequence then
needs to be further encoded using the escaping rules defined in
<xref target="W3C.REC-html401-19991224"></xref>.</t>

<t>When parsing data from a payload using this media type, the names and
values resulting from reversing the name/value encoding consequently
need to be treated as octet sequences, to be decoded using the UTF-8
character encoding scheme.</t>

<t>For example, the value consisting of the six Unicode code points
(1) U+0020 (SPACE), (2) U+0025 (PERCENT SIGN),
(3) U+0026 (AMPERSAND), (4) U+002B (PLUS SIGN),
(5) U+00A3 (POUND SIGN), and (6) U+20AC (EURO SIGN) would be encoded
into the octet sequence below (using hexadecimal notation):</t>

<figure><artwork><![CDATA[
20 25 26 2B C2 A3 E2 82 AC
]]></artwork></figure>

<t>and then represented in the payload as:</t>

<figure><artwork><![CDATA[
+%25%26%2B%C2%A3%E2%82%AC
]]></artwork></figure>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The initial OAuth 2.0 protocol specification was edited by David
Recordon, based on two previous publications: the OAuth 1.0 community
specification <xref target="RFC5849"></xref>, and OAuth WRAP (OAuth Web Resource
Authorization Profiles).  Eran Hammer then edited many
of the intermediate drafts that evolved into this RFC.  The Security
Considerations section was drafted by Torsten Lodderstedt, Mark
McGloin, Phil Hunt, Anthony Nadalin, and John Bradley.  The section
on use of the "application/x-www-form-urlencoded" media type was
drafted by Julian Reschke.  The ABNF section was drafted by Michael
B. Jones.</t>

<t>The OAuth 1.0 community specification was edited by Eran Hammer and
authored by Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M.
Conlan, Blaine Cook, Leah Culver, Breno de Medeiros, Brian Eaton,
Kellan Elliott-McCrea, Larry Halff, Eran Hammer, Ben Laurie, Chris
Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler,
Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.</t>

<t>The OAuth WRAP specification was edited by Dick Hardt and authored by
Brian Eaton, Yaron Y. Goland, Dick Hardt, and Allen Tom.</t>

<t>This specification is the work of the OAuth Working Group, which
includes dozens of active and dedicated participants.  In particular,
the following individuals contributed ideas, feedback, and wording
that shaped and formed the final specification:</t>

<t>Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden
Bell, John Bradley, Marcos Caceres, Brian Campbell, Scott Cantor,
Blaine Cook, Roger Crew, Leah Culver, Bill de hOra, Andre DeMarre,
Brian Eaton, Wesley Eddy, Wolter Eldering, Brian Ellin, Igor
Faynberg, George Fletcher, Tim Freeman, Luca Frosini, Evan Gilbert,
Yaron Y. Goland, Brent Goldman, Kristoffer Gronowski, Eran Hammer,
Dick Hardt, Justin Hart, Craig Heath, Phil Hunt, Michael B. Jones,
Terry Jones, John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara,
Rasmus Lerdorf, Torsten Lodderstedt, Hui-Lan Lu, Casey Lucas, Paul
Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin,
Laurence Miao, William Mills, Chuck Mortimore, Anthony Nadalin,
Julian Reschke, Justin Richer, Peter Saint-Andre, Nat Sakimura, Rob
Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
Justin Smith, Haibin Song, Niv Steingarten, Christian Stuebner,
Jeremy Suriel, Paul Tarjan, Christopher Thomas, Henry S. Thompson,
Allen Tom, Franklin Tse, Nick Walker, Shane Weeden, and Skylar
Woodward.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAPBlYF4AA+y9aXfjxpUw/L1+BV7lxBYTkq2l90zP86g3uz3uJb3Ek8zx
+EAkJMENAhoClFpJ/Pz29661oUBS7XaWSeskbokEarl16+7LZDIxXdlVxf3s
7VmRvTxadWfZwXQvw1+aZfnnvCubOnu6zBfFZbN8b+bNrIbf72fLk9ntOzfv
mXnewV8He/sHk/29yd6+MeX58n7WLVdtd7C3d2/vwOTLIr/PY5v3l/ezZ3VX
LOuimzxe5iedmeXd/azt5sbMmnlZn97PVu0kb2dlac7L+ybLumZ2P7sqWvi1
bZbdsjhp7d9XC/enyWnR+MoE/p9lZQ3fPJ5mX+fLeUef8Nofl7P33ofFIi+r
+9kcPp2e4af/9xQ/mc6aBX2/Wpb3s7OuO79/4wY+RM9Mm+WpMXWzXACILgqc
9PXTRwf7+/f014Obt/XX2/ver3f017v7d+XXw9sH+trhvbv67M3bB/rszXs3
9YFbBwe37a+HN+2vdrbb+we38Nd3b47ePHr27D7tQQ5551EzL+bZI9hCPoNT
yN4UXTaZZHcmx2WXHS2KZTnL6+xNl9dz2GWGj2cnzRLO7IS3CthA5zc7y+vT
YpwdvXjzLPvPw+nNHZrHHYED944d9wUNkFd2ghYGa2Ftq67g9xmd9gEI8Od3
h4+mr588mpx1i+rm3v5k/969e/sA1/vedx8W1QTw7O7+PoLFlLpOPhJCusnX
b9++mjw/ehSC4nnRtvlpQahe1B0skHZHW96Fp0fZ2+Z9UbepjU1ka98Alpd1
9rqcnRVL+U7w7ptp/DFgDF+z58/evn4CEy3PmyVNGo36XVlVZb7InsO/bTjq
d9PoUxr0j/lZ0/x/AMvZNBrq67yuizZ7287OmpOiLk/D4b6e9r/SV1+dlVX2
9aruwldeTcMPaQEvAZ2qorclSxxuTvD4bjGC3gEUVly9a+/LrbsWxW/fubUH
Z2kmgJn5cdshrhoTEqg8IFAnSqCyos6PK9hxnnVn5XI+Oc+X3ZXJz88rPeCu
yZrjLodjq8pF2cF1yGczwAX8AnAUkSVri+VFOQP0LkpAjmUG+zkuzvLqJGtO
YOhl0Tar5azImssavj2+AijAUeNKAR1OcRiYcdlcAKqXeFtgAyWN0V0WBSwB
thKNAfeBPg6nb2jwvKqaSxwXHjDetrL0tmQ78FnZtTh8xmufZoB9ZWva82JW
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
FFmRf7tDtud+ov4toYNjAs5xychdCgYah4EOCoyyBEFc/CKv2Ya3Bt1w7NlZ
gwn2CFykNZJVROOsWrWApvyERGmTDqKWU3go1oLX6zueSqoHT6ujV6qqUCtl
idWLkAHTRsrWxGijKVTHwL27KxMpYY+JYMMpbCU0euTsKKb9rcYge4IExtsg
NC6b7DK/au9nwUUgdOzP685m1xnpOg5PmBVzUM5aPyUQCM3+SJswKaqu6hK7
5AXJXGh/ARlC6jzxVCzT8Dv4TITDdMOYd16AftEsrTRqUMAj85FwR24rxoUw
hS5izUw2vh1X2pF36cgz8h0SqoORAHwd9QWwinnIDmyp0SuiLHh5UBEHxVAi
qmhf6hJw8GbdRgMXU+5IkrYJAEcPXzx1VCFm7F5Ve7RFkDCWvCxj93oE116E
+PAg/Opu36FIqpVqAg4NjQ0kZRpGYGMisaJEBitVSfyA23b2INv/Df42QZ8N
fWn/wi93JjvZjWxnSv/9Af/7+NlXz0DqzI6+ffX1kfFuExKQJ+pveuXySdZc
KblXL8i8Y1tGJBqQ2L2kk62N9XOJQzryfiEKKijZ0BXxJuHIbtXuQg7cx4jv
o9kudrwmEI635DBuLOVc5UUl2OISV4xGG8hE1x8UMuIxqEaudahrAo8MQrGs
fvkmmWskuOCtaD0ybIMN72qf1Ybkw2ObNlc1pCEmQUOc8SmiI1mfjpiIjiRt
lCExYU4sgcCqxef9pQN0yw9WZ0N6V5Xvi+pKVIwTWC3bDIxWn4kkDj23Y/ii
ZjT+ErU8UAUQxj98SfWmgssU1qrgXu8buVTvYg3FRfV4F3UuRPlCcH2R5SbF
U3pXMZ336wIak5nJYkppfS0purXu+lPTl6sEhVdRZvj6Bkk9XqqM3Nl1ELfE
TPWba0E/ReJkGAb/epIWEC+zlnhtuexrUjR0T7/2V2yGqZrujNKAmZUycQm/
AApiPyCC85vd7M2r6LNR+KIjTPYjS5yCT4g+pWiSKqFuJ5rc0rKwJv1p2nP0
fXjhXbsYzzVCo6ghHzFc1iW7zHN+eILdJFlaqjBMjdWRFSdJOBXJZgLJl1Fc
DMD5JdI8XouE0cijckXdkY+NeHjY/p5bGUiqWC18mxEJ+E5P4hSGnsUvBA0n
qJBCtDPc18vEVWC/Br3vguMNvEoEuHxVOT3MZVXBnyhYAwFkFuzabQeO4VjM
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
fOQgG9YKAgA=

-->

</rfc>

